# -*- coding: utf-8 -*-
"""Multiple Regression Time Series Analysis in Python .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wL6ryS5hSofdfNubobr01pEXxZdA93JZ

In this regression analysis, I will investigate whether the amount of renewable and nonrenewable energy produced and individually affects the price of energy per EUR/MWH collectively.
 
For example, would a decrease in the amount of energy produced from solar panels increase the price of energy per EUR/MWH yet would an increase in the amount of energy produced from fossil fuels decrease the price per EUR/MWH at the same time? 
 
These questions are worth pondering over, as figuring out the price of energy per EUR/MWH from the amount of energy produced; based on the type of resource, could lower energy prices as well as appropriately decrease the output amount from pollutants such as fossil fuels.
 
If one figures out that producing too much energy from one particular source while producing too little energy from one particular source is unnecessarily increasing prices, then this regression analysis can investigate and calculate the direction of energy prices based on the amount produced from several energy sources as a result. Furthermore, this regression analysis can point out which energy sources are increasing the price of energy collectively. As a result, one can save resources and investigate the causes of higher energy prices from that particular source rather than spend money to investigate all energy sources. A couple factors that can result in overall price increases from certain resources are supply chain issues, labor shortages, technological flaws, etc.
 
Below is the dataset that I will be analyzing using Python. I downloaded this dataset off of Kaggle. This dataset contains the outputs of energy produced in the scale of megawatts from certain resources followed by the price per EUR/MWH. The observations originated from the country of Spain, and were collected from January 2015 to December 2018.
"""

# Commented out IPython magic to ensure Python compatibility.
import pylab
import numpy as np 
from scipy.stats import skew
import pandas as pd 
import matplotlib.pyplot as plt  
# %matplotlib inline
import scipy as scipy
import sklearn as sklearn
import statsmodels.api as sm
import seaborn as sns
import matplotlib.pyplot as plt

import pandas as pd
import statsmodels.api as sm
import scipy.stats as stats

import matplotlib



"""Here is a index of hashtags to organize the data. Each hashtag will be matched with the conducted analysis within its respective code. For example, the hashtag "#Autocorrelation" would be found within a block of code that calcuated the Autocorrelation of the individual dataframes. They are in no particular order."""

#Linear OLS regression

#OLS Linear Summary Table

#Linear OLS regression standard residuals

#Multiple regression residual plot

# Description tables of monthly datasets ("Year_Month" ="0000_0")

# OLS Logarithmic average monthly predictions versus residuals

#Pie Chart

#Predicted average monthly OLS quadratic values versus residuals

# Stem Plot

#OLS logarithmic predicted average monthly ratios versus actual ratios

# OLS Logarithmic average monthly ratio predictions versus residuals

#Predicted OLS average monthly quadratic

#Predicted OLS linear average monthly ratios versus residuals

#Predicted average monthly OLS quadratic price of energy per EUR/MWH versus actual values

#OLS predicted quadratic average monthly ratios versus actual values

# OLS predicted linear average monthly ratios versus actual ratios

#OLS predicted quadratic average monthly ratios versus residuals

#Rounded Price

#Multiple OLS regression

# OLS Predicted Linear Regession ratio versus actual ratios

#ADF Tests

#Autocorrelation Plot

#Partialautocorrelation Plot

#Seasonality values

#Bell Curves

#Description table of Dataframes

# Description tables of monthly datasets ("Year_Month" ="0000_0")

# Monthly Datasets

#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018

# Average monthly values

#Autocorrelations

#Outilers

#Quadratic Scatterplots

#Log

#Quadratic Summary Table:

# Box and Whisker Plot

#Quadratic OLS regression

#OLS linear scatterplot

#slope and intercept for OLS linear regression

#Dataframes analyzed by resource

#Logarithmic OLS regressions

#Logarithmic OLS regression scatterplot

#Logarithmic OLS regression residuals

#OLS Logarithmic summary table

# Histograms

#Datasets

#Column Values

"""As one can see, there have been many plug ins downloaded for this regressional analysis. Below is the dataset used for this regressional analysis."""

df2 = pd.read_csv("./energy_dataset.csv") #Datasets

df2

"""Here are the columns within the dataset."""

print(df2.columns.values) #Column Values



"""The columns will be extracted per month and analyzed for the sake of the regressional analysis. Although the new data datasets were extracted based off of the year and month, they are not organized in no particular order. However, the graphs used in this regressional analysis will ensure the chronology of the observations."""

df3 = pd.read_csv("./energy_dataset.csv") #Datasets

df3

print(df3.columns.values) #Column Values

"""Below are line graphs that depict the hourly quantities of energy prices in EUR/MWH and the resources produced from January 2015 to December 2018. """

print(df3.columns.values) #Column Values

df4 = df3

#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018'  
df3['Time'] = pd.to_datetime(df3['time'], utc=True)
ax = df3.plot(x='Time', y='price actual', figsize=(12,6))
ax.set_title('Price of energy per EUR/MWH from January 1st, 2015 to December 31st, 2018')

"""This line graph displays the relationship between the time and the price of energy per EUR/MWH. As one can observe, there were periods of gradual decline in price from 2015 to 2016. From 2016 to 2017, there was a gradual increase which was followed by a sharp increase in the price. Afterwards, there was a sharp decline in the price, followed by a period of consolidation until the end of 2017, which experienced a sharp increase. From 2018, there were only a few sharp price declines; but the rest of the year was roughly consistent."""

#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018
df3['Time'] = pd.to_datetime(df3['time'], utc=True)
ax = df3.plot(x='Time', y='generation solar', figsize=(12,6))
ax.set_title('Solar output in megawatts from January 1st, 2015 to December 31st, 2018')

"""Within this line graph, one would be able to notice a sharp drop in the output amount at the beginning of every year observed on this graph. These drops would be followed by a gradual but steep increase in solar output. It would be reasonable to assume that these sharp drops are due to the wintertime, as Spain, like the rest of the countries within the Northern Hempishere experience, shorter daytime hours, resulting in less sunlight for production."""

#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018
df3['Time'] = pd.to_datetime(df3['time'], utc=True)
ax = df3.plot(x='Time', y='generation fossil oil', figsize=(12,6))
ax.set_title('Fossil oil output in megawatts from January 1st, 2015 to December 31st, 2018')

"""With the expectation of the sudden output drop right before 2018 and the consistent spike increases between 2016 and 2017, the production of fossil oil was roughly consistent."""

#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018
df3['Time'] = pd.to_datetime(df3['time'], utc=True)
ax = df3.plot(x='Time', y='generation fossil gas', figsize=(12,6))
ax.set_title('Fossil oil output in megawatts from January 1st, 2015 to December 31st, 2018')

"""Based off of the constant yet consistent output spikes in the production of fossil oil, it would be reasonable to assume that the production yield was continuously discrete, meaning that the output spikes, which were always followed by periods consolidation, were a frequent and regular occurrence."""



#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018
df3['Time'] = pd.to_datetime(df3['time'], utc=True)
ax = df3.plot(x='Time', y='generation fossil hard coal', figsize=(12,6))
ax.set_title('Fossil hard coal output in megawatts from January 1st, 2015 to December 31st, 2018')

"""Based on this graph, the production output of fossil hard coal was a consistent roller coaster. There were no unusual output spikes or sharp drops, but production output fluctuated throughout the years."""



#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018
df3['Time'] = pd.to_datetime(df3['time'], utc=True)
ax = df3.plot(x='Time', y='generation nuclear', figsize=(12,6))
ax.set_title('Nuclear output in megawatts from January 1st, 2015 to December 31st, 2018')

"""The consistent roller coaster analogy from the previous graph, which depicted the production output of fossil hard coal, can also be applied for the production output of nuclear energy. But unlike fossil hard coal, production outputs of nuclear energy have sharp output drops right before 2018 and and right after 2018. Afterwards, the production output consolidated."""

#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018
df3['Time'] = pd.to_datetime(df3['time'], utc=True)
ax = df3.plot(x='Time', y='generation other renewable', figsize=(12,6))
ax.set_title('Other renewable outputs in megawatts from January 1st, 2015 to December 31st, 2018')

"""Just like nuclear energy, the production outputs of other renewables experienced sharp output drops right before and after 2018, followed by a period of consolidation. In addition, Unlike nuclear energy, though, the production outputs of other renewables gradually increased after an output drop in 2015."""

#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018
df3['Time'] = pd.to_datetime(df3['time'], utc=True)
ax = df3.plot(x='Time', y='generation wind onshore', figsize=(12,6))
ax.set_title('Onshore wind output in megawatts from January 1st, 2015 to December 31st, 2018')

"""The production output of onshore wind was continuously discrete, meaning that there were consistent output spikes and drops after a period of consolidation. This pattern repeated itself throughout the years observed."""

#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018
df3['Time'] = pd.to_datetime(df3['time'], utc=True)
ax = df3.plot(x='Time', y='generation hydro water reservoir', figsize=(12,6))
ax.set_title('Hydro reservoir output in megawatts from January 1st, 2015 to December 31st, 2018')

"""Hydro reservoir production output was discrete; as there were consistent sharp drops and spikes throughout the years observed. But after a period of consolidation from 2015 to 2016, there was a steep increase in the beginning of 2016; followed by a gradual decrease until the middle of 2017. From then on, production output gradually increased while incorporating the continuously discrete drops and spikes."""

#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018
df3['Time'] = pd.to_datetime(df3['time'], utc=True)
ax = df3.plot(x='Time', y='generation biomass', figsize=(12,6))
ax.set_title('Biomass output in megawatts from January 1st, 2015 to December 31st, 2018')

"""Just like the production outputs of other renewables, biomass production experienced sharp output drops right before and after 2018, followed by a period of consolidation. Unlike the production of other renewables, though, the production output of biomass gradually decreased after an output drop in 2015."""

#Observed values on an hourly scale from January 1st, 2015 to December 31st, 2018
df3['Time'] = pd.to_datetime(df3['time'], utc=True)
ax = df3.plot(x='Time', y='generation fossil brown coal/lignite', figsize=(12,6))
ax.set_title('fossil brown coal output in megawatts from January 1st, 2015 to December 31st, 2018')

"""Fossil brown coal production output was discrete; as there were consistent sharp drops and spikes throughout the years observed. Some of these time periods had higher consistencies of outputs yet some of these time periods had volatile outputs.

As one can observe, the lines within these graphs are condensed. As such, the dataset has been segmented by monthly averages. By sorting the dataset by the monthly averages, the themes of the variables can be analyzed based off its overall seasonality. In doing this, the observation count changed from 35064 to 48. The dataset can still be confidentially analyzed for statistical significance, since 30 observations is the minimum threshold for this matter. Some of the variable names were changed as well for simplicity. Since there was a lack of observations from off wind production, "Generation Wind Onshore" simply became "Wind". With the exception of "Generation Hydro Water Reservoir", all other hydro production was disqualified from this analysis for their lack of observations.
"""



"""Below are the outliers from the columns of the original dataframe. All of these extracted columns were used as independent and dependant variables in the regression extracted. These outliers will be included in the monthly averages since the 35064 observations were collected on an hourly basis. This hourly timeframe is very short in comparison to the monthly timeframe used in the modification process."""

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_price = find_outliers_IQR(df2['price actual'])

print("number of outliers:"+ str(len(outliers_price)))

print("max outlier value:"+ str(outliers_price.max()))

print("min outlier value:"+ str(outliers_price.min()))

print(outliers_price)

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_generation_nuclear = find_outliers_IQR(df2['generation nuclear'])

print("number of outliers:"+ str(len(outliers_generation_nuclear)))

print("max outlier value:"+ str(outliers_generation_nuclear.max()))

print("min outlier value:"+ str(outliers_generation_nuclear.min()))

print(outliers_generation_nuclear)

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_generation_wind = find_outliers_IQR(df2['generation wind onshore'])

print("number of outliers:"+ str(len(outliers_generation_wind)))

print("max outlier value:"+ str(outliers_generation_wind.max()))

print("min outlier value:"+ str(outliers_generation_wind.min()))





print(outliers_generation_wind)

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_generation_hydro = find_outliers_IQR(df2['generation hydro water reservoir'])

print("number of outliers:"+ str(len(outliers_generation_hydro)))

print("max outlier value:"+ str(outliers_generation_hydro.max()))

print("min outlier value:"+ str(outliers_generation_hydro.min()))

print(outliers_generation_hydro)

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_generation_other_renewable = find_outliers_IQR(df2['generation other renewable'])

print("number of outliers:"+ str(len(outliers_generation_other_renewable)))

print("max outlier value:"+ str(outliers_generation_other_renewable.max()))

print("min outlier value:"+ str(outliers_generation_other_renewable.min()))

print(outliers_generation_other_renewable)

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_generation_brown = find_outliers_IQR(df2['generation fossil brown coal/lignite'])

print("number of outliers:"+ str(len(outliers_generation_brown)))

print("max outlier value:"+ str(outliers_generation_brown.max()))

print("min outlier value:"+ str(outliers_generation_brown.min()))

print(outliers_generation_brown)

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_generation_solar = find_outliers_IQR(df2['generation solar'])

print("number of outliers:"+ str(len(outliers_generation_solar)))

print("max outlier value:"+ str(outliers_generation_solar.max()))

print("min outlier value:"+ str(outliers_generation_solar.min()))

print(outliers_generation_solar)

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_fossil_hard = find_outliers_IQR(df2['generation fossil hard coal'])

print("number of outliers:"+ str(len(outliers_fossil_hard)))

print("max outlier value:"+ str(outliers_fossil_hard.max()))

print("min outlier value:"+ str(outliers_fossil_hard.min()))

print(outliers_fossil_hard)

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_fossil_oil = find_outliers_IQR(df2['generation fossil oil'])

print("number of outliers:"+ str(len(outliers_fossil_oil)))

print("max outlier value:"+ str(outliers_fossil_oil.max()))

print("min outlier value:"+ str(outliers_fossil_oil.min()))


print(outliers_fossil_oil)

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_fossil_gas = find_outliers_IQR(df2['generation fossil gas'])

print("number of outliers:"+ str(len(outliers_fossil_gas)))

print("max outlier value:"+ str(outliers_fossil_gas.max()))

print("min outlier value:"+ str(outliers_fossil_gas.min()))

print(outliers_fossil_gas)

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_fossil_gas = find_outliers_IQR(df2['generation fossil gas'])

print("number of outliers:"+ str(len(outliers_fossil_gas)))

print("max outlier value:"+ str(outliers_fossil_gas.max()))

print("min outlier value:"+ str(outliers_fossil_gas.min()))

print(outliers_fossil_gas)

def find_outliers_IQR(df2): #Outliers

   q1=df2.quantile(0.25)

   q3=df2.quantile(0.75)

   IQR=q3-q1

   outliers = df2[((df2<(q1-1.5*IQR)) | (df2>(q3+1.5*IQR)))]

   return outliers


outliers_biomass = find_outliers_IQR(df2['generation biomass'])

print("number of outliers:"+ str(len(outliers_biomass)))

print("max outlier value:"+ str(outliers_biomass.max()))

print("min outlier value:"+ str(outliers_biomass.min()))

print(outliers_biomass)

"""Below this sentence are the modified dataframes extracted from the original dataset. These modified dataframes were organized on a monthly basis."""

Dates = pd.date_range('2015-1','2018-12', 
              freq='MS').strftime("%y-%m").tolist()

Months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]

dicDates = {Date: Month for Date, Month in zip(Dates, Months)}
print(dicDates)

print(Dates)

df2018_1 = df2[df2['time'].str.contains("2018-01")]
df2018_1
# Monthly Datasets ("Year_Month" ="0000_0")

df2016_1 = df2[df2['time'].str.contains("2016-01")]
df2016_1
# Monthly Datasets ("Year_Month" ="0000_0")

df2016_1.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2015_1 = df2[df2['time'].str.contains("2015-01")]
df2015_1
# Monthly Datasets ("Year_Month" ="0000_0")

df2016_1 = df2[df2['time'].str.contains("2016-01")]
df2016_1
# Monthly Datasets ("Year_Month" ="0000_0")



df2016_1.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2017_1 = df2[df2['time'].str.contains("2017-01")]
df2017_1
# Monthly Datasets ("Year_Month" ="0000_0")

df2017_1.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_1 = df2[df2['time'].str.contains("2018-01")]
df2018_1
 # Monthly Datasets ("Year_Month" ="0000_0")

df2018_1.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2015_2 = df2[df2['time'].str.contains("2015-02")]
df2015_2
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_2.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2016_2 = df2[df2['time'].str.contains("2016-02")]
df2016_2
 # Monthly Datasets ("Year_Month" ="0000_0")

df2016_2.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2017_2 = df2[df2['time'].str.contains("2017-02")]
df2017_2
 # Monthly Datasets ("Year_Month" ="0000_0")

df2017_2.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_2 = df2[df2['time'].str.contains("2018-02")]
df2018_2
 # Monthly Datasets ("Year_Month" ="0000_0")



df2018_2.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2015_3 = df2[df2['time'].str.contains("2015-03")]
df2015_3
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_3.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2016_3 = df2[df2['time'].str.contains("2016-03")]
df2016_3
 # Monthly Datasets ("Year_Month" ="0000_0")

df2016_3.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2017_3 = df2[df2['time'].str.contains("2017-03")]
df2017_3
 # Monthly Datasets ("Year_Month" ="0000_0")

df2017_3.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_3 = df2[df2['time'].str.contains("2018-03")]
df2018_3
 # Monthly Datasets ("Year_Month" ="0000_0")

df2018_3.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2015_4 = df2[df2['time'].str.contains("2015-04")]
df2015_4
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_4.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2016_4 = df2[df2['time'].str.contains("2016-04")]
df2016_4
 # Monthly Datasets ("Year_Month" ="0000_0")

df2016_4.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")



df2017_4 = df2[df2['time'].str.contains("2017-04")]
df2017_4
 # Monthly Datasets ("Year_Month" ="0000_0")

df2017_4.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_4 = df2[df2['time'].str.contains("2018-04")]
df2018_4
 # Monthly Datasets ("Year_Month" ="0000_0")

df2018_4.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2015_5 = df2[df2['time'].str.contains("2015-05")]
df2015_5
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_5.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2016_5 = df2[df2['time'].str.contains("2016-05")]
df2016_5
 # Monthly Datasets ("Year_Month" ="0000_0")

df2016_5.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2017_5 = df2[df2['time'].str.contains("2017-05")]
df2017_5
 # Monthly Datasets ("Year_Month" ="0000_0")

df2017_5.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_5 = df2[df2['time'].str.contains("2018-05")]
df2018_5
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_6 = df2[df2['time'].str.contains("2015-06")]
df2015_6
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_6.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2016_6 = df2[df2['time'].str.contains("2016-06")]
df2016_6
 # Monthly Datasets ("Year_Month" ="0000_0")

df2016_6.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2017_6 = df2[df2['time'].str.contains("2017-06")]
df2017_6
 # Monthly Datasets ("Year_Month" ="0000_0")

df2017_6.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_6 = df2[df2['time'].str.contains("2018-06")]
df2018_6
 # Monthly Datasets ("Year_Month" ="0000_0")

df2018_6.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2016_7 = df2[df2['time'].str.contains("2016-07")]
df2016_7
 # Monthly Datasets ("Year_Month" ="0000_0")

df2016_7.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2015_7 = df2[df2['time'].str.contains("2015-07")]
df2015_7
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_7.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2017_7 = df2[df2['time'].str.contains("2017-07")]
df2017_7
 # Monthly Datasets ("Year_Month" ="0000_0")

df2017_7.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_7 = df2[df2['time'].str.contains("2018-07")]
df2018_7
 # Monthly Datasets ("Year_Month" ="0000_0")

df2018_7.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2015_8 = df2[df2['time'].str.contains("2015-08")]
df2015_8
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_8.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2016_8 = df2[df2['time'].str.contains("2016-08")]
df2016_8
 # Monthly Datasets ("Year_Month" ="0000_0")

df2016_8.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2017_8 = df2[df2['time'].str.contains("2017-08")]
df2017_8
 # Monthly Datasets ("Year_Month" ="0000_0")

df2017_8.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_8 = df2[df2['time'].str.contains("2018-08")]
df2018_8
 # Monthly Datasets ("Year_Month" ="0000_0")

df2018_8.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2015_9 = df2[df2['time'].str.contains("2015-09")]
df2015_9
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_9.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2016_9 = df2[df2['time'].str.contains("2016-09")]
df2016_9
 # Monthly Datasets ("Year_Month" ="0000_0")

df2016_9.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2017_9 = df2[df2['time'].str.contains("2017-09")]
df2017_9
 # Monthly Datasets ("Year_Month" ="0000_0")

df2017_9.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_9 = df2[df2['time'].str.contains("2018-09")]
df2018_9
 # Monthly Datasets ("Year_Month" ="0000_0")

df2018_9.describe()

df2018_5.describe()

df2018_3.describe()

df2015_10 = df2[df2['time'].str.contains("2015-10")]
df2015_10
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_10.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2016_10 = df2[df2['time'].str.contains("2016-10")]
df2016_10
 # Monthly Datasets ("Year_Month" ="0000_0")

df2016_10.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2017_10 = df2[df2['time'].str.contains("2017-10")]
df2017_10
 # Monthly Datasets ("Year_Month" ="0000_0")

df2017_10.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_10 = df2[df2['time'].str.contains("2018-10")]
df2018_10
 # Monthly Datasets ("Year_Month" ="0000_0")

df2018_10.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2015_11 = df2[df2['time'].str.contains("2015-11")]
df2015_11
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_11.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2016_11 = df2[df2['time'].str.contains("2016-11")]
df2016_11
 # Monthly Datasets ("Year_Month" ="0000_0")

df2016_11.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2017_11 = df2[df2['time'].str.contains("2017-11")]
df2017_11
 # Monthly Datasets ("Year_Month" ="0000_0")

df2017_11.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_11 = df2[df2['time'].str.contains("2018-11")]
df2018_11
 # Monthly Datasets ("Year_Month" ="0000_0")

df2018_11.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2015_12 = df2[df2['time'].str.contains("2015-12")]
df2015_12
 # Monthly Datasets ("Year_Month" ="0000_0")

df2015_12.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2016_12 = df2[df2['time'].str.contains("2016-12")]
df2016_12
 # Monthly Datasets ("Year_Month" ="0000_0")

df2016_12.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2017_12 = df2[df2['time'].str.contains("2017-12")]
df2017_12
 # Monthly Datasets ("Year_Month" ="0000_0")

df2017_12.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")

df2018_12 = df2[df2['time'].str.contains("2018-12")]
df2018_12
 # Monthly Datasets ("Year_Month" ="0000_0")

df2018_12.describe() # Description tables of monthly datasets ("Year_Month" ="0000_0")



"""df2.columns.values

Below are the appended lists of the mean price of energy per EUR/MWH and the output mean per each resource for each month. However, the first appended list is the mean price of energy per EUR/MWH for each month.
"""

io2 = []
df2018_12.describe(include='all').loc['mean']
io2.append(df2018_12.describe(include='all').loc['mean']["price actual"])
df2018_11.describe(include='all').loc['mean']
io2.append(df2018_11.describe(include='all').loc['mean']["price actual"])
df2018_10.describe(include='all').loc['mean']
io2.append(df2018_10.describe(include='all').loc['mean']["price actual"])
df2018_9.describe(include='all').loc['mean']
io2.append(df2018_9.describe(include='all').loc['mean']["price actual"])
df2018_8.describe(include='all').loc['mean']
io2.append(df2018_8.describe(include='all').loc['mean']["price actual"])
df2018_7.describe(include='all').loc['mean']
io2.append(df2018_7.describe(include='all').loc['mean']["price actual"])
df2018_6.describe(include='all').loc['mean']
io2.append(df2018_6.describe(include='all').loc['mean']["price actual"])
df2018_5.describe(include='all').loc['mean']
io2.append(df2018_5.describe(include='all').loc['mean']["price actual"])
df2018_4.describe(include='all').loc['mean']
io2.append(df2018_4.describe(include='all').loc['mean']["price actual"])
df2018_3.describe(include='all').loc['mean']
io2.append(df2018_3.describe(include='all').loc['mean']["price actual"])
df2018_2.describe(include='all').loc['mean']
io2.append(df2018_2.describe(include='all').loc['mean']["price actual"])
df2018_1.describe(include='all').loc['mean']
io2.append(df2018_1.describe(include='all').loc['mean']["price actual"])
df2017_12.describe(include='all').loc['mean']
io2.append(df2017_12.describe(include='all').loc['mean']["price actual"])
df2017_11.describe(include='all').loc['mean']
io2.append(df2017_11.describe(include='all').loc['mean']["price actual"])
df2017_10.describe(include='all').loc['mean']
io2.append(df2017_10.describe(include='all').loc['mean']["price actual"])
df2017_9.describe(include='all').loc['mean']
io2.append(df2017_9.describe(include='all').loc['mean']["price actual"])
df2017_8.describe(include='all').loc['mean']
io2.append(df2017_8.describe(include='all').loc['mean']["price actual"])
df2017_7.describe(include='all').loc['mean']
io2.append(df2017_7.describe(include='all').loc['mean']["price actual"])
df2017_6.describe(include='all').loc['mean']
io2.append(df2017_6.describe(include='all').loc['mean']["price actual"])
df2017_5.describe(include='all').loc['mean']
io2.append(df2017_5.describe(include='all').loc['mean']["price actual"])
df2017_4.describe(include='all').loc['mean']
io2.append(df2017_4.describe(include='all').loc['mean']["price actual"])
df2017_3.describe(include='all').loc['mean']
io2.append(df2017_3.describe(include='all').loc['mean']["price actual"])
df2017_2.describe(include='all').loc['mean']
io2.append(df2017_2.describe(include='all').loc['mean']["price actual"])
df2017_1.describe(include='all').loc['mean']
io2.append(df2017_1.describe(include='all').loc['mean']["price actual"])
df2016_12.describe(include='all').loc['mean']
io2.append(df2016_12.describe(include='all').loc['mean']["price actual"])
df2016_11.describe(include='all').loc['mean']
io2.append(df2016_11.describe(include='all').loc['mean']["price actual"])
df2016_10.describe(include='all').loc['mean']
io2.append(df2016_10.describe(include='all').loc['mean']["price actual"])
df2016_9.describe(include='all').loc['mean']
io2.append(df2016_9.describe(include='all').loc['mean']["price actual"])
df2016_8.describe(include='all').loc['mean']
io2.append(df2016_8.describe(include='all').loc['mean']["price actual"])
df2016_7.describe(include='all').loc['mean']
io2.append(df2016_7.describe(include='all').loc['mean']["price actual"])
df2016_6.describe(include='all').loc['mean']
io2.append(df2016_6.describe(include='all').loc['mean']["price actual"])
df2016_5.describe(include='all').loc['mean']
io2.append(df2016_5.describe(include='all').loc['mean']["price actual"])
df2016_4.describe(include='all').loc['mean']
io2.append(df2016_4.describe(include='all').loc['mean']["price actual"])
df2016_3.describe(include='all').loc['mean']
io2.append(df2016_3.describe(include='all').loc['mean']["price actual"])
df2016_2.describe(include='all').loc['mean']
io2.append(df2016_2.describe(include='all').loc['mean']["price actual"])
df2016_1.describe(include='all').loc['mean']
io2.append(df2016_1.describe(include='all').loc['mean']["price actual"])
df2015_12.describe(include='all').loc['mean']
io2.append(df2015_12.describe(include='all').loc['mean']["price actual"])
df2015_11.describe(include='all').loc['mean']
io2.append(df2015_11.describe(include='all').loc['mean']["price actual"])
df2015_10.describe(include='all').loc['mean']
io2.append(df2015_10.describe(include='all').loc['mean']["price actual"])
df2015_9.describe(include='all').loc['mean']
io2.append(df2015_9.describe(include='all').loc['mean']["price actual"])
df2015_8.describe(include='all').loc['mean']
io2.append(df2015_8.describe(include='all').loc['mean']["price actual"])
df2015_7.describe(include='all').loc['mean']
io2.append(df2015_7.describe(include='all').loc['mean']["price actual"])
df2015_6.describe(include='all').loc['mean']
io2.append(df2015_6.describe(include='all').loc['mean']["price actual"])
df2015_5.describe(include='all').loc['mean']
io2.append(df2015_5.describe(include='all').loc['mean']["price actual"])
df2015_4.describe(include='all').loc['mean']
io2.append(df2015_4.describe(include='all').loc['mean']["price actual"])
df2015_3.describe(include='all').loc['mean']
io2.append(df2015_3.describe(include='all').loc['mean']["price actual"])
df2015_2.describe(include='all').loc['mean']
io2.append(df2015_2.describe(include='all').loc['mean']["price actual"])
df2015_1.describe(include='all').loc['mean']
io2.append(df2015_1.describe(include='all').loc['mean']["price actual"])
 
 
io2.reverse() # Average monthly values 
print(io2)



solar =[]
df2018_12.describe(include='all').loc['mean']
solar.append(df2018_12.describe(include='all').loc['mean']['generation solar'])
df2018_11.describe(include='all').loc['mean']
solar.append(df2018_11.describe(include='all').loc['mean']['generation solar'])
df2018_10.describe(include='all').loc['mean']
solar.append(df2018_10.describe(include='all').loc['mean']['generation solar'])
df2018_9.describe(include='all').loc['mean']
solar.append(df2018_9.describe(include='all').loc['mean']['generation solar'])
df2018_8.describe(include='all').loc['mean']
solar.append(df2018_8.describe(include='all').loc['mean']['generation solar'])
df2018_7.describe(include='all').loc['mean']
solar.append(df2018_7.describe(include='all').loc['mean']['generation solar'])
df2018_6.describe(include='all').loc['mean']
solar.append(df2018_6.describe(include='all').loc['mean']['generation solar'])
df2018_5.describe(include='all').loc['mean']
solar.append(df2018_5.describe(include='all').loc['mean']['generation solar'])
df2018_4.describe(include='all').loc['mean']
solar.append(df2018_4.describe(include='all').loc['mean']['generation solar'])
df2018_3.describe(include='all').loc['mean']
solar.append(df2018_3.describe(include='all').loc['mean']['generation solar'])
df2018_2.describe(include='all').loc['mean']
solar.append(df2018_2.describe(include='all').loc['mean']['generation solar'])
df2018_1.describe(include='all').loc['mean']
solar.append(df2018_1.describe(include='all').loc['mean']['generation solar'])
df2017_12.describe(include='all').loc['mean']
solar.append(df2017_12.describe(include='all').loc['mean']['generation solar'])
df2017_11.describe(include='all').loc['mean']
solar.append(df2017_11.describe(include='all').loc['mean']['generation solar'])
df2017_10.describe(include='all').loc['mean']
solar.append(df2017_10.describe(include='all').loc['mean']['generation solar'])
df2017_9.describe(include='all').loc['mean']
solar.append(df2017_9.describe(include='all').loc['mean']['generation solar'])
df2017_8.describe(include='all').loc['mean']
solar.append(df2017_8.describe(include='all').loc['mean']['generation solar'])
df2017_7.describe(include='all').loc['mean']
solar.append(df2017_7.describe(include='all').loc['mean']['generation solar'])
df2017_6.describe(include='all').loc['mean']
solar.append(df2017_6.describe(include='all').loc['mean']['generation solar'])
df2017_5.describe(include='all').loc['mean']
solar.append(df2017_5.describe(include='all').loc['mean']['generation solar'])
df2017_4.describe(include='all').loc['mean']
solar.append(df2017_4.describe(include='all').loc['mean']['generation solar'])
df2017_3.describe(include='all').loc['mean']
solar.append(df2017_3.describe(include='all').loc['mean']['generation solar'])
df2017_2.describe(include='all').loc['mean']
solar.append(df2017_2.describe(include='all').loc['mean']['generation solar'])
df2017_1.describe(include='all').loc['mean']
solar.append(df2017_1.describe(include='all').loc['mean']['generation solar'])
df2016_12.describe(include='all').loc['mean']
solar.append(df2016_12.describe(include='all').loc['mean']['generation solar'])
df2016_11.describe(include='all').loc['mean']
solar.append(df2016_11.describe(include='all').loc['mean']['generation solar'])
df2016_10.describe(include='all').loc['mean']
solar.append(df2016_10.describe(include='all').loc['mean']['generation solar'])
df2016_9.describe(include='all').loc['mean']
solar.append(df2016_9.describe(include='all').loc['mean']['generation solar'])
df2016_8.describe(include='all').loc['mean']
solar.append(df2016_8.describe(include='all').loc['mean']['generation solar'])
df2016_7.describe(include='all').loc['mean']
solar.append(df2016_7.describe(include='all').loc['mean']['generation solar'])
df2016_6.describe(include='all').loc['mean']
solar.append(df2016_6.describe(include='all').loc['mean']['generation solar'])
df2016_5.describe(include='all').loc['mean']
solar.append(df2016_5.describe(include='all').loc['mean']['generation solar'])
df2016_4.describe(include='all').loc['mean']
solar.append(df2016_4.describe(include='all').loc['mean']['generation solar'])
df2016_3.describe(include='all').loc['mean']
solar.append(df2016_3.describe(include='all').loc['mean']['generation solar'])
df2016_2.describe(include='all').loc['mean']
solar.append(df2016_2.describe(include='all').loc['mean']['generation solar'])
df2016_1.describe(include='all').loc['mean']
solar.append(df2016_1.describe(include='all').loc['mean']['generation solar'])
df2015_12.describe(include='all').loc['mean']
solar.append(df2015_12.describe(include='all').loc['mean']['generation solar'])
df2015_11.describe(include='all').loc['mean']
solar.append(df2015_11.describe(include='all').loc['mean']['generation solar'])
df2015_10.describe(include='all').loc['mean']
solar.append(df2015_10.describe(include='all').loc['mean']['generation solar'])
df2015_9.describe(include='all').loc['mean']
solar.append(df2015_9.describe(include='all').loc['mean']['generation solar'])
df2015_8.describe(include='all').loc['mean']
solar.append(df2015_8.describe(include='all').loc['mean']['generation solar'])
df2015_7.describe(include='all').loc['mean']
solar.append(df2015_7.describe(include='all').loc['mean']['generation solar'])
df2015_6.describe(include='all').loc['mean']
solar.append(df2015_6.describe(include='all').loc['mean']['generation solar'])
df2015_5.describe(include='all').loc['mean']
solar.append(df2015_5.describe(include='all').loc['mean']['generation solar'])
df2015_4.describe(include='all').loc['mean']
solar.append(df2015_4.describe(include='all').loc['mean']['generation solar'])
df2015_3.describe(include='all').loc['mean']
solar.append(df2015_3.describe(include='all').loc['mean']['generation solar'])
df2015_2.describe(include='all').loc['mean']
solar.append(df2015_2.describe(include='all').loc['mean']['generation solar'])
df2015_1.describe(include='all').loc['mean']
solar.append(df2015_1.describe(include='all').loc['mean']['generation solar'])

solar.reverse() # Average monthly values 
print(solar)



biomass= []
df2018_12.describe(include='all').loc['mean']
biomass.append(df2018_12.describe(include='all').loc['mean']['generation biomass'])
df2018_11.describe(include='all').loc['mean']
biomass.append(df2018_11.describe(include='all').loc['mean']['generation biomass'])
df2018_10.describe(include='all').loc['mean']
biomass.append(df2018_10.describe(include='all').loc['mean']['generation biomass'])
df2018_9.describe(include='all').loc['mean']
biomass.append(df2018_9.describe(include='all').loc['mean']['generation biomass'])
df2018_8.describe(include='all').loc['mean']
biomass.append(df2018_8.describe(include='all').loc['mean']['generation biomass'])
df2018_7.describe(include='all').loc['mean']
biomass.append(df2018_7.describe(include='all').loc['mean']['generation biomass'])
df2018_6.describe(include='all').loc['mean']
biomass.append(df2018_6.describe(include='all').loc['mean']['generation biomass'])
df2018_5.describe(include='all').loc['mean']
biomass.append(df2018_5.describe(include='all').loc['mean']['generation biomass'])
df2018_4.describe(include='all').loc['mean']
biomass.append(df2018_4.describe(include='all').loc['mean']['generation biomass'])
df2018_3.describe(include='all').loc['mean']
biomass.append(df2018_3.describe(include='all').loc['mean']['generation biomass'])
df2018_2.describe(include='all').loc['mean']
biomass.append(df2018_2.describe(include='all').loc['mean']['generation biomass'])
df2018_1.describe(include='all').loc['mean']
biomass.append(df2018_1.describe(include='all').loc['mean']['generation biomass'])
df2017_12.describe(include='all').loc['mean']
biomass.append(df2017_12.describe(include='all').loc['mean']['generation biomass'])
df2017_11.describe(include='all').loc['mean']
biomass.append(df2017_11.describe(include='all').loc['mean']['generation biomass'])
df2017_10.describe(include='all').loc['mean']
biomass.append(df2017_10.describe(include='all').loc['mean']['generation biomass'])
df2017_9.describe(include='all').loc['mean']
biomass.append(df2017_9.describe(include='all').loc['mean']['generation biomass'])
df2017_8.describe(include='all').loc['mean']
biomass.append(df2017_8.describe(include='all').loc['mean']['generation biomass'])
df2017_7.describe(include='all').loc['mean']
biomass.append(df2017_7.describe(include='all').loc['mean']['generation biomass'])
df2017_6.describe(include='all').loc['mean']
biomass.append(df2017_6.describe(include='all').loc['mean']['generation biomass'])
df2017_5.describe(include='all').loc['mean']
biomass.append(df2017_5.describe(include='all').loc['mean']['generation biomass'])
df2017_4.describe(include='all').loc['mean']
biomass.append(df2017_4.describe(include='all').loc['mean']['generation biomass'])
df2017_3.describe(include='all').loc['mean']
biomass.append(df2017_3.describe(include='all').loc['mean']['generation biomass'])
df2017_2.describe(include='all').loc['mean']
biomass.append(df2017_2.describe(include='all').loc['mean']['generation biomass'])
df2017_1.describe(include='all').loc['mean']
biomass.append(df2017_1.describe(include='all').loc['mean']['generation biomass'])
df2016_12.describe(include='all').loc['mean']
biomass.append(df2016_12.describe(include='all').loc['mean']['generation biomass'])
df2016_11.describe(include='all').loc['mean']
biomass.append(df2016_11.describe(include='all').loc['mean']['generation biomass'])
df2016_10.describe(include='all').loc['mean']
biomass.append(df2016_10.describe(include='all').loc['mean']['generation biomass'])
df2016_9.describe(include='all').loc['mean']
biomass.append(df2016_9.describe(include='all').loc['mean']['generation biomass'])
df2016_8.describe(include='all').loc['mean']
biomass.append(df2016_8.describe(include='all').loc['mean']['generation biomass'])
df2016_7.describe(include='all').loc['mean']
biomass.append(df2016_7.describe(include='all').loc['mean']['generation biomass'])
df2016_6.describe(include='all').loc['mean']
biomass.append(df2016_6.describe(include='all').loc['mean']['generation biomass'])
df2016_5.describe(include='all').loc['mean']
biomass.append(df2016_5.describe(include='all').loc['mean']['generation biomass'])
df2016_4.describe(include='all').loc['mean']
biomass.append(df2016_4.describe(include='all').loc['mean']['generation biomass'])
df2016_3.describe(include='all').loc['mean']
biomass.append(df2016_3.describe(include='all').loc['mean']['generation biomass'])
df2016_2.describe(include='all').loc['mean']
biomass.append(df2016_2.describe(include='all').loc['mean']['generation biomass'])
df2016_1.describe(include='all').loc['mean']
biomass.append(df2016_1.describe(include='all').loc['mean']['generation biomass'])
df2015_12.describe(include='all').loc['mean']
biomass.append(df2015_12.describe(include='all').loc['mean']['generation biomass'])
df2015_11.describe(include='all').loc['mean']
biomass.append(df2015_11.describe(include='all').loc['mean']['generation biomass'])
df2015_10.describe(include='all').loc['mean']
biomass.append(df2015_10.describe(include='all').loc['mean']['generation biomass'])
df2015_9.describe(include='all').loc['mean']
biomass.append(df2015_9.describe(include='all').loc['mean']['generation biomass'])
df2015_8.describe(include='all').loc['mean']
biomass.append(df2015_8.describe(include='all').loc['mean']['generation biomass'])
df2015_7.describe(include='all').loc['mean']
biomass.append(df2015_7.describe(include='all').loc['mean']['generation biomass'])
df2015_6.describe(include='all').loc['mean']
biomass.append(df2015_6.describe(include='all').loc['mean']['generation biomass'])
df2015_5.describe(include='all').loc['mean']
biomass.append(df2015_5.describe(include='all').loc['mean']['generation biomass'])
df2015_4.describe(include='all').loc['mean']
biomass.append(df2015_4.describe(include='all').loc['mean']['generation biomass'])
df2015_3.describe(include='all').loc['mean']
biomass.append(df2015_3.describe(include='all').loc['mean']['generation biomass'])
df2015_2.describe(include='all').loc['mean']
biomass.append(df2015_2.describe(include='all').loc['mean']['generation biomass'])
df2015_1.describe(include='all').loc['mean']
biomass.append(df2015_1.describe(include='all').loc['mean']['generation biomass'])
 
biomass.reverse() # Average monthly values 

print(biomass)

len(biomass)

fossil_gas =[]

df2018_12.describe(include='all').loc['mean']
fossil_gas.append(df2018_12.describe(include='all').loc['mean']["generation fossil gas"])
df2018_11.describe(include='all').loc['mean']
fossil_gas.append(df2018_11.describe(include='all').loc['mean']["generation fossil gas"])
df2018_10.describe(include='all').loc['mean']
fossil_gas.append(df2018_10.describe(include='all').loc['mean']["generation fossil gas"])
df2018_9.describe(include='all').loc['mean']
fossil_gas.append(df2018_9.describe(include='all').loc['mean']["generation fossil gas"])
df2018_8.describe(include='all').loc['mean']
fossil_gas.append(df2018_8.describe(include='all').loc['mean']["generation fossil gas"])
df2018_7.describe(include='all').loc['mean']
fossil_gas.append(df2018_7.describe(include='all').loc['mean']["generation fossil gas"])
df2018_6.describe(include='all').loc['mean']
fossil_gas.append(df2018_6.describe(include='all').loc['mean']["generation fossil gas"])
df2018_5.describe(include='all').loc['mean']
fossil_gas.append(df2018_5.describe(include='all').loc['mean']["generation fossil gas"])
df2018_4.describe(include='all').loc['mean']
fossil_gas.append(df2018_4.describe(include='all').loc['mean']["generation fossil gas"])
df2018_3.describe(include='all').loc['mean']
fossil_gas.append(df2018_3.describe(include='all').loc['mean']["generation fossil gas"])
df2018_2.describe(include='all').loc['mean']
fossil_gas.append(df2018_2.describe(include='all').loc['mean']["generation fossil gas"])
df2018_1.describe(include='all').loc['mean']
fossil_gas.append(df2018_1.describe(include='all').loc['mean']["generation fossil gas"])
df2017_12.describe(include='all').loc['mean']
fossil_gas.append(df2017_12.describe(include='all').loc['mean']["generation fossil gas"])
df2017_11.describe(include='all').loc['mean']
fossil_gas.append(df2017_11.describe(include='all').loc['mean']["generation fossil gas"])
df2017_10.describe(include='all').loc['mean']
fossil_gas.append(df2017_10.describe(include='all').loc['mean']["generation fossil gas"])
df2017_9.describe(include='all').loc['mean']
fossil_gas.append(df2017_9.describe(include='all').loc['mean']["generation fossil gas"])
df2017_8.describe(include='all').loc['mean']
fossil_gas.append(df2017_8.describe(include='all').loc['mean']["generation fossil gas"])
df2017_7.describe(include='all').loc['mean']
fossil_gas.append(df2017_7.describe(include='all').loc['mean']["generation fossil gas"])
df2017_6.describe(include='all').loc['mean']
fossil_gas.append(df2017_6.describe(include='all').loc['mean']["generation fossil gas"])
df2017_5.describe(include='all').loc['mean']
fossil_gas.append(df2017_5.describe(include='all').loc['mean']["generation fossil gas"])
df2017_4.describe(include='all').loc['mean']
fossil_gas.append(df2017_4.describe(include='all').loc['mean']["generation fossil gas"])
df2017_3.describe(include='all').loc['mean']
fossil_gas.append(df2017_3.describe(include='all').loc['mean']["generation fossil gas"])
df2017_2.describe(include='all').loc['mean']
fossil_gas.append(df2017_2.describe(include='all').loc['mean']["generation fossil gas"])
df2017_1.describe(include='all').loc['mean']
fossil_gas.append(df2017_1.describe(include='all').loc['mean']["generation fossil gas"])
df2016_12.describe(include='all').loc['mean']
fossil_gas.append(df2016_12.describe(include='all').loc['mean']["generation fossil gas"])
df2016_11.describe(include='all').loc['mean']
fossil_gas.append(df2016_11.describe(include='all').loc['mean']["generation fossil gas"])
df2016_10.describe(include='all').loc['mean']
fossil_gas.append(df2016_10.describe(include='all').loc['mean']["generation fossil gas"])
df2016_9.describe(include='all').loc['mean']
fossil_gas.append(df2016_9.describe(include='all').loc['mean']["generation fossil gas"])
df2016_8.describe(include='all').loc['mean']
fossil_gas.append(df2016_8.describe(include='all').loc['mean']["generation fossil gas"])
df2016_7.describe(include='all').loc['mean']
fossil_gas.append(df2016_7.describe(include='all').loc['mean']["generation fossil gas"])
df2016_6.describe(include='all').loc['mean']
fossil_gas.append(df2016_6.describe(include='all').loc['mean']["generation fossil gas"])
df2016_5.describe(include='all').loc['mean']
fossil_gas.append(df2016_5.describe(include='all').loc['mean']["generation fossil gas"])
df2016_4.describe(include='all').loc['mean']
fossil_gas.append(df2016_4.describe(include='all').loc['mean']["generation fossil gas"])
df2016_3.describe(include='all').loc['mean']
fossil_gas.append(df2016_3.describe(include='all').loc['mean']["generation fossil gas"])
df2016_2.describe(include='all').loc['mean']
fossil_gas.append(df2016_2.describe(include='all').loc['mean']["generation fossil gas"])
df2016_1.describe(include='all').loc['mean']
fossil_gas.append(df2016_1.describe(include='all').loc['mean']["generation fossil gas"])
df2015_12.describe(include='all').loc['mean']
fossil_gas.append(df2015_12.describe(include='all').loc['mean']["generation fossil gas"])
df2015_11.describe(include='all').loc['mean']
fossil_gas.append(df2015_11.describe(include='all').loc['mean']["generation fossil gas"])
df2015_10.describe(include='all').loc['mean']
fossil_gas.append(df2015_10.describe(include='all').loc['mean']["generation fossil gas"])
df2015_9.describe(include='all').loc['mean']
fossil_gas.append(df2015_9.describe(include='all').loc['mean']["generation fossil gas"])
df2015_8.describe(include='all').loc['mean']
fossil_gas.append(df2015_8.describe(include='all').loc['mean']["generation fossil gas"])
df2015_7.describe(include='all').loc['mean']
fossil_gas.append(df2015_7.describe(include='all').loc['mean']["generation fossil gas"])
df2015_6.describe(include='all').loc['mean']
fossil_gas.append(df2015_6.describe(include='all').loc['mean']["generation fossil gas"])
df2015_5.describe(include='all').loc['mean']
fossil_gas.append(df2015_5.describe(include='all').loc['mean']["generation fossil gas"])
df2015_4.describe(include='all').loc['mean']
fossil_gas.append(df2015_4.describe(include='all').loc['mean']["generation fossil gas"])
df2015_3.describe(include='all').loc['mean']
fossil_gas.append(df2015_3.describe(include='all').loc['mean']["generation fossil gas"])
df2015_2.describe(include='all').loc['mean']
fossil_gas.append(df2015_2.describe(include='all').loc['mean']["generation fossil gas"])
df2015_1.describe(include='all').loc['mean']
fossil_gas.append(df2015_1.describe(include='all').loc['mean']["generation fossil gas"])


fossil_gas.reverse() # Average monthly values 

print(fossil_gas)

len(fossil_gas)

other_renewable= []
df2018_12.describe(include='all').loc['mean']
other_renewable.append(df2018_12.describe(include='all').loc['mean']['generation other renewable'])
df2018_11.describe(include='all').loc['mean']
other_renewable.append(df2018_11.describe(include='all').loc['mean']['generation other renewable'])
df2018_10.describe(include='all').loc['mean']
other_renewable.append(df2018_10.describe(include='all').loc['mean']['generation other renewable'])
df2018_9.describe(include='all').loc['mean']
other_renewable.append(df2018_9.describe(include='all').loc['mean']['generation other renewable'])
df2018_8.describe(include='all').loc['mean']
other_renewable.append(df2018_8.describe(include='all').loc['mean']['generation other renewable'])
df2018_7.describe(include='all').loc['mean']
other_renewable.append(df2018_7.describe(include='all').loc['mean']['generation other renewable'])
df2018_6.describe(include='all').loc['mean']
other_renewable.append(df2018_6.describe(include='all').loc['mean']['generation other renewable'])
df2018_5.describe(include='all').loc['mean']
other_renewable.append(df2018_5.describe(include='all').loc['mean']['generation other renewable'])
df2018_4.describe(include='all').loc['mean']
other_renewable.append(df2018_4.describe(include='all').loc['mean']['generation other renewable'])
df2018_3.describe(include='all').loc['mean']
other_renewable.append(df2018_3.describe(include='all').loc['mean']['generation other renewable'])
df2018_2.describe(include='all').loc['mean']
other_renewable.append(df2018_2.describe(include='all').loc['mean']['generation other renewable'])
df2018_1.describe(include='all').loc['mean']
other_renewable.append(df2018_1.describe(include='all').loc['mean']['generation other renewable'])
df2017_12.describe(include='all').loc['mean']
other_renewable.append(df2017_12.describe(include='all').loc['mean']['generation other renewable'])
df2017_11.describe(include='all').loc['mean']
other_renewable.append(df2017_11.describe(include='all').loc['mean']['generation other renewable'])
df2017_10.describe(include='all').loc['mean']
other_renewable.append(df2017_10.describe(include='all').loc['mean']['generation other renewable'])
df2017_9.describe(include='all').loc['mean']
other_renewable.append(df2017_9.describe(include='all').loc['mean']['generation other renewable'])
df2017_8.describe(include='all').loc['mean']
other_renewable.append(df2017_8.describe(include='all').loc['mean']['generation other renewable'])
df2017_7.describe(include='all').loc['mean']
other_renewable.append(df2017_7.describe(include='all').loc['mean']['generation other renewable'])
df2017_6.describe(include='all').loc['mean']
other_renewable.append(df2017_6.describe(include='all').loc['mean']['generation other renewable'])
df2017_5.describe(include='all').loc['mean']
other_renewable.append(df2017_5.describe(include='all').loc['mean']['generation other renewable'])
df2017_4.describe(include='all').loc['mean']
other_renewable.append(df2017_4.describe(include='all').loc['mean']['generation other renewable'])
df2017_3.describe(include='all').loc['mean']
other_renewable.append(df2017_3.describe(include='all').loc['mean']['generation other renewable'])
df2017_2.describe(include='all').loc['mean']
other_renewable.append(df2017_2.describe(include='all').loc['mean']['generation other renewable'])
df2017_1.describe(include='all').loc['mean']
other_renewable.append(df2017_1.describe(include='all').loc['mean']['generation other renewable'])
df2016_12.describe(include='all').loc['mean']
other_renewable.append(df2016_12.describe(include='all').loc['mean']['generation other renewable'])
df2016_11.describe(include='all').loc['mean']
other_renewable.append(df2016_11.describe(include='all').loc['mean']['generation other renewable'])
df2016_10.describe(include='all').loc['mean']
other_renewable.append(df2016_10.describe(include='all').loc['mean']['generation other renewable'])
df2016_9.describe(include='all').loc['mean']
other_renewable.append(df2016_9.describe(include='all').loc['mean']['generation other renewable'])
df2016_8.describe(include='all').loc['mean']
other_renewable.append(df2016_8.describe(include='all').loc['mean']['generation other renewable'])
df2016_7.describe(include='all').loc['mean']
other_renewable.append(df2016_7.describe(include='all').loc['mean']['generation other renewable'])
df2016_6.describe(include='all').loc['mean']
other_renewable.append(df2016_6.describe(include='all').loc['mean']['generation other renewable'])
df2016_5.describe(include='all').loc['mean']
other_renewable.append(df2016_5.describe(include='all').loc['mean']['generation other renewable'])
df2016_4.describe(include='all').loc['mean']
other_renewable.append(df2016_4.describe(include='all').loc['mean']['generation other renewable'])
df2016_3.describe(include='all').loc['mean']
other_renewable.append(df2016_3.describe(include='all').loc['mean']['generation other renewable'])
df2016_2.describe(include='all').loc['mean']
other_renewable.append(df2016_2.describe(include='all').loc['mean']['generation other renewable'])
df2016_1.describe(include='all').loc['mean']
other_renewable.append(df2016_1.describe(include='all').loc['mean']['generation other renewable'])
df2015_12.describe(include='all').loc['mean']
other_renewable.append(df2015_12.describe(include='all').loc['mean']['generation other renewable'])
df2015_11.describe(include='all').loc['mean']
other_renewable.append(df2015_11.describe(include='all').loc['mean']['generation other renewable'])
df2015_10.describe(include='all').loc['mean']
other_renewable.append(df2015_10.describe(include='all').loc['mean']['generation other renewable'])
df2015_9.describe(include='all').loc['mean']
other_renewable.append(df2015_9.describe(include='all').loc['mean']['generation other renewable'])
df2015_8.describe(include='all').loc['mean']
other_renewable.append(df2015_8.describe(include='all').loc['mean']['generation other renewable'])
df2015_7.describe(include='all').loc['mean']
other_renewable.append(df2015_7.describe(include='all').loc['mean']['generation other renewable'])
df2015_6.describe(include='all').loc['mean']
other_renewable.append(df2015_6.describe(include='all').loc['mean']['generation other renewable'])
df2015_5.describe(include='all').loc['mean']
other_renewable.append(df2015_5.describe(include='all').loc['mean']['generation other renewable'])
df2015_4.describe(include='all').loc['mean']
other_renewable.append(df2015_4.describe(include='all').loc['mean']['generation other renewable'])
df2015_3.describe(include='all').loc['mean']
other_renewable.append(df2015_3.describe(include='all').loc['mean']['generation other renewable'])
df2015_2.describe(include='all').loc['mean']
other_renewable.append(df2015_2.describe(include='all').loc['mean']['generation other renewable'])
df2015_1.describe(include='all').loc['mean']
other_renewable.append(df2015_1.describe(include='all').loc['mean']['generation other renewable'])
 
other_renewable.reverse() # Average monthly values 
print(other_renewable)



nuclear = []
df2018_12.describe(include='all').loc['mean']
nuclear.append(df2018_12.describe(include='all').loc['mean']['generation nuclear'])
df2018_11.describe(include='all').loc['mean']
nuclear.append(df2018_11.describe(include='all').loc['mean']['generation nuclear'])
df2018_10.describe(include='all').loc['mean']
nuclear.append(df2018_10.describe(include='all').loc['mean']['generation nuclear'])
df2018_9.describe(include='all').loc['mean']
nuclear.append(df2018_9.describe(include='all').loc['mean']['generation nuclear'])
df2018_8.describe(include='all').loc['mean']
nuclear.append(df2018_8.describe(include='all').loc['mean']['generation nuclear'])
df2018_7.describe(include='all').loc['mean']
nuclear.append(df2018_7.describe(include='all').loc['mean']['generation nuclear'])
df2018_6.describe(include='all').loc['mean']
nuclear.append(df2018_6.describe(include='all').loc['mean']['generation nuclear'])
df2018_5.describe(include='all').loc['mean']
nuclear.append(df2018_5.describe(include='all').loc['mean']['generation nuclear'])
df2018_4.describe(include='all').loc['mean']
nuclear.append(df2018_4.describe(include='all').loc['mean']['generation nuclear'])
df2018_3.describe(include='all').loc['mean']
nuclear.append(df2018_3.describe(include='all').loc['mean']['generation nuclear'])
df2018_2.describe(include='all').loc['mean']
nuclear.append(df2018_2.describe(include='all').loc['mean']['generation nuclear'])
df2018_1.describe(include='all').loc['mean']
nuclear.append(df2018_1.describe(include='all').loc['mean']['generation nuclear'])
df2017_12.describe(include='all').loc['mean']
nuclear.append(df2017_12.describe(include='all').loc['mean']['generation nuclear'])
df2017_11.describe(include='all').loc['mean']
nuclear.append(df2017_11.describe(include='all').loc['mean']['generation nuclear'])
df2017_10.describe(include='all').loc['mean']
nuclear.append(df2017_10.describe(include='all').loc['mean']['generation nuclear'])
df2017_9.describe(include='all').loc['mean']
nuclear.append(df2017_9.describe(include='all').loc['mean']['generation nuclear'])
df2017_8.describe(include='all').loc['mean']
nuclear.append(df2017_8.describe(include='all').loc['mean']['generation nuclear'])
df2017_7.describe(include='all').loc['mean']
nuclear.append(df2017_7.describe(include='all').loc['mean']['generation nuclear'])
df2017_6.describe(include='all').loc['mean']
nuclear.append(df2017_6.describe(include='all').loc['mean']['generation nuclear'])
df2017_5.describe(include='all').loc['mean']
nuclear.append(df2017_5.describe(include='all').loc['mean']['generation nuclear'])
df2017_4.describe(include='all').loc['mean']
nuclear.append(df2017_4.describe(include='all').loc['mean']['generation nuclear'])
df2017_3.describe(include='all').loc['mean']
nuclear.append(df2017_3.describe(include='all').loc['mean']['generation nuclear'])
df2017_2.describe(include='all').loc['mean']
nuclear.append(df2017_2.describe(include='all').loc['mean']['generation nuclear'])
df2017_1.describe(include='all').loc['mean']
nuclear.append(df2017_1.describe(include='all').loc['mean']['generation nuclear'])
df2016_12.describe(include='all').loc['mean']
nuclear.append(df2016_12.describe(include='all').loc['mean']['generation nuclear'])
df2016_11.describe(include='all').loc['mean']
nuclear.append(df2016_11.describe(include='all').loc['mean']['generation nuclear'])
df2016_10.describe(include='all').loc['mean']
nuclear.append(df2016_10.describe(include='all').loc['mean']['generation nuclear'])
df2016_9.describe(include='all').loc['mean']
nuclear.append(df2016_9.describe(include='all').loc['mean']['generation nuclear'])
df2016_8.describe(include='all').loc['mean']
nuclear.append(df2016_8.describe(include='all').loc['mean']['generation nuclear'])
df2016_7.describe(include='all').loc['mean']
nuclear.append(df2016_7.describe(include='all').loc['mean']['generation nuclear'])
df2016_6.describe(include='all').loc['mean']
nuclear.append(df2016_6.describe(include='all').loc['mean']['generation nuclear'])
df2016_5.describe(include='all').loc['mean']
nuclear.append(df2016_5.describe(include='all').loc['mean']['generation nuclear'])
df2016_4.describe(include='all').loc['mean']
nuclear.append(df2016_4.describe(include='all').loc['mean']['generation nuclear'])
df2016_3.describe(include='all').loc['mean']
nuclear.append(df2016_3.describe(include='all').loc['mean']['generation nuclear'])
df2016_2.describe(include='all').loc['mean']
nuclear.append(df2016_2.describe(include='all').loc['mean']['generation nuclear'])
df2016_1.describe(include='all').loc['mean']
nuclear.append(df2016_1.describe(include='all').loc['mean']['generation nuclear'])
df2015_12.describe(include='all').loc['mean']
nuclear.append(df2015_12.describe(include='all').loc['mean']['generation nuclear'])
df2015_11.describe(include='all').loc['mean']
nuclear.append(df2015_11.describe(include='all').loc['mean']['generation nuclear'])
df2015_10.describe(include='all').loc['mean']
nuclear.append(df2015_10.describe(include='all').loc['mean']['generation nuclear'])
df2015_9.describe(include='all').loc['mean']
nuclear.append(df2015_9.describe(include='all').loc['mean']['generation nuclear'])
df2015_8.describe(include='all').loc['mean']
nuclear.append(df2015_8.describe(include='all').loc['mean']['generation nuclear'])
df2015_7.describe(include='all').loc['mean']
nuclear.append(df2015_7.describe(include='all').loc['mean']['generation nuclear'])
df2015_6.describe(include='all').loc['mean']
nuclear.append(df2015_6.describe(include='all').loc['mean']['generation nuclear'])
df2015_5.describe(include='all').loc['mean']
nuclear.append(df2015_5.describe(include='all').loc['mean']['generation nuclear'])
df2015_4.describe(include='all').loc['mean']
nuclear.append(df2015_4.describe(include='all').loc['mean']['generation nuclear'])
df2015_3.describe(include='all').loc['mean']
nuclear.append(df2015_3.describe(include='all').loc['mean']['generation nuclear'])
df2015_2.describe(include='all').loc['mean']
nuclear.append(df2015_2.describe(include='all').loc['mean']['generation nuclear'])
df2015_1.describe(include='all').loc['mean']
nuclear.append(df2015_1.describe(include='all').loc['mean']['generation nuclear'])

nuclear.reverse() # Average monthly values 
print(nuclear)



wind = []
df2018_12.describe(include='all').loc['mean']
wind.append(df2018_12.describe(include='all').loc['mean']['generation wind onshore'])
df2018_11.describe(include='all').loc['mean']
wind.append(df2018_11.describe(include='all').loc['mean']['generation wind onshore'])
df2018_10.describe(include='all').loc['mean']
wind.append(df2018_10.describe(include='all').loc['mean']['generation wind onshore'])
df2018_9.describe(include='all').loc['mean']
wind.append(df2018_9.describe(include='all').loc['mean']['generation wind onshore'])
df2018_8.describe(include='all').loc['mean']
wind.append(df2018_8.describe(include='all').loc['mean']['generation wind onshore'])
df2018_7.describe(include='all').loc['mean']
wind.append(df2018_7.describe(include='all').loc['mean']['generation wind onshore'])
df2018_6.describe(include='all').loc['mean']
wind.append(df2018_6.describe(include='all').loc['mean']['generation wind onshore'])
df2018_5.describe(include='all').loc['mean']
wind.append(df2018_5.describe(include='all').loc['mean']['generation wind onshore'])
df2018_4.describe(include='all').loc['mean']
wind.append(df2018_4.describe(include='all').loc['mean']['generation wind onshore'])
df2018_3.describe(include='all').loc['mean']
wind.append(df2018_3.describe(include='all').loc['mean']['generation wind onshore'])
df2018_2.describe(include='all').loc['mean']
wind.append(df2018_2.describe(include='all').loc['mean']['generation wind onshore'])
df2018_1.describe(include='all').loc['mean']
wind.append(df2018_1.describe(include='all').loc['mean']['generation wind onshore'])
df2017_12.describe(include='all').loc['mean']
wind.append(df2017_12.describe(include='all').loc['mean']['generation wind onshore'])
df2017_11.describe(include='all').loc['mean']
wind.append(df2017_11.describe(include='all').loc['mean']['generation wind onshore'])
df2017_10.describe(include='all').loc['mean']
wind.append(df2017_10.describe(include='all').loc['mean']['generation wind onshore'])
df2017_9.describe(include='all').loc['mean']
wind.append(df2017_9.describe(include='all').loc['mean']['generation wind onshore'])
df2017_8.describe(include='all').loc['mean']
wind.append(df2017_8.describe(include='all').loc['mean']['generation wind onshore'])
df2017_7.describe(include='all').loc['mean']
wind.append(df2017_7.describe(include='all').loc['mean']['generation wind onshore'])
df2017_6.describe(include='all').loc['mean']
wind.append(df2017_6.describe(include='all').loc['mean']['generation wind onshore'])
df2017_5.describe(include='all').loc['mean']
wind.append(df2017_5.describe(include='all').loc['mean']['generation wind onshore'])
df2017_4.describe(include='all').loc['mean']
wind.append(df2017_4.describe(include='all').loc['mean']['generation wind onshore'])
df2017_3.describe(include='all').loc['mean']
wind.append(df2017_3.describe(include='all').loc['mean']['generation wind onshore'])
df2017_2.describe(include='all').loc['mean']
wind.append(df2017_2.describe(include='all').loc['mean']['generation wind onshore'])
df2017_1.describe(include='all').loc['mean']
wind.append(df2017_1.describe(include='all').loc['mean']['generation wind onshore'])
df2016_12.describe(include='all').loc['mean']
wind.append(df2016_12.describe(include='all').loc['mean']['generation wind onshore'])
df2016_11.describe(include='all').loc['mean']
wind.append(df2016_11.describe(include='all').loc['mean']['generation wind onshore'])
df2016_10.describe(include='all').loc['mean']
wind.append(df2016_10.describe(include='all').loc['mean']['generation wind onshore'])
df2016_9.describe(include='all').loc['mean']
wind.append(df2016_9.describe(include='all').loc['mean']['generation wind onshore'])
df2016_8.describe(include='all').loc['mean']
wind.append(df2016_8.describe(include='all').loc['mean']['generation wind onshore'])
df2016_7.describe(include='all').loc['mean']
wind.append(df2016_7.describe(include='all').loc['mean']['generation wind onshore'])
df2016_6.describe(include='all').loc['mean']
wind.append(df2016_6.describe(include='all').loc['mean']['generation wind onshore'])
df2016_5.describe(include='all').loc['mean']
wind.append(df2016_5.describe(include='all').loc['mean']['generation wind onshore'])
df2016_4.describe(include='all').loc['mean']
wind.append(df2016_4.describe(include='all').loc['mean']['generation wind onshore'])
df2016_3.describe(include='all').loc['mean']
wind.append(df2016_3.describe(include='all').loc['mean']['generation wind onshore'])
df2016_2.describe(include='all').loc['mean']
wind.append(df2016_2.describe(include='all').loc['mean']['generation wind onshore'])
df2016_1.describe(include='all').loc['mean']
wind.append(df2016_1.describe(include='all').loc['mean']['generation wind onshore'])
df2015_12.describe(include='all').loc['mean']
wind.append(df2015_12.describe(include='all').loc['mean']['generation wind onshore'])
df2015_11.describe(include='all').loc['mean']
wind.append(df2015_11.describe(include='all').loc['mean']['generation wind onshore'])
df2015_10.describe(include='all').loc['mean']
wind.append(df2015_10.describe(include='all').loc['mean']['generation wind onshore'])
df2015_9.describe(include='all').loc['mean']
wind.append(df2015_9.describe(include='all').loc['mean']['generation wind onshore'])
df2015_8.describe(include='all').loc['mean']
wind.append(df2015_8.describe(include='all').loc['mean']['generation wind onshore'])
df2015_7.describe(include='all').loc['mean']
wind.append(df2015_7.describe(include='all').loc['mean']['generation wind onshore'])
df2015_6.describe(include='all').loc['mean']
wind.append(df2015_6.describe(include='all').loc['mean']['generation wind onshore'])
df2015_5.describe(include='all').loc['mean']
wind.append(df2015_5.describe(include='all').loc['mean']['generation wind onshore'])
df2015_4.describe(include='all').loc['mean']
wind.append(df2015_4.describe(include='all').loc['mean']['generation wind onshore'])
df2015_3.describe(include='all').loc['mean']
wind.append(df2015_3.describe(include='all').loc['mean']['generation wind onshore'])
df2015_2.describe(include='all').loc['mean']
wind.append(df2015_2.describe(include='all').loc['mean']['generation wind onshore'])
df2015_1.describe(include='all').loc['mean']
wind.append(df2015_1.describe(include='all').loc['mean']['generation wind onshore'])
 
wind.reverse() # Average monthly values 
print(wind)



fossil_oil= []
df2018_12.describe(include='all').loc['mean']
fossil_oil.append(df2018_12.describe(include='all').loc['mean']['generation fossil oil'])
df2018_11.describe(include='all').loc['mean']
fossil_oil.append(df2018_11.describe(include='all').loc['mean']['generation fossil oil'])
df2018_10.describe(include='all').loc['mean']
fossil_oil.append(df2018_10.describe(include='all').loc['mean']['generation fossil oil'])
df2018_9.describe(include='all').loc['mean']
fossil_oil.append(df2018_9.describe(include='all').loc['mean']['generation fossil oil'])
df2018_8.describe(include='all').loc['mean']
fossil_oil.append(df2018_8.describe(include='all').loc['mean']['generation fossil oil'])
df2018_7.describe(include='all').loc['mean']
fossil_oil.append(df2018_7.describe(include='all').loc['mean']['generation fossil oil'])
df2018_6.describe(include='all').loc['mean']
fossil_oil.append(df2018_6.describe(include='all').loc['mean']['generation fossil oil'])
df2018_5.describe(include='all').loc['mean']
fossil_oil.append(df2018_5.describe(include='all').loc['mean']['generation fossil oil'])
df2018_4.describe(include='all').loc['mean']
fossil_oil.append(df2018_4.describe(include='all').loc['mean']['generation fossil oil'])
df2018_3.describe(include='all').loc['mean']
fossil_oil.append(df2018_3.describe(include='all').loc['mean']['generation fossil oil'])
df2018_2.describe(include='all').loc['mean']
fossil_oil.append(df2018_2.describe(include='all').loc['mean']['generation fossil oil'])
df2018_1.describe(include='all').loc['mean']
fossil_oil.append(df2018_1.describe(include='all').loc['mean']['generation fossil oil'])
df2017_12.describe(include='all').loc['mean']
fossil_oil.append(df2017_12.describe(include='all').loc['mean']['generation fossil oil'])
df2017_11.describe(include='all').loc['mean']
fossil_oil.append(df2017_11.describe(include='all').loc['mean']['generation fossil oil'])
df2017_10.describe(include='all').loc['mean']
fossil_oil.append(df2017_10.describe(include='all').loc['mean']['generation fossil oil'])
df2017_9.describe(include='all').loc['mean']
fossil_oil.append(df2017_9.describe(include='all').loc['mean']['generation fossil oil'])
df2017_8.describe(include='all').loc['mean']
fossil_oil.append(df2017_8.describe(include='all').loc['mean']['generation fossil oil'])
df2017_7.describe(include='all').loc['mean']
fossil_oil.append(df2017_7.describe(include='all').loc['mean']['generation fossil oil'])
df2017_6.describe(include='all').loc['mean']
fossil_oil.append(df2017_6.describe(include='all').loc['mean']['generation fossil oil'])
df2017_5.describe(include='all').loc['mean']
fossil_oil.append(df2017_5.describe(include='all').loc['mean']['generation fossil oil'])
df2017_4.describe(include='all').loc['mean']
fossil_oil.append(df2017_4.describe(include='all').loc['mean']['generation fossil oil'])
df2017_3.describe(include='all').loc['mean']
fossil_oil.append(df2017_3.describe(include='all').loc['mean']['generation fossil oil'])
df2017_2.describe(include='all').loc['mean']
fossil_oil.append(df2017_2.describe(include='all').loc['mean']['generation fossil oil'])
df2017_1.describe(include='all').loc['mean']
fossil_oil.append(df2017_1.describe(include='all').loc['mean']['generation fossil oil'])
df2016_12.describe(include='all').loc['mean']
fossil_oil.append(df2016_12.describe(include='all').loc['mean']['generation fossil oil'])
df2016_11.describe(include='all').loc['mean']
fossil_oil.append(df2016_11.describe(include='all').loc['mean']['generation fossil oil'])
df2016_10.describe(include='all').loc['mean']
fossil_oil.append(df2016_10.describe(include='all').loc['mean']['generation fossil oil'])
df2016_9.describe(include='all').loc['mean']
fossil_oil.append(df2016_9.describe(include='all').loc['mean']['generation fossil oil'])
df2016_8.describe(include='all').loc['mean']
fossil_oil.append(df2016_8.describe(include='all').loc['mean']['generation fossil oil'])
df2016_7.describe(include='all').loc['mean']
fossil_oil.append(df2016_7.describe(include='all').loc['mean']['generation fossil oil'])
df2016_6.describe(include='all').loc['mean']
fossil_oil.append(df2016_6.describe(include='all').loc['mean']['generation fossil oil'])
df2016_5.describe(include='all').loc['mean']
fossil_oil.append(df2016_5.describe(include='all').loc['mean']['generation fossil oil'])
df2016_4.describe(include='all').loc['mean']
fossil_oil.append(df2016_4.describe(include='all').loc['mean']['generation fossil oil'])
df2016_3.describe(include='all').loc['mean']
fossil_oil.append(df2016_3.describe(include='all').loc['mean']['generation fossil oil'])
df2016_2.describe(include='all').loc['mean']
fossil_oil.append(df2016_2.describe(include='all').loc['mean']['generation fossil oil'])
df2016_1.describe(include='all').loc['mean']
fossil_oil.append(df2016_1.describe(include='all').loc['mean']['generation fossil oil'])
df2015_12.describe(include='all').loc['mean']
fossil_oil.append(df2015_12.describe(include='all').loc['mean']['generation fossil oil'])
df2015_11.describe(include='all').loc['mean']
fossil_oil.append(df2015_11.describe(include='all').loc['mean']['generation fossil oil'])
df2015_10.describe(include='all').loc['mean']
fossil_oil.append(df2015_10.describe(include='all').loc['mean']['generation fossil oil'])
df2015_9.describe(include='all').loc['mean']
fossil_oil.append(df2015_9.describe(include='all').loc['mean']['generation fossil oil'])
df2015_8.describe(include='all').loc['mean']
fossil_oil.append(df2015_8.describe(include='all').loc['mean']['generation fossil oil'])
df2015_7.describe(include='all').loc['mean']
fossil_oil.append(df2015_7.describe(include='all').loc['mean']['generation fossil oil'])
df2015_6.describe(include='all').loc['mean']
fossil_oil.append(df2015_6.describe(include='all').loc['mean']['generation fossil oil'])
df2015_5.describe(include='all').loc['mean']
fossil_oil.append(df2015_5.describe(include='all').loc['mean']['generation fossil oil'])
df2015_4.describe(include='all').loc['mean']
fossil_oil.append(df2015_4.describe(include='all').loc['mean']['generation fossil oil'])
df2015_3.describe(include='all').loc['mean']
fossil_oil.append(df2015_3.describe(include='all').loc['mean']['generation fossil oil'])
df2015_2.describe(include='all').loc['mean']
fossil_oil.append(df2015_2.describe(include='all').loc['mean']['generation fossil oil'])
df2015_1.describe(include='all').loc['mean']
fossil_oil.append(df2015_1.describe(include='all').loc['mean']['generation fossil oil'])
 
fossil_oil.reverse() # Average monthly values 
print(fossil_oil)

Fossil_hard = []
df2018_12.describe(include='all').loc['mean']
Fossil_hard.append(df2018_12.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_11.describe(include='all').loc['mean']
Fossil_hard.append(df2018_11.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_10.describe(include='all').loc['mean']
Fossil_hard.append(df2018_10.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_9.describe(include='all').loc['mean']
Fossil_hard.append(df2018_9.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_8.describe(include='all').loc['mean']
Fossil_hard.append(df2018_8.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_7.describe(include='all').loc['mean']
Fossil_hard.append(df2018_7.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_6.describe(include='all').loc['mean']
Fossil_hard.append(df2018_6.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_5.describe(include='all').loc['mean']
Fossil_hard.append(df2018_5.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_4.describe(include='all').loc['mean']
Fossil_hard.append(df2018_4.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_3.describe(include='all').loc['mean']
Fossil_hard.append(df2018_3.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_2.describe(include='all').loc['mean']
Fossil_hard.append(df2018_2.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_1.describe(include='all').loc['mean']
Fossil_hard.append(df2018_1.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_12.describe(include='all').loc['mean']
Fossil_hard.append(df2017_12.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_11.describe(include='all').loc['mean']
Fossil_hard.append(df2017_11.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_10.describe(include='all').loc['mean']
Fossil_hard.append(df2017_10.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_9.describe(include='all').loc['mean']
Fossil_hard.append(df2017_9.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_8.describe(include='all').loc['mean']
Fossil_hard.append(df2017_8.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_7.describe(include='all').loc['mean']
Fossil_hard.append(df2017_7.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_6.describe(include='all').loc['mean']
Fossil_hard.append(df2017_6.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_5.describe(include='all').loc['mean']
Fossil_hard.append(df2017_5.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_4.describe(include='all').loc['mean']
Fossil_hard.append(df2017_4.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_3.describe(include='all').loc['mean']
Fossil_hard.append(df2017_3.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_2.describe(include='all').loc['mean']
Fossil_hard.append(df2017_2.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_1.describe(include='all').loc['mean']
Fossil_hard.append(df2017_1.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_12.describe(include='all').loc['mean']
Fossil_hard.append(df2016_12.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_11.describe(include='all').loc['mean']
Fossil_hard.append(df2016_11.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_10.describe(include='all').loc['mean']
Fossil_hard.append(df2016_10.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_9.describe(include='all').loc['mean']
Fossil_hard.append(df2016_9.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_8.describe(include='all').loc['mean']
Fossil_hard.append(df2016_8.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_7.describe(include='all').loc['mean']
Fossil_hard.append(df2016_7.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_6.describe(include='all').loc['mean']
Fossil_hard.append(df2016_6.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_5.describe(include='all').loc['mean']
Fossil_hard.append(df2016_5.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_4.describe(include='all').loc['mean']
Fossil_hard.append(df2016_4.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_3.describe(include='all').loc['mean']
Fossil_hard.append(df2016_3.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_2.describe(include='all').loc['mean']
Fossil_hard.append(df2016_2.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_1.describe(include='all').loc['mean']
Fossil_hard.append(df2016_1.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_12.describe(include='all').loc['mean']
Fossil_hard.append(df2015_12.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_11.describe(include='all').loc['mean']
Fossil_hard.append(df2015_11.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_10.describe(include='all').loc['mean']
Fossil_hard.append(df2015_10.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_9.describe(include='all').loc['mean']
Fossil_hard.append(df2015_9.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_8.describe(include='all').loc['mean']
Fossil_hard.append(df2015_8.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_7.describe(include='all').loc['mean']
Fossil_hard.append(df2015_7.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_6.describe(include='all').loc['mean']
Fossil_hard.append(df2015_6.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_5.describe(include='all').loc['mean']
Fossil_hard.append(df2015_5.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_4.describe(include='all').loc['mean']
Fossil_hard.append(df2015_4.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_3.describe(include='all').loc['mean']
Fossil_hard.append(df2015_3.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_2.describe(include='all').loc['mean']
Fossil_hard.append(df2015_2.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_1.describe(include='all').loc['mean']
Fossil_hard.append(df2015_1.describe(include='all').loc['mean']['generation fossil hard coal'])
 
Fossil_hard.reverse() # Average monthly values 
print(Fossil_hard)



fossil_brown = []
df2018_12.describe(include='all').loc['mean']
fossil_brown.append(df2018_12.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_11.describe(include='all').loc['mean']
fossil_brown.append(df2018_11.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_10.describe(include='all').loc['mean']
fossil_brown.append(df2018_10.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_9.describe(include='all').loc['mean']
fossil_brown.append(df2018_9.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_8.describe(include='all').loc['mean']
fossil_brown.append(df2018_8.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_7.describe(include='all').loc['mean']
fossil_brown.append(df2018_7.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_6.describe(include='all').loc['mean']
fossil_brown.append(df2018_6.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_5.describe(include='all').loc['mean']
fossil_brown.append(df2018_5.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_4.describe(include='all').loc['mean']
fossil_brown.append(df2018_4.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_3.describe(include='all').loc['mean']
fossil_brown.append(df2018_3.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_2.describe(include='all').loc['mean']
fossil_brown.append(df2018_2.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_1.describe(include='all').loc['mean']
fossil_brown.append(df2018_1.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_12.describe(include='all').loc['mean']
fossil_brown.append(df2017_12.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_11.describe(include='all').loc['mean']
fossil_brown.append(df2017_11.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_10.describe(include='all').loc['mean']
fossil_brown.append(df2017_10.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_9.describe(include='all').loc['mean']
fossil_brown.append(df2017_9.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_8.describe(include='all').loc['mean']
fossil_brown.append(df2017_8.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_7.describe(include='all').loc['mean']
fossil_brown.append(df2017_7.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_6.describe(include='all').loc['mean']
fossil_brown.append(df2017_6.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_5.describe(include='all').loc['mean']
fossil_brown.append(df2017_5.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_4.describe(include='all').loc['mean']
fossil_brown.append(df2017_4.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_3.describe(include='all').loc['mean']
fossil_brown.append(df2017_3.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_2.describe(include='all').loc['mean']
fossil_brown.append(df2017_2.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_1.describe(include='all').loc['mean']
fossil_brown.append(df2017_1.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_12.describe(include='all').loc['mean']
fossil_brown.append(df2016_12.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_11.describe(include='all').loc['mean']
fossil_brown.append(df2016_11.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_10.describe(include='all').loc['mean']
fossil_brown.append(df2016_10.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_9.describe(include='all').loc['mean']
fossil_brown.append(df2016_9.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_8.describe(include='all').loc['mean']
fossil_brown.append(df2016_8.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_7.describe(include='all').loc['mean']
fossil_brown.append(df2016_7.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_6.describe(include='all').loc['mean']
fossil_brown.append(df2016_6.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_5.describe(include='all').loc['mean']
fossil_brown.append(df2016_5.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_4.describe(include='all').loc['mean']
fossil_brown.append(df2016_4.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_3.describe(include='all').loc['mean']
fossil_brown.append(df2016_3.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_2.describe(include='all').loc['mean']
fossil_brown.append(df2016_2.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_1.describe(include='all').loc['mean']
fossil_brown.append(df2016_1.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_12.describe(include='all').loc['mean']
fossil_brown.append(df2015_12.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_11.describe(include='all').loc['mean']
fossil_brown.append(df2015_11.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_10.describe(include='all').loc['mean']
fossil_brown.append(df2015_10.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_9.describe(include='all').loc['mean']
fossil_brown.append(df2015_9.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_8.describe(include='all').loc['mean']
fossil_brown.append(df2015_8.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_7.describe(include='all').loc['mean']
fossil_brown.append(df2015_7.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_6.describe(include='all').loc['mean']
fossil_brown.append(df2015_6.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_5.describe(include='all').loc['mean']
fossil_brown.append(df2015_5.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_4.describe(include='all').loc['mean']
fossil_brown.append(df2015_4.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_3.describe(include='all').loc['mean']
fossil_brown.append(df2015_3.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_2.describe(include='all').loc['mean']
fossil_brown.append(df2015_2.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_1.describe(include='all').loc['mean']
fossil_brown.append(df2015_1.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
 
fossil_brown.reverse() # Average monthly values 
print(fossil_brown)



hydro_water= []

df2018_12.describe(include='all').loc['mean']
hydro_water.append(df2018_12.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_11.describe(include='all').loc['mean']
hydro_water.append(df2018_11.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_10.describe(include='all').loc['mean']
hydro_water.append(df2018_10.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_9.describe(include='all').loc['mean']
hydro_water.append(df2018_9.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_8.describe(include='all').loc['mean']
hydro_water.append(df2018_8.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_7.describe(include='all').loc['mean']
hydro_water.append(df2018_7.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_6.describe(include='all').loc['mean']
hydro_water.append(df2018_6.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_5.describe(include='all').loc['mean']
hydro_water.append(df2018_5.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_4.describe(include='all').loc['mean']
hydro_water.append(df2018_4.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_3.describe(include='all').loc['mean']
hydro_water.append(df2018_3.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_2.describe(include='all').loc['mean']
hydro_water.append(df2018_2.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_1.describe(include='all').loc['mean']
hydro_water.append(df2018_1.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_12.describe(include='all').loc['mean']
hydro_water.append(df2017_12.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_11.describe(include='all').loc['mean']
hydro_water.append(df2017_11.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_10.describe(include='all').loc['mean']
hydro_water.append(df2017_10.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_9.describe(include='all').loc['mean']
hydro_water.append(df2017_9.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_8.describe(include='all').loc['mean']
hydro_water.append(df2017_8.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_7.describe(include='all').loc['mean']
hydro_water.append(df2017_7.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_6.describe(include='all').loc['mean']
hydro_water.append(df2017_6.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_5.describe(include='all').loc['mean']
hydro_water.append(df2017_5.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_4.describe(include='all').loc['mean']
hydro_water.append(df2017_4.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_3.describe(include='all').loc['mean']
hydro_water.append(df2017_3.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_2.describe(include='all').loc['mean']
hydro_water.append(df2017_2.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_1.describe(include='all').loc['mean']
hydro_water.append(df2017_1.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_12.describe(include='all').loc['mean']
hydro_water.append(df2016_12.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_11.describe(include='all').loc['mean']
hydro_water.append(df2016_11.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_10.describe(include='all').loc['mean']
hydro_water.append(df2016_10.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_9.describe(include='all').loc['mean']
hydro_water.append(df2016_9.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_8.describe(include='all').loc['mean']
hydro_water.append(df2016_8.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_7.describe(include='all').loc['mean']
hydro_water.append(df2016_7.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_6.describe(include='all').loc['mean']
hydro_water.append(df2016_6.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_5.describe(include='all').loc['mean']
hydro_water.append(df2016_5.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_4.describe(include='all').loc['mean']
hydro_water.append(df2016_4.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_3.describe(include='all').loc['mean']
hydro_water.append(df2016_3.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_2.describe(include='all').loc['mean']
hydro_water.append(df2016_2.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_1.describe(include='all').loc['mean']
hydro_water.append(df2016_1.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_12.describe(include='all').loc['mean']
hydro_water.append(df2015_12.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_11.describe(include='all').loc['mean']
hydro_water.append(df2015_11.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_10.describe(include='all').loc['mean']
hydro_water.append(df2015_10.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_9.describe(include='all').loc['mean']
hydro_water.append(df2015_9.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_8.describe(include='all').loc['mean']
hydro_water.append(df2015_8.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_7.describe(include='all').loc['mean']
hydro_water.append(df2015_7.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_6.describe(include='all').loc['mean']
hydro_water.append(df2015_6.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_5.describe(include='all').loc['mean']
hydro_water.append(df2015_5.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_4.describe(include='all').loc['mean']
hydro_water.append(df2015_4.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_3.describe(include='all').loc['mean']
hydro_water.append(df2015_3.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_2.describe(include='all').loc['mean']
hydro_water.append(df2015_2.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_1.describe(include='all').loc['mean']
hydro_water.append(df2015_1.describe(include='all').loc['mean']['generation hydro water reservoir'])
 
hydro_water.reverse() # Average monthly values 
print(hydro_water)

"""Below are the plots and regressions for the mean price of energy per EUR/MWH for each month and the mean megawatts (MW ) output per resource, given the month and its mean price of energy per EUR/MWH. The months, prices, megawatts, and MW to-price ratio were all accounted for. The significance behind the MW-to-price ratio is that it depicts the MW of the resource for one euro. Descriptions were given for each analysis.

One discretion that the viewer should account for is that the dates from January 2015 to December 2018 for some of the plots were depicted as values from 0 to 48. Ex: January 2015 would be considered month 0.
"""

#Histograms

Price_Actual_Dict = {key: i for i, key in enumerate(io2)}
def Hist_Price_Actual(Price_Actual_Dict):
    for k, v in Price_Actual.items(): print(f"{v}:{k}") 
print(Price_Actual_Dict)
plt.suptitle("Average monthly price of energy per EUR/MWH from January 2015 to December 2018 in Spain")
plt.ylabel('Average amount') 
plt.xlabel('Months') 
plt.bar(list(Price_Actual_Dict.values()), Price_Actual_Dict.keys(), color='g') 
print(dicDates)
import matplotlib.pyplot as plt

plt.show()

"""The green bars represent the observation value for each respective month. This histogram has a significant trench between month 10 and month 20, meaning that there was a price drop. In addition, the histogram has a multimodal distribution, which could indicate that there wasn't any external factors that led to a singular price increase. However, the price fluctuations within the histogram appear to be seasonal.

But within this histogram, there seems to be higher inversions as the months progress, indicating that the prices seem to be increasing overtime.

Below is the residual plot for the average monthly prices of energy per EUR/MWH.
"""

Months = [i for i in range(48)]
print(Months)

Months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]

Months1 = Months
Months1 = sm.add_constant(Months1)
io21 = io2
io21 = sm.add_constant(io21)

sns.residplot(x=  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47],y =[64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881], lowess = True, color="g")
plt.suptitle("Price residuals")
plt.xlabel("Months")
plt.ylabel("Amount from actual value") 
plt.legend("..#")

"""As one can observe this residual plot, one may notice the rebound in the observations, which formed a nonlinear pattern. However, the residuals are spread out, indicating a lack a bias, homoscedasticity , and constant variance. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy of the observed regression value versus the actual value of the observation itself."""

import numpy as np
from sklearn.linear_model import LinearRegression

y = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]).reshape((-1, 1))
x = np.array([64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889])



modelprice = stats.linregress ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]
,[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889]
)

io2 = [64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889]



"""This is the quadratic model used for the average monthly prices of energy per EUR/MWH."""

from sklearn.preprocessing import PolynomialFeatures

#Quadratic OLS regression 
polynomial_features = PolynomialFeatures(degree=2)

modelpricequad = np.poly1d(np.polyfit(Months, io2, 2))
print(modelpricequad)

io21 = sm.add_constant(io21)
xp = polynomial_features.fit_transform(io21)
  
poly = PolynomialFeatures(degree = 2)
X_poly = poly.fit_transform(Months1)
  
Quad = poly.fit(X_poly, io2)
lin2 = LinearRegression()
lin2.fit(X_poly, io2)
Price_Quad = sm.OLS(Months, xp).fit()


ypred = Price_Quad.predict(xp) 


Price_Quad.summary()

# Quadratic Scatterplots
plt.scatter(Months, io2, color = 'blue')
  
plt.plot(Months, lin2.predict(poly.fit_transform(Months1)), color = 'orange')
plt.title("R squared: 0.089")
plt.suptitle('Quadratic for average monthly prices of energy per EUR/MWH')
plt.xlabel('Months')
plt.ylabel('Average monthly prices of energy per EUR/MWH')
  
plt.show()

"""The blue dots represent the observations and the orange line is the linear model of best fit.This is a very weak  and postive correlation between the months themselves and the average monthly prices of energy per EUR/MWH. The blue dots represent the observations and the red line represents the quadratic model of best fit."""

plt.suptitle("Predicted average monthly OLS quadratic price of energy per EUR/MWH versus actual values") 
plt.xlabel("Predicted average monthly prices") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = ypred, y = io2, lowess = True, color="g")
#Predicted OLS average monthly quadratic values versus actual values

"""As one can observe this residual plot, one may notice that the lowess line has an arching hump and that the residuals are spread out in a pattern; indicating heteroskedasticity and bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.
heteroskedasticity  
"""

Price_Quad.summary()

influencePriceQuad = Price_Quad.get_influence() #Quadratic OLS residuals


standardized_residualsPriceQuad = influencePriceQuad.resid_studentized_internal


print(standardized_residualsPriceQuad)

# OLS Predicted Quadratic values
print(ypred)

"""This is the logarithmic model for the average monthly prices of energy per EUR/MWH."""

#Logarithmic OLS regressions
Logpricevalues = ((np.log(io2))) 
LogMonthsvalues = ((np.log(Months)))
Log = np.polyfit(np.log(Months), io21, 1)
lin2 = LinearRegression()
lin2.fit(np.log(io21), Months)
Price_Log = sm.OLS(Months, io21).fit()

predictionLog = Price_Log.predict(io21) 

Price_Log.summary() #OLS Logarithmic summary table
#Log
Log = np.polyfit(np.log(io2), Months, 1)
print(Log)

y = 20.14460424 * Logpricevalues -56.89509997

#Logarithmic OLS regression scatterplot
plt.suptitle("Logarithmic average monthly outputs versus average monthly prices of energy per EUR/MWH")
plt.title("R squared : 0.02")
plt.ylabel("Average monthly prices of energy per EUR/MWH")
plt.xlabel("Average monthly outputs")
plt.yscale("log") 
plt.xscale("log")
plt.plot(Logpricevalues, Months, "o")
plt.plot(Logpricevalues, y)

"""This is a very weak and postive correlation between the months themselves and the average monthly prices of energy per EUR/MWH."""

influencePriceLog = Price_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsPriceLog = influencePriceLog.resid_studentized_internal


print(standardized_residualsPriceLog)

print(predictionLog)# OLS logarithmic predicted values

#OLS Logarithmic residuals versus predictions

sns.residplot(x = predictionLog, y =standardized_residualsPriceLog, lowess = True, color="g")
plt.suptitle("Price residuals from quadratic model versus predicted average monthly outputs")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 
plt.rcParams["figure.figsize"] = [20, 10]
plt.legend("..#")

"""As one can observe this residual plot, one may notice a slightly curved rebound in the observations, which formed a nonlinear pattern, indicating that a nonlinear model would fit the observation values better than a linear model. However, the residuals are spread out; indicating homoscedasticity and constant variance. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly OLS logarithmic price of energy per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly prices") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictionLog, y = io2, lowess = True, color="g")
#Predicted OLS average monthly logarithmic values versus actual values

"""The predictions seem to be nearly the same as the actual values. This indicates a lack of bias, constant variance, and homoscedasticity. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

This is the linear model used for the average monthly prices of energy per EUR/MWH.
"""

#Linear OLS regression
Months1 = sm.add_constant(Months1)
modelpricereg = sm.OLS(io2, Months1).fit()
predictions = modelpricereg.predict(Months1) 


modelpricereg.summary() 
#OLS Linear Summary Table

modelprice = stats.linregress ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]
,[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889]
)

#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(Months,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot 
plt.suptitle("Average monthly price of energy per EUR/MWH")
plt.plot(Months, io2, "o")
f = lambda x: 	0.214393*x + 52.821613
plt.rcParams["figure.figsize"] = [10, 10]
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.title(f"R squared: {modelprice.rvalue**2}")
plt.ylabel('Average monthly price of energy per EUR/MWH ') 
plt.legend("#")
plt.xlabel('Months') 
plt.show()

"""As one can observe this scatterplot, one may notice the positive yet weak correlation between the mean price of energy per EUR/MWH and their respective months.The blue dots represent the observations and the orange line is the linear model of best fit."""

#Linear OLS Predicted values
print(predictions)

#Linear OLS regression residuals
influencePricereg = modelpricereg.get_influence() 


standardized_residualsPricereg = influencePricereg.resid_studentized_internal


print(standardized_residualsPricereg)

modelpriceresidual = ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47],
[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889])

#Predicted average monthly OLS quadratic values versus residuals
sns.residplot(x = ypred, y =standardized_residualsPriceQuad, lowess = True, color="g")
plt.suptitle("Price residuals from quadratic model versus predicted average monthly outputs")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 
plt.rcParams["figure.figsize"] = [20, 10]
plt.legend("..#")

"""As one can observe, there is a double yet subtle hump along the lowess line in the residual plot. In addition, the residuals are quite spread out in no particular pattern which indicates constant variance, homoscedasticity, and a lack of bias. Given these circumstances, it would be reasonable to assume that the quadratic model of fit is suitable. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Predicted OLS linear values versus residual values
sns.residplot(x = predictions, y =standardized_residualsPricereg, lowess = True, color="g")
plt.suptitle("Price residuals from linear model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 
plt.rcParams["figure.figsize"] = [20, 10]
plt.legend("..#")

"""As one can observe, there is a subtle hump along the lowess line in the residual plot. In addition, the residuals are quite spread out in no particular pattern which indicates constant variance, homoscedasticity, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly OLS linear price of energy per EUR/MWH versus actual values") 
plt.xlabel("Predicted average monthly prices") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictions, y = io2, lowess = True, color="g")
#Predicted OLS average monthly linear values versus actual values

"""As one can observe this residual plot, one may notice the slight hump in the fitted model, which form a nonlinear pattern. The slight hump is too subtle to suggest a different model. In addition, the observations are spread out without the distinct pattern, indicating constant variance, a lack of bias, and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(Months,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

"""Below is a scatter graph depicting the relationship between the average monthly prices of energy per EUR/MWH."""

#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(Months,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot 
plt.suptitle("Average monthly price of energy per EUR/MWH")
plt.plot(Months, io2, "o")
f = lambda x: 	0.214393*x + 52.821613
plt.rcParams["figure.figsize"] = [10, 10]
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.title(f"R squared: {modelprice.rvalue**2}")
plt.ylabel('Average monthly price of energy per EUR/MWH ') 
plt.legend("#")
plt.xlabel('Months') 
plt.show()

As one can observe this scatterplot, one may notice the positive yet weak correlation between the mean price of energy per EUR/MWH and their respective months.The blue dots represent the observations and the orange line is the linear model of best fit.

"""As one can observe this scatterplot, one may notice the positive yet weak correlation between the mean price of energy per EUR/MWH and their respective months.The blue dots represent the observations and the orange line is the linear model of best fit."""



"""Below are the prices of energy per EUR/MWH. """

print(io2)

"""If the data is deemed to be stationary based off the given tests below, then that means that seasonality and trends are not factors in the values of the tested data. If the data is deemed to be non stationary, then seasonality and trends are indeed factors after all."""

#Dataframes analyzed by resource
dfPrice = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889]
print(df_Price)
df_nuclear= pd.DataFrame.from_dict(dfnuclear, orient = "columns")
print(df_Price)

#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result):
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_Price['Price'])


test_result=adfuller(df_Price['Price'])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_Price["Price"])
plt.suptitle("Autocorrelations of Price")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 
plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_Price["Price"])
plt.suptitle("Partialautocorrelations of Price")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 
plt.show
Price_Autocorrelations = sm.tsa.acf(df_Price["Price"], fft=False) #Autocorrelations
print(Price_Autocorrelations)

The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the partial autocorrelation plot, indicating that the lags directly beforehand influenced the average monthly prices of energy per EUR/MWH.

df_Price['First Difference Price'] = df_Price["Price"]- df_Price["Price"].shift(1) # Seasonality values
df_Price['Seasonal Difference Price']=df_Price["Price"]- df_Price["Price"].shift(12)
df_Price.head()

plt.suptitle("Seasonal Difference of average monthly prices of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_Price['Seasonal Difference Price'].plot() # Seasonality Plot

The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the months and the average monthly prices of energy per EUR/MWH.

This bell shaped curve is slighlty skewed to the right. Hence, it has a asymmetrical distribution. The blue line in this plot represent the observation values and their likelihood of occurring.

If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.

#Bell Curves 


PriceResults_mean = np.mean(df_Price["Price"])
PriceResults_std = np.std(df_Price["Price"])
 

PriceResultspdf = stats.norm.pdf(df_Price["Price"].sort_values(), PriceResults_mean, PriceResults_std)


plt.plot(df_Price["Price"].sort_values(), PriceResultspdf)
plt.xlim([0,90])  
plt.xlabel("Price ", size=15)    
plt.ylabel("Frequency", size=15)    
plt.suptitle("Frequency distribution of energy price per EUR/MWH (scaled in decimals)")
plt.title(f'Skewness for data: {skew(df_Price["Price"])}')            
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result):
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_Price['Price'])


test_result=adfuller(df_Price['Price'])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_Price["Price"])
plt.suptitle("Autocorrelations of Price")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 
plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_Price["Price"])
plt.suptitle("Partialautocorrelations of Price")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 
plt.show
Price_Autocorrelations = sm.tsa.acf(df_Price["Price"], fft=False) #Autocorrelations
print(Price_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the partial autocorrelation plot, indicating that the lags directly beforehand influenced the average monthly prices of energy per EUR/MWH.

"""

df_Price['First Difference Price'] = df_Price["Price"]- df_Price["Price"].shift(1) # Seasonality values
df_Price['Seasonal Difference Price']=df_Price["Price"]- df_Price["Price"].shift(12)
df_Price.head()

plt.suptitle("Seasonal Difference of average monthly prices of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_Price['Seasonal Difference Price'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the months and the average monthly prices of energy per EUR/MWH.



"""

#Bell Curves 


PriceResults_mean = np.mean(df_Price["Price"])
PriceResults_std = np.std(df_Price["Price"])
 

PriceResultspdf = stats.norm.pdf(df_Price["Price"].sort_values(), PriceResults_mean, PriceResults_std)


plt.plot(df_Price["Price"].sort_values(), PriceResultspdf)
plt.xlim([0,90])  
plt.xlabel("Price ", size=15)    
plt.ylabel("Frequency", size=15)    
plt.suptitle("Frequency distribution of energy price per EUR/MWH (scaled in decimals)")
plt.title(f'Skewness for data: {skew(df_Price["Price"])}')            
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

"""This bell shaped curve is slighlty skewed to the right. Hence, it has a asymmetrical distribution. The blue line in this plot represent the observation values and their likelihood of occurring.

If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.
"""

df_Price.describe(include = 'all')

"""And below are the prices of energy per EUR/MWH rounded to the hundredth."""

Rounded_Y = [round(item, 2) for item in io2]
print(Rounded_Y)
#Rounded Price

"""The average monthly prices of energy per EUR/MWH were rounded for the sake of the box and whisker graphs displayed throughout the analysis."""

import pandas as pd
import statsmodels.api as sm
import scipy.stats as stats

"""Below is the analysis of all the resources included in the regression. All of these resources have been analyzed separately and collectively. Quadratic, logarithmic and linear models have been constructed as references for predicted values. A consideration to keep in mind when reading this analysis is that the conducted plots and tests are in no particular order. That being said, the analysis begins below this paragraph.

The first analyzed resource was fossil oil.

The results from the list directly below will be analyzed for seasonality since the output and the respective average monthly price of energy per EUR/MWH are taken into account simultaneously. The ratios are the outputs divided by the respective the average monthly prices of energy per EUR/MWH.
"""

#Dataframes analyzed by resource
dfFossilOil = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Fossil_Oil" : [306.0204638472033, 319.2395833333333, 319.3337819650067, 338.78133704735376, 332.56720430107526, 319.2294853963839, 360.23387096774195, 323.9139784946237, 343.4916666666667, 323.39112903225805, 346.06388888888887, 330.6514131897712, 337.46505376344084, 297.25431034482756, 294.05248990578735, 259.8875, 277.9153225806452, 289.82916666666665, 286.6900269541779, 283.30645161290323, 281.3861111111111, 276.9959731543624, 271.56944444444446, 276.63978494623655, 279.52284946236557, 291.4017857142857, 302.50740242261105, 261.4902777777778, 291.9206989247312, 299.3930555555556, 308.2002688172043, 306.23521505376345, 310.8013888888889, 287.4187919463087, 303.54305555555555, 293.9260752688172, 285.73924731182797, 295.9002976190476, 288.1265141318977, 257.62916666666666, 280.4502688172043, 285.12083333333334, 281.5450874831763, 283.3333333333333, 296.1361111111111, 291.2993288590604, 269.02150537634407, 272.98333333333335],"Dates" : ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfFossilOil)
df_FossilOil= pd.DataFrame.from_dict(dfFossilOil, orient = "columns")
print(df_FossilOil)
df_FossilOil["Ratio"] = df_FossilOil["Fossil_Oil"]/df_FossilOil["Price"]
pdToListFossilOil = list(df_FossilOil["Ratio"])
print(pdToListFossilOil)

fossil_oil1 = fossil_oil
fossil_oil1 = sm.add_constant(fossil_oil1)

"""This is the logarithmic model for the average monthly outputs of fossil oil versus the average monthly prices of energy per EUR/MWH."""

print(fossil_oil)

#Logarithmic OLS regressions
Logpricevalues = ((np.log(io2))) 
LogFossilOilvalues = ((np.log(fossil_oil)))
Log = np.polyfit(np.log(io2), fossil_oil1, 1)
lin2 = LinearRegression()
lin2.fit(np.log(fossil_oil1), io2)
FossilOil_Log = sm.OLS(io2, fossil_oil1).fit()

FossilOil_Logpred = FossilOil_Log.predict(fossil_oil1) 

FossilOil_Log.summary() #OLS Logarithmic summary table
#Log
Log = np.polyfit(np.log(fossil_oil), io2, 1)
print(Log)

y = 18.80220214 * LogFossilOilvalues - 49.22000295

#Logarithmic OLS regression scatterplot
plt.suptitle("Logarithmic average monthly outputs versus average monthly prices of energy per EUR/MWH")
plt.title("R squared : 0.08")
plt.ylabel("Average monthly prices of energy per EUR/MWH")
plt.xlabel("Average monthly outputs")
plt.yscale("log") 
plt.xscale("log")
plt.plot(LogFossilOilvalues, io2, "o")
plt.plot(LogFossilOilvalues, y)

plt.xlim([5, 7])

"""The blue dots represent the observations and the orange line is the linear model of best fit.This is a very weak  and positive correlation between the average monthly outputs and the average monthly prices of energy per EUR/MWH.The blue dots represent the observations and the orange line is the linear model of best fit."""

FossilOil_Log.summary()

influenceFossilOilLog = FossilOil_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsFossilOilLog = influenceFossilOilLog.resid_studentized_internal


print(standardized_residualsFossilOilLog)

print(FossilOil_Logpred) # OLS logarithmic predicted values



plt.suptitle("Predicted average monthly logarithmic output to price of energy per EUR/MWH ratio versus actual ratio values ")
plt.xlabel("Predicted fossil oil output to EUR/MWH ratio")
plt.ylabel("Amount from actual values")   
plt.legend("..#")

  #OLS logarithmic predicted average monthly ratios versus actual ratios
FossilOilLogRatioPredict = FossilOil_Logpred/predictionLog    
sns.residplot(x = FossilOilLogRatioPredict, y = pdToListFossilOil, lowess = True, color="g")



"""As one can observe, there is a double yet subtle hump along the lowess line in the residual plot. In addition, the residuals are quite spread out in no particular pattern which indicates constant variance, a lack of bias, and homoscedasticity. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predictions versus residuals

plt.suptitle("Output residuals from logarithmic model versus predicted average monthly fossil oil outputs") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values") 
plt.legend("..#")
sns.residplot(x = FossilOil_Logpred, y = standardized_residualsFossilOilLog, lowess = True, color="g")

"""As one can observe, there is a decreasing trend in the variance of the predicted values versus the actual values. This indicates that there is heteroskedasticity but no bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predicted ratios versus residuals
plt.suptitle("Predicted average monthly logarithmic fossil oil output to price of energy per EUR/MWH ratio versus respective fossil oil residuals") 
plt.xlabel("Predicted fossil oil output to EUR/MWH ratio")
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = FossilOilLogRatioPredict, y = standardized_residualsFossilOilLog/standardized_residualsPriceLog,lowess = True, color="g")

"""With the exception of a few heteroskedastic outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias otherwise. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""



plt.suptitle("Predicted average monthly logarithmic fossil oil outputs per EUR/MWH  versus actual values") 
 plt.xlabel("Predicted fossil oil outputs") 
 plt.ylabel("Amount from actual values")  
 plt.legend("..#")
 sns.residplot(x = FossilOil_Logpred, y = fossil_oil, lowess = True, color="g")

 # OLS predicted logarithmic average monthly values versus actual values

"""The predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""



modelFossilOil = stats.linregress([306.0204638472033, 319.2395833333333, 319.3337819650067, 338.78133704735376, 332.56720430107526, 319.2294853963839, 360.23387096774195, 323.9139784946237, 343.4916666666667, 323.39112903225805, 346.06388888888887, 330.6514131897712, 337.46505376344084, 297.25431034482756, 294.05248990578735, 259.8875, 277.9153225806452, 289.82916666666665, 286.6900269541779, 283.30645161290323, 281.3861111111111, 276.9959731543624, 271.56944444444446, 276.63978494623655, 279.52284946236557, 291.4017857142857, 302.50740242261105, 261.4902777777778, 291.9206989247312, 299.3930555555556, 308.2002688172043, 306.23521505376345, 310.8013888888889, 287.4187919463087, 303.54305555555555, 293.9260752688172, 285.73924731182797, 295.9002976190476, 288.1265141318977, 257.62916666666666, 280.4502688172043, 285.12083333333334, 281.5450874831763, 283.3333333333333, 296.1361111111111, 291.2993288590604, 269.02150537634407, 272.98333333333335],
  [64.9490188172043,56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881] )



modelFossilOil = stats.linregress([306.0204638472033, 319.2395833333333, 319.3337819650067, 338.78133704735376, 332.56720430107526, 319.2294853963839, 360.23387096774195, 323.9139784946237, 343.4916666666667, 323.39112903225805, 346.06388888888887, 330.6514131897712, 337.46505376344084, 297.25431034482756, 294.05248990578735, 259.8875, 277.9153225806452, 289.82916666666665, 286.6900269541779, 283.30645161290323, 281.3861111111111, 276.9959731543624, 271.56944444444446, 276.63978494623655, 279.52284946236557, 291.4017857142857, 302.50740242261105, 261.4902777777778, 291.9206989247312, 299.3930555555556, 308.2002688172043, 306.23521505376345, 310.8013888888889, 287.4187919463087, 303.54305555555555, 293.9260752688172, 285.73924731182797, 295.9002976190476, 288.1265141318977, 257.62916666666666, 280.4502688172043, 285.12083333333334, 281.5450874831763, 283.3333333333333, 296.1361111111111, 291.2993288590604, 269.02150537634407, 272.98333333333335],
  [64.9490188172043,56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881] )

"""This is the linear model used for the average monthly fossil oil outputs versus the average monthly prices of energy per EUR/MWH."""

#Linear OLS regression
fossil_oil1 = fossil_oil
fossil_oil1 = sm.add_constant(fossil_oil1)
modelFossilOilreg = sm.OLS(io2, fossil_oil1).fit()
predictionsFossilOil = modelFossilOilreg.predict(fossil_oil1)
modelFossilOilreg.summary()
#OLS Linear Summary Table



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(fossil_oil,io2)
print("slope: %f    intercept: %f" % (slope, intercept))


# OLS linear Scatterplot 

plt.plot(fossil_oil,io2, "o")
f = lambda x: 	0.061210   *x + 39.599580
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.legend('#')
plt.title(f"R squared: {modelFossilOil.rvalue**2}")
plt.suptitle("Average monthly outputs versus average monthly prices of energy per EUR/MWH ")
plt.ylabel('Average monthly price of energy per EUR/MWH ') 
plt.xlabel('Average monthly fossil oil output ') 

plt.show()

There is a very weak yet positive correlation between the average monthly outputs and the respective months.The blue dots are the observations and orange line is the linear model of best fit.

#Predicted OLS Linear values
print(predictionsFossilOil)

#Linear OLS regression residuals
influenceFossilOilreg = modelFossilOilreg.get_influence()


standardized_residualsFossilOil = influenceFossilOilreg.resid_studentized_internal


print(standardized_residualsFossilOil)

plt.suptitle("Predicted average monthly linear fossil oil outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictionsFossilOil, y = fossil_oil, lowess = True, color="g")
#Predicted OLS average monthly linear values versus actual values

"""The predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

This is the quadratic model used for the average monthly fossil oil outputs versus the average monthly prices of energy per EUR/MWH.
"""

#Quadratic OLS regression 
from sklearn.preprocessing import PolynomialFeatures
polynomial_features = PolynomialFeatures(degree=3)

modelFossilOilquad = np.poly1d(np.polyfit(fossil_oil, io2,2))
print(modelFossilOilquad)

fossil_oil1 = fossil_oil

fossil_oil1 = sm.add_constant(fossil_oil1)
fossil_oil2 = polynomial_features.fit_transform(fossil_oil1)
from sklearn.preprocessing import PolynomialFeatures
  
poly = PolynomialFeatures(degree = 2)
X_poly = poly.fit_transform(fossil_oil1)
  
FossilOil_Q = poly.fit(X_poly, fossil_oil)
lin2 = LinearRegression()
lin2.fit(X_poly, fossil_oil)
FossilOil_Quad = sm.OLS(io2, fossil_oil2).fit()

# OLS Predicted Quadratic values
FossilOil_ypred = FossilOil_Quad.predict(fossil_oil2) 

#OLS Quadratic Summary Table
FossilOil_Quad.summary()

#Quadratic Scatterplots
polyline = np.linspace(start = 200, stop =500 , num = 20)
plt.plot(polyline, modelFossilOilquad(polyline))
plt.scatter(fossil_oil,io2, color = 'blue')
plt.title("R squared : 0.083")
plt.suptitle('Quadratic for average monthly outputs of fossil oil versus average monthly prices of energy per EUR/MWH')
plt.ylabel('Average monthly prices of energy per EUR/MWH')
plt.xlabel('Average monthly outputs of fossil oil')
plt.show()

"""The blue dots represent the observations and the blue line is the quadratic model of best fit.This is a very weak  and postive correlation between the average monthly outputs and the average monthly prices of energy per EUR/MWH.The blue dots represent the observations and the orange line is the linear model of best fit."""





print(FossilOil_ypred) # OLS quadratic predicted values

influenceFossilOilQuad = FossilOil_Quad.get_influence() #Quadratic OLS residuals


standardized_residualsFossilOilQuad = influenceFossilOilQuad.resid_studentized_internal


print(standardized_residualsFossilOilQuad)

plt.suptitle("Predicted average monthly quadratic fossil oil outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = FossilOil_ypred, y = fossil_oil, lowess = True, color="g")
 #Predicted OLS average monthly quadratic values versus actual values

"""As one can observe this residual plot, one may notice some sharp spikes in the fitted model, which form a nonlinear pattern. However, the observations are spread out in a "S" shaped pattern; indicating heteroskedasticity and bias.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""



#Predicted average monthly OLS quadratic values versus residuals
sns.residplot(x = FossilOil_ypred, y = standardized_residualsFossilOilQuad, lowess = True, color="g")

plt.suptitle("Fossil oil output residuals from quadratic model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""Due to the sudden and punctual hump in the lowess line, there is indication that there is heteroskedasticity and bias in this plot. This would indicate that this model does not fit the data. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

modelFossilOilregpredictions = stats.linregress([predictionsFossilOil],[fossil_oil])

#Predicted OLS linear values versus residual values
sns.residplot(x = predictionsFossilOil, y =standardized_residualsFossilOil, lowess = True, color="g")
plt.rcParams["figure.figsize"] = [20, 10]

plt.suptitle("Fossil oil output residuals from linear model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 
matplotlib.rcParams.update({'font.size': 19}) 
modelFossilOilregpredictions = stats.linregress([predictionsFossilOil],[fossil_oil])
plt.legend("..#")

"""Due to the sudden and punctual hump in the lowess line, there is indication that there is heteroskedasticity in this plot. However, there is a lack of bias in this plot since there is a decreasing trend in the variance. The green dots represent the respective observations while the dotted horizontal line represents the regression model.The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

If the data is deemed to be stationary based off the given tests below, then that means that seasonality and trends are not factors in the values of the tested data. If the data is deemed to be non stationary, then seasonality and trends are indeed factors after all.
"""

#Dataframes analyzed by resource
dfFossilOil = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Fossil_Oil" : [306.0204638472033, 319.2395833333333, 319.3337819650067, 338.78133704735376, 332.56720430107526, 319.2294853963839, 360.23387096774195, 323.9139784946237, 343.4916666666667, 323.39112903225805, 346.06388888888887, 330.6514131897712, 337.46505376344084, 297.25431034482756, 294.05248990578735, 259.8875, 277.9153225806452, 289.82916666666665, 286.6900269541779, 283.30645161290323, 281.3861111111111, 276.9959731543624, 271.56944444444446, 276.63978494623655, 279.52284946236557, 291.4017857142857, 302.50740242261105, 261.4902777777778, 291.9206989247312, 299.3930555555556, 308.2002688172043, 306.23521505376345, 310.8013888888889, 287.4187919463087, 303.54305555555555, 293.9260752688172, 285.73924731182797, 295.9002976190476, 288.1265141318977, 257.62916666666666, 280.4502688172043, 285.12083333333334, 281.5450874831763, 283.3333333333333, 296.1361111111111, 291.2993288590604, 269.02150537634407, 272.98333333333335],"Dates" : ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfFossilOil)
df_FossilOil= pd.DataFrame.from_dict(dfFossilOil, orient = "columns")
print(df_FossilOil)
df_FossilOil["Ratio"] = df_FossilOil["Fossil_Oil"]/df_FossilOil["Price"]
pdToListFossilOil = list(df_FossilOil["Ratio"])
print(pdToListFossilOil)
#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_FossilOil["Ratio"])


test_result=adfuller(df_FossilOil["Ratio"])



from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_FossilOil["Ratio"])
plt.suptitle("Autocorrelations of Fossil Oil Ratios")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags')
plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partialautocorrelation Plot
plot_pacf(df_FossilOil["Ratio"])
plt.suptitle("Autocorrelations of Fossil Oil Ratios")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags')
plt.show

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. 

As one can observe, there is statistical significance in the partial autocorrelation plot, indicating that the lags directly beforehand influenced the relationship between average monthly fossil oil outputs and the average monthly prices of energy per EUR/MWH.
"""

Fossil_Oil_Ratio_Autocorrelations = sm.tsa.acf(df_FossilOil["Ratio"], fft=False) #Autocorrelations
print(Fossil_Oil_Ratio_Autocorrelations)

df_FossilOil['First Difference Fossil Oil Ratio'] = df_FossilOil["Ratio"]- df_FossilOil["Ratio"].shift(1) # Seasonality values
df_FossilOil['Seasonal Difference Fossil Oil Ratio']=df_FossilOil["Ratio"]- df_FossilOil["Ratio"].shift(12)
df_FossilOil.head()

plt.suptitle("Seasonal Difference of average monthly fossil oil outputs to price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_FossilOil['Seasonal Difference Fossil Oil Ratio'].plot()

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the average monthly outputs and the average monthly prices of energy per EUR/MWH."""

#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_FossilOil["Fossil_Oil"])


test_result=adfuller(df_FossilOil["Fossil_Oil"])



from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_FossilOil["Fossil_Oil"])
plt.suptitle("Autocorrelations of Fossil Oil")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 
plt.show
plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_FossilOil["Fossil_Oil"])
plt.suptitle("Partialautocorrelations of Fossil Oil")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 
plt.show
plt.show

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the partial autocorrelation plot, indicating that the lags directly beforehand influenced the relationship between average monthly fossil oil outputs and the average monthly prices of energy per EUR/MWH.
"""



df_FossilOil['First Difference'] = df_FossilOil["Fossil_Oil"]- df_FossilOil["Fossil_Oil"].shift(1) # Seasonality values
df_FossilOil['Seasonal Difference']=df_FossilOil["Fossil_Oil"]- df_FossilOil["Fossil_Oil"].shift(12)
df_FossilOil.head()

plt.suptitle("Seasonal Difference of average monthly fossil oil outputs")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_FossilOil['Seasonal Difference'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted in the average monthly fossil oil outputs."""

Fossil_Oil_Autocorrelations = sm.tsa.acf(df_FossilOil["Fossil_Oil"], fft=False) #Autocorrelations
print(Fossil_Oil_Autocorrelations)





from scipy.stats import skew

#Bell Curves 


FossilOilResults_mean = np.mean(df_FossilOil["Ratio"])
FossilOilResults_std = np.std(df_FossilOil["Ratio"])
 

FossilOilResultspdf = stats.norm.pdf(df_FossilOil["Ratio"].sort_values(), FossilOilResults_mean, FossilOilResults_std)


plt.plot(df_FossilOil["Ratio"].sort_values(), FossilOilResultspdf)
plt.xlim([0,20])  
plt.xlabel("Output to energy price per EUR/MWH", size=15)    
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")

plt.title(f'Skewness for data: {skew(df_FossilOil["Ratio"])}')
plt.suptitle("Frequency distribution of output to energy price per EUR/MWH ratios (scaled in decimals)")
plt.show()

"""If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.

These bell-shaped curves are skewed to the left and skewed to the right, respectively. Hence, they have a symmetrical distribution. The blue line in this plot represent the observation values and their likelihood of occurring.
"""

#Bell Curves 


FossilOilResults_mean = np.mean(df_FossilOil["Fossil_Oil"])
FossilOilResults_std = np.std(df_FossilOil["Fossil_Oil"])
 

FossilOilResultspdf = stats.norm.pdf(df_FossilOil["Fossil_Oil"].sort_values(), FossilOilResults_mean, FossilOilResults_std)


plt.plot(df_FossilOil["Fossil_Oil"].sort_values(), FossilOilResultspdf)
plt.xlim([0,500])  
plt.xlabel("Output in MWH ", size=15)    
plt.title(f'Skewness for data: {skew(df_FossilOil["Fossil_Oil"])}')   
plt.suptitle("Frequency distribution of average monthly fossil oil outputs versus average monthly energy prices per EUR/MWH (scaled in decimals) " )
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

df_FossilOil['First Difference ratios'] = df_FossilOil["Ratio"]- df_FossilOil["Ratio"].shift(1) # Seasonality values
df_FossilOil['Seasonal Difference ratios']=df_FossilOil["Ratio"]- df_FossilOil["Ratio"].shift(12)
df_FossilOil.head()
plt.suptitle("Seasonal Difference of average monthly fossil oil outputs to price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_FossilOil['Seasonal Difference ratios'].plot() # Seasonality Plot





"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the average monthly megawatts from fossil oil and the average monthly prices of energy per EUR/MWH."""



plt.suptitle("Seasonal Difference of average monthly Price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_FossilOil['Seasonal Difference Price'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the average monthly megawatts from fossil oil and the average monthly prices of energy per EUR/MWH."""

df_FossilOil.describe(include = 'all')  # Description table of Dataframes

"""Below is a histogram of average monthly fossil oil outputs."""

fossil_oil_Dict = {key: i for i, key in enumerate(fossil_oil)}

def Hist_fossil_oil(fossil_oil_Dict):
    for k, v in fossil_oil_Dict.items(): print(f"{v}:{k}") 
print(fossil_oil_Dict)

plt.bar(list(fossil_oil_Dict.values()), fossil_oil_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs of fossil oil")
plt.ylabel('Average monthly outputs') 
plt.xlabel('Months') 
#Histograms

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. The histogram is roughly symmetricical, with a unimodal in between months 0 and 10. Based off of this histogram, the output of fossil oil has been roughly the same from months 0 to 48 (January 2015 to December 2018).As one can observe the histogram, one may notice that it is mostly uniform with a slight decrease in output overtime."""

pdtoListFossil_Oil_Dict = {key: i for i, key in enumerate(pdToListFossilOil)}

def Hist_pdtoList(pdtoListFossil_Oil_Dict):
    for k, v in pdtoListFossil_Oil_Dict.items(): print(f"{v}:{k}") #Histograms
print(pdtoListFossil_Oil_Dict)

plt.bar(list(pdtoListFossil_Oil_Dict.values()), pdtoListFossil_Oil_Dict
print(dicDates)
plt.suptitle("Average monthly outputs/price ratio of fossil oil")
plt.ylabel('Average monthly outputs/price ratio') 
plt.xlabel('Months') 


plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. The histogram above displays a bimodal distribution. In addition, there is a large trench in the center of the histogram between months 20 and 30. This indicates that there was a sharp decline in the output produced per EUR/MWH.

Below is a box and whisker plot for monthly fossil oil outputs and the prices of energy per EUR/MWH.
"""

# Box and Whisker Plot
    sns.set(style="darkgrid") 
    plt.suptitle('Distribution of average monthly fossil oil outputs based off of average monthly price of energy per EUR/MWH')
    plt.xlabel('Average monthly prices')
  
    plt.rcParams["figure.figsize"] = [40, 20]
    plt.ylabel('Average monthly fossil oil output')
   
    sns.boxplot(x=Rounded_Y, y=[306.0204638472033, 319.2395833333333, 319.3337819650067, 338.78133704735376, 332.56720430107526, 319.2294853963839, 360.23387096774195, 323.9139784946237, 343.4916666666667, 323.39112903225805, 346.06388888888887, 330.6514131897712, 337.46505376344084, 297.25431034482756, 294.05248990578735, 259.8875, 277.9153225806452, 289.82916666666665, 286.6900269541779, 283.30645161290323, 281.3861111111111, 276.9959731543624, 271.56944444444446, 276.63978494623655, 279.52284946236557, 291.4017857142857, 302.50740242261105, 261.4902777777778, 291.9206989247312, 299.3930555555556, 308.2002688172043, 306.23521505376345, 310.8013888888889, 287.4187919463087, 303.54305555555555, 293.9260752688172, 285.73924731182797, 295.9002976190476, 288.1265141318977, 257.62916666666666, 280.4502688172043, 285.12083333333334, 281.5450874831763, 283.3333333333333, 296.1361111111111, 291.2993288590604, 269.02150537634407, 272.98333333333335])
    plt.show

"""This box and whisker plot depicts the frequencies between the distribution of the monthly average output of fossil oil produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of fossil oil produced, which was in between 280 and 300 units, was when the price of energy per EUR/MWH was at roughy 70. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 units), fossil oil output was at 260.The lowest amount produced, which was slightly below 260 units, was at the price of approximently 50.4 EUR/MWH. When the price of energy per EUR/MWH was at its highest, at approximately 79.49 EUR/MWH fossil oil output was at 280. At approximately 71.07 EUR/MWH, fossil oil produced the most units at roughly 360.

"""

import matplotlib.pyplot as plt
  

plt.suptitle('Distribution of average monthly fossil oil outputs based off of average monthly price of energy per EUR/MWH')
plt.xlabel('Average monthly prices')
  
plt.rcParams["figure.figsize"] = [40, 15]
plt.ylabel('Average monthly fossil oil output')  
  
plt.xlim(30, 80)   



# Stem Plot 
plt.stem(Rounded_Y, fossil_oil)

"""This plot depicts the frequencies between the distribution of the monthly average output of fossil oil produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of fossil oil produced, which was in between 280 and 300 units, was when the price of energy per EUR/MWH was at roughy 70. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 units), fossil oil output was at 260.The lowest amount produced, which was slightly below 260 units, was at the price of approximently 50.4 EUR/MWH. When the price of energy per EUR/MWH was at its highest, at approximately 79.49 EUR/MWH fossil oil output was at 280. At approximately 71.07 EUR/MWH, fossil oil produced the most units at roughly 360.
Each blue dot and the end of the blue lines represent an observation.
"""

print(fossil_oil)



#Predicted OLS linear average monthly ratios versus residuals
FossilOilRegRatioPredict = predictionsFossilOil/predictions

sns.residplot(x = FossilOilRegRatioPredict, y = standardized_residualsFossilOil/standardized_residualsPricereg, lowess = True, color="g")
plt.suptitle("Predicted fossil oil output to EUR/MWH versus respective linear model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of a few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#OLS predicted quadratic average monthly ratios versus residuals
FossilOilQuadRatioPredict  = FossilOil_ypred/ypred 

sns.residplot(x = FossilOilQuadRatioPredict , y = standardized_residualsFossilOilQuad/standardized_residualsPriceQuad , lowess = True, color="g")


plt.suptitle("Predicted fossil oil output to EUR/MWH versus respective quadratic model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of a few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#OLS predicted quadratic average monthly ratios versus actual ratios 
sns.residplot(x = FossilOilQuadRatioPredict , y = pdToListFossilOil, lowess = True, color="g")
plt.suptitle("Predicted quadratic fossil oil output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe, there is a double yet subtle hump along the lowess line in the residual plot. In addition, the residuals are quite spread out in no particular pattern which indicates constant variance, homoscedasticity, and a lack of bias. Given these circumstances, it would be reasonable to assume that the quadratic model of fit is suitable. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted linear average monthly ratios versus actual ratios
sns.residplot(x = FossilOilRegRatioPredict, y = pdToListFossilOil, lowess = True, color="g")
plt.suptitle("Predicted linear fossil oil output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice that the lowess line is subtle and that the residuals are spread out; indicating homoscedacity, a lack of bias, and constant variance. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

"""



"""Below is a scatterplot depicting the relationship between the average monthly prices of energy per EUR/MWH and the average monthly outputs of fossil oil."""

modelFossilOil = stats.linregress([306.0204638472033, 319.2395833333333, 319.3337819650067, 338.78133704735376, 332.56720430107526, 319.2294853963839, 360.23387096774195, 323.9139784946237, 343.4916666666667, 323.39112903225805, 346.06388888888887, 330.6514131897712, 337.46505376344084, 297.25431034482756, 294.05248990578735, 259.8875, 277.9153225806452, 289.82916666666665, 286.6900269541779, 283.30645161290323, 281.3861111111111, 276.9959731543624, 271.56944444444446, 276.63978494623655, 279.52284946236557, 291.4017857142857, 302.50740242261105, 261.4902777777778, 291.9206989247312, 299.3930555555556, 308.2002688172043, 306.23521505376345, 310.8013888888889, 287.4187919463087, 303.54305555555555, 293.9260752688172, 285.73924731182797, 295.9002976190476, 288.1265141318977, 257.62916666666666, 280.4502688172043, 285.12083333333334, 281.5450874831763, 283.3333333333333, 296.1361111111111, 291.2993288590604, 269.02150537634407, 272.98333333333335],
  [64.9490188172043,56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881] )







"""The next resource anazlyed is brown fossil coal."""

#Dataframes analyzed by resource
dffossilreg = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Fossil_Brown" : [572.8512960436562, 313.41815476190476, 244.43741588156124, 463.11977715877435, 374.2809139784946, 665.162726008345, 684.2204301075269, 585.7674731182796, 548.0833333333334, 528.0188172043011, 695.2847222222222, 493.4804845222073, 417.9274193548387, 191.66522988505747, 173.20323014804845, 143.57083333333333, 179.002688172043, 175.6, 398.8156123822342, 464.3736559139785, 473.72083333333336, 613.7691275167786, 649.5458333333333, 670.7956989247311, 688.6451612903226, 603.4151785714286, 335.66756393001344, 420.1152777777778, 500.77016129032256, 478.81111111111113, 650.6774193548387, 511.8467741935484, 642.6305555555556, 561.3221476510067, 667.6472222222222, 476.5430107526882, 379.56451612903226, 406.95089285714283, 124.41588156123822, 133.97916666666666, 307.7043010752688, 333.99861111111113, 506.36877523553164, 300.14247311827955, 558.1611111111112, 405.83758389261743, 406.22849462365593, 375.7361111111111],"Dates" : [],})
dffossilreg["Dates"] += ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']
print(dffossilreg)
df_fossilbrown= pd.DataFrame.from_dict(dffossilreg, orient = "columns")
print(df_fossilbrown)
df_fossilbrown["Ratio"] = df_fossilbrown["Fossil_Brown"]/df_fossilbrown["Price"]
pdToList = list(df_fossilbrown["Ratio"])
print(pdToList)

modelFossilBrowncoal = stats.linregress([572.8512960436562, 313.41815476190476, 244.43741588156124, 463.11977715877435, 374.2809139784946, 665.162726008345, 684.2204301075269, 585.7674731182796, 548.0833333333334, 528.0188172043011, 695.2847222222222, 493.4804845222073, 417.9274193548387, 191.66522988505747, 173.20323014804845, 143.57083333333333, 179.002688172043, 175.6, 398.8156123822342, 464.3736559139785, 473.72083333333336, 613.7691275167786, 649.5458333333333, 670.7956989247311, 688.6451612903226, 603.4151785714286, 335.66756393001344, 420.1152777777778, 500.77016129032256, 478.81111111111113, 650.6774193548387, 511.8467741935484, 642.6305555555556, 561.3221476510067, 667.6472222222222, 476.5430107526882, 379.56451612903226, 406.95089285714283, 124.41588156123822, 133.97916666666666, 307.7043010752688, 333.99861111111113, 506.36877523553164, 300.14247311827955, 558.1611111111112, 405.83758389261743, 406.22849462365593, 375.7361111111111],
[64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

"""This is the linear model used for the average monthly fossil brown coal outputs versus the average monthly prices of energy per EUR/MWH."""

#Linear OLS regression
fossil_brown1 = fossil_brown

fossil_brown1 = sm.add_constant(fossil_brown1)
modelFossilBrownreg = sm.OLS(io2, fossil_brown1).fit()
predictionsFossilBrown = modelFossilBrownreg.predict(io21) 


modelFossilBrownreg.summary()
 #OLS Linear Summary Table



modelFossilBrowncoal = stats.linregress([572.8512960436562, 313.41815476190476, 244.43741588156124, 463.11977715877435, 374.2809139784946, 665.162726008345, 684.2204301075269, 585.7674731182796, 548.0833333333334, 528.0188172043011, 695.2847222222222, 493.4804845222073, 417.9274193548387, 191.66522988505747, 173.20323014804845, 143.57083333333333, 179.002688172043, 175.6, 398.8156123822342, 464.3736559139785, 473.72083333333336, 613.7691275167786, 649.5458333333333, 670.7956989247311, 688.6451612903226, 603.4151785714286, 335.66756393001344, 420.1152777777778, 500.77016129032256, 478.81111111111113, 650.6774193548387, 511.8467741935484, 642.6305555555556, 561.3221476510067, 667.6472222222222, 476.5430107526882, 379.56451612903226, 406.95089285714283, 124.41588156123822, 133.97916666666666, 307.7043010752688, 333.99861111111113, 506.36877523553164, 300.14247311827955, 558.1611111111112, 405.83758389261743, 406.22849462365593, 375.7361111111111],
[64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(fossil_brown,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(fossil_brown,io2, "o")
f = lambda x: 	0.039383 *x  + 40.221857
plt.plot(x,f(x), c="orange", label="line of best fit")
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.legend('#')
plt.title(f"R squared: {modelFossilBrowncoal.rvalue**2}")
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly fossil brown coal output') 
plt.show()
There is a moderately positive correlation the average monthly outputs of brown fossil coal and their respective the average monthly prices of energy per EUR/MWH. It appears that as the average monthly price of energy per EUR/MWH increases, the average monthly outputs of brown fossil coal increases as well.The blue dots are the observations and orange line is the linear model of best fit.

print(predictionsFossilBrown)
#Linear OLS Predicted Values

#Linear OLS regression residuals
influencefossilreg = modelFossilBrownreg.get_influence()


standardized_residualsFossilBrown = influencefossilreg.resid_studentized_internal


print(standardized_residualsFossilBrown)

#Predicted OLS linear values versus residual values
sns.residplot(x = predictionsFossilBrown, y= standardized_residualsFossilBrown,lowess = True, color="g") 

plt.suptitle("fossil brown coal residuals from linear model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice that the lowess line is subtle and that the residuals are spread out; indicating homoscedacity, a lack of bias, and constant variance. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly linear fossil brown coal outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictionsFossilBrown, y = fossil_brown, lowess = True, color="g")
#Predicted OLS average monthly linear values versus actual values

"""As one can observe this residual plot, one may notice that the lowess line is subtle and that the observations are spread out; indicating homoscedacity, a lack of bias, and constant variance. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

print(fossil_brown)

"""This is the average monthly logarithmic outputs of fossil brown coal the average monthly prices of energy per EUR/MWH."""

#Logarithmic OLS regressions
Logpricevalues = ((np.log(io2))) 
LogFossilBrownvalues = ((np.log(fossil_brown)))
Log = np.polyfit(np.log(io2), fossil_brown1, 1)
lin2 = LinearRegression()
lin2.fit(np.log(fossil_brown1), io2)
FossilBrown_Log = sm.OLS(io2, fossil_brown1).fit()

FossilBrown_Logpred = FossilBrown_Log.predict(fossil_brown1) 
#OLS Logarithmic summary table
FossilBrown_Log.summary()
#Log
Log = np.polyfit(np.log(fossil_brown), io2, 1)
print(Log)

y = 14.56449676 * LogFossilBrownvalues - 29.7139618

#Logarithmic OLS regression scatterplot
plt.suptitle("Logarithmic average monthly outputs versus average monthly prices of energy per EUR/MWH")
plt.title("R squared : 0.408")
plt.ylabel("Average monthly prices of energy per EUR/MWH")
plt.xlabel("Average monthly outputs")
plt.yscale("log") 
plt.xscale("log")
plt.plot(LogFossilBrownvalues, io2, "o")
plt.plot(LogFossilBrownvalues, y)

plt.xlim([1, 7])

"""The blue dots represent the observations and the orange line is the linear model of best fit.This is a moderate and positive correlation between the average monthly outputs and the average monthly prices of energy per EUR/MWH."""

FossilBrown_Log.summary() #OLS Logarithmic summary table

influenceFossilBrownLog = FossilBrown_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsFossilBrownLog = influenceFossilBrownLog.resid_studentized_internal


print(standardized_residualsFossilBrownLog)

print(FossilBrown_Logpred) # OLS logarithmic predicted values

plt.suptitle("Output residuals from logarithmic model versus predicted monthly average fossil brown coal output") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = FossilBrown_Logpred, y = standardized_residualsFossilBrownLog, lowess = True, color="g")
# OLS Logarithmic average monthly predictions versus residuals

"""As one can observe this residual plot, one may notice the slight hump in the fitted model, which form a nonlinear pattern. The slight hump is too subtle to suggest a different model. In addition, the residuals are spread out without the distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

FossilBrownLogRatioPredict = FossilBrown_Logpred/predictionLog

# OLS Logarithmic average monthly predicted ratios versus residuals
plt.suptitle("Predicted average monthly logarithmic fossil brown coal output to price of energy per EUR/MWH ratio versus respective residuals") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = FossilBrownLogRatioPredict, y = standardized_residualsFossilBrownLog/standardized_residualsPriceLog,lowess = True, color="g")

"""With the exception of a few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted logarithmic average monthly values versus actual values

plt.suptitle("Predicted logarithmic monthly average fossil brown coal outputs per EUR/MWH  versus respective residuals") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = FossilBrown_Logpred, y = fossil_brown, lowess = True, color="g")

"""As one can observe this residual plot, one may notice the positive slope in the fitted model. In addition, the observations are spread out in a distinct pattern, indicating bias and homoscedasticity.It would be reasonable to assume that this model does not fit the data. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#OLS Logarithmic predicted average monthly ratios versus actual ratios
plt.suptitle("Predicted logarithmic monthly average fossil brown coal outputs to EUR/MWH versus respective logarithmic  residuals ") 
plt.xlabel("fossil brown coal Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values")   
plt.legend("..#")
FossilBrownLogRatioPredict = FossilBrown_Logpred/predictionLog 
sns.residplot(x = FossilBrownLogRatioPredict, y = pdToList, lowess = True, color="g")

"""As one can observe this residual plot, one may notice that the lowess line has an arching hump and that the residuals are spread out in a pattern; indicating heteroskedacity and bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

This is the quadratic model used for the average monthly fossil brown output versus the average monthly prices of energy per EUR/MWH.
"""

#Quadratic OLS regression 
from sklearn.preprocessing import PolynomialFeatures
polynomial_features = PolynomialFeatures(degree=2)

modelFossilBrownquad = np.poly1d(np.polyfit(fossil_brown,io2,2))
print(modelFossilBrownquad)

fossil_brown1 = fossil_brown

fossil_brown1 = sm.add_constant(fossil_brown1)
fossil_brown2 = polynomial_features.fit_transform(fossil_brown1)
from sklearn.preprocessing import PolynomialFeatures
  
poly = PolynomialFeatures(degree = 3)
X_poly = poly.fit_transform(fossil_brown1)
  
FossilBrown_Q = poly.fit(X_poly, fossil_brown)
lin2 = LinearRegression()
lin2.fit(X_poly, fossil_brown)
FossilBrown_Quad = sm.OLS(io2, fossil_brown2).fit()

# OLS Predicted Quadratic values
FossilBrown_ypred = FossilBrown_Quad.predict(fossil_brown2) 

#OLS Quadratic Summary Table
FossilBrown_Quad.summary()

#Quadratic Scatterplots
polyline = np.linspace(start = 100, stop =500 , num = 100)
plt.title("R squared : 0.436")
plt.plot(polyline, modelFossilBrownquad(polyline))
plt.scatter(fossil_brown,io2, color = 'blue')
plt.suptitle('Quadratic for average monthly prices of energy per EUR/MWH versus average monthly outputs')
plt.xlabel('Average monthly outputs')
plt.ylabel('Average monthly prices of energy per EUR/MWH')
plt.show()

"""The blue dots represent the observations and the blue line is the quadratic model of best fit.This is a moderate and postive correlation between the average monthly outputs and the average monthly price of energy per EUR/MWH."""

FossilBrown_Quad.summary()

print(FossilBrown_ypred) # OLS quadratic predicted values

influenceFossilBrownquad = FossilBrown_Quad.get_influence() #Quadratic OLS residuals


standardized_residualsFossilBrownquad = influenceFossilBrownquad.resid_studentized_internal

#Quadratic OLS residuals
print(standardized_residualsFossilBrownquad)

#Predicted average monthly OLS quadratic values versus residuals
sns.residplot(x = FossilBrown_ypred, y= standardized_residualsFossilBrownquad,lowess = True, color="g") 


plt.suptitle("fossil brown coal residuals from quadratic model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe, there is a double yet subtle hump along the lowess line in the residual plot. In addition, there is a decreasing trend in the variance which indicates heteroskedasticity and a lack of bias.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly quadratic fossil brown coal outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = FossilBrown_ypred, y = fossil_brown, lowess = True, color="g")
 #Predicted OLS average monthly quadratic values versus actual values

"""As one can observe this residual plot, one may notice that the lowess line has a  arching hump and that the residuals are spread out in a pattern; indicating heteroskedasticity and bias.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

The ratios from the list directly below will be analyzed for seasonality since the output and the respective average monthly price of energy per EUR/MWH are taken into account simultaneously.The  results are the outputs divided by the respective the average monthly prices of energy per EUR/MWH.

If the data is deemed to be stationary based off the given tests below, then that means that seasonality and trends are not factors in the values of the tested data. If the data is deemed to be non stationary, than seasonality and trends are indeed factors after all.
"""

#Dataframes analyzed by resource
dffossilreg = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Fossil_Brown" : [572.8512960436562, 313.41815476190476, 244.43741588156124, 463.11977715877435, 374.2809139784946, 665.162726008345, 684.2204301075269, 585.7674731182796, 548.0833333333334, 528.0188172043011, 695.2847222222222, 493.4804845222073, 417.9274193548387, 191.66522988505747, 173.20323014804845, 143.57083333333333, 179.002688172043, 175.6, 398.8156123822342, 464.3736559139785, 473.72083333333336, 613.7691275167786, 649.5458333333333, 670.7956989247311, 688.6451612903226, 603.4151785714286, 335.66756393001344, 420.1152777777778, 500.77016129032256, 478.81111111111113, 650.6774193548387, 511.8467741935484, 642.6305555555556, 561.3221476510067, 667.6472222222222, 476.5430107526882, 379.56451612903226, 406.95089285714283, 124.41588156123822, 133.97916666666666, 307.7043010752688, 333.99861111111113, 506.36877523553164, 300.14247311827955, 558.1611111111112, 405.83758389261743, 406.22849462365593, 375.7361111111111],"Dates" : [],})
dffossilreg["Dates"] += ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']
print(dffossilreg)
df_fossilbrown= pd.DataFrame.from_dict(dffossilreg, orient = "columns")
print(df_fossilbrown)
df_fossilbrown["Ratio"] = df_fossilbrown["Fossil_Brown"]/df_fossilbrown["Price"]
pdToList = list(df_fossilbrown["Ratio"])
print(pdToList)
#ADF Tests 
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_fossilbrown["Ratio"])


test_result=adfuller(df_fossilbrown["Ratio"])

df_fossilbrown['First Difference'] = df_fossilbrown["Ratio"]- df_fossilbrown["Ratio"].shift(1) # Seasonality values
df_fossilbrown['Seasonal Difference']=df_fossilbrown["Ratio"]- df_fossilbrown["Ratio"].shift(12)
df_fossilbrown.head()

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_fossilbrown["Ratio"])
plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_fossilbrown["Ratio"])
plt.show

df_fossilbrown['Seasonal Difference'].plot() # Seasonality Plot

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in thepartial autocorrelation and autocorrelation plot, indicating that the lags directly beforehand influenced the relationship between average monthly fossil brown coal outputs and the average monthly prices of energy per EUR/MWH.
"""

df_fossilbrown.describe(include = 'all')  # Description table of Dataframes



#Bell Curves 


patientsResults_mean = np.mean(df_fossilbrown["Ratio"])
patientsResults_std = np.std(df_fossilbrown["Ratio"])
 

patientsResultspdf = stats.norm.pdf(df_fossilbrown["Ratio"].sort_values(), patientsResults_mean, patientsResults_std)


plt.plot(df_fossilbrown["Ratio"].sort_values(), patientsResultspdf)
plt.xlim([0,20])  
plt.xlabel("Output to energy price per EUR/MWH", size=15)   
plt.title(f'Skewness for data: {skew(df_fossilbrown["Ratio"])}') 
plt.suptitle("Frequency distribution of output to energy price per EUR/MWH ratios (scaled in decimals)") 
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

#Bell Curves 
patientsResults_mean = np.mean(df_fossilbrown["Fossil_Brown"])
patientsResults_std = np.std(df_fossilbrown["Fossil_Brown"])
 

patientsResultspdf = stats.norm.pdf(df_fossilbrown["Fossil_Brown"].sort_values(), patientsResults_mean, patientsResults_std)


plt.plot(df_fossilbrown["Fossil_Brown"].sort_values(), patientsResultspdf)
plt.xlim([0,1000])  
plt.xlabel("Output in MWH ", size=15) 
plt.title(f'Skewness for data: {skew(df_fossilbrown["Fossil_Brown"])}')    
plt.suptitle("Frequency distribution of output amounts (scaled in decimals) ")
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

"""These bell shaped curves are slighlty skewed to the left. Hence, they have asymmetrical distribution. The blue line in this plot represent the observation values and their likelihood of occurring.

If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.
"""

Fossil_Brown_Ratio_Autocorrelations = sm.tsa.acf(df_fossilbrown["Ratio"],fft=False) #Autocorrelations
print(Fossil_Brown_Ratio_Autocorrelations)

df_fossilbrown['First Difference fossil brown coal Ratio'] = df_fossilbrown["Ratio"]- df_fossilbrown["Ratio"].shift(1) # Seasonality values
df_fossilbrown['Seasonal Difference fossil brown coal Ratio']=df_fossilbrown["Ratio"]- df_fossilbrown["Ratio"].shift(12)

df_fossilbrown.head()

plt.suptitle("Seasonal Difference of average monthly fossil brown coal output to price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_fossilbrown['Seasonal Difference fossil brown coal Ratio'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the average monthly fossil brown output and the average monthly prices of energy per EUR/MWH."""



#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result):
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_fossilbrown['Fossil_Brown'])


test_result=adfuller(df_fossilbrown['Fossil_Brown'])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_fossilbrown["Fossil_Brown"])
plt.suptitle("Autocorrelations of fossil brown coal")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_fossilbrown["Fossil_Brown"])
plt.suptitle("Partialautocorrelations of fossil brown coal")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 
plt.show
Fossil_Brown_Autocorrelations = sm.tsa.acf(df_fossilbrown["Fossil_Brown"], fft=False) #Autocorrelations
print(Fossil_Brown_Autocorrelations)
df_fossilbrown['First Difference'] = df_fossilbrown["Fossil_Brown"]- df_fossilbrown["Fossil_Brown"].shift(1) # Seasonality values
df_fossilbrown['Seasonal Difference']=df_fossilbrown["Fossil_Brown"]- df_fossilbrown["Fossil_Brown"].shift(12)
df_fossilbrown.head()
df_fossilbrown['First Difference fossil brown coal'] = df_fossilbrown["Fossil_Brown"]- df_fossilbrown["Fossil_Brown"].shift(1) # Seasonality values
df_fossilbrown['Seasonal Difference fossil brown coal']=df_fossilbrown["Fossil_Brown"]- df_fossilbrown["Fossil_Brown"].shift(12)
df_fossilbrown.head()
plt.suptitle("Seasonal Difference of average monthly fossil brown coal output")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 

df_fossilbrown['Seasonal Difference fossil brown coal'].plot() # Seasonality Plot

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the autocorrelation plot, indicating that the lags beforehand influenced the average monthly fossil brown coal outputs.
"""

df_fossilbrown.describe(include = 'all')  # Description table of Dataframes

"""Below is the box and whisker plot for the distribution of the average monthly outputs of fossil brown coal and its the average monthly prices of energy per EUR/MWH."""

# Box and Whisker Plot
sns.set(style="darkgrid") 
plt.suptitle('Distribution of average monthly fossil brown coal outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly fossil brown coal outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')

sns.boxplot(x=Rounded_Y, y=[572.8512960436562, 313.41815476190476, 244.43741588156124, 463.11977715877435, 374.2809139784946, 665.162726008345, 684.2204301075269, 585.7674731182796, 548.0833333333334, 528.0188172043011, 695.2847222222222, 493.4804845222073, 417.9274193548387, 191.66522988505747, 173.20323014804845, 143.57083333333333, 179.002688172043, 175.6, 398.8156123822342, 464.3736559139785, 473.72083333333336, 613.7691275167786, 649.5458333333333, 670.7956989247311, 688.6451612903226, 603.4151785714286, 335.66756393001344, 420.1152777777778, 500.77016129032256, 478.81111111111113, 650.6774193548387, 511.8467741935484, 642.6305555555556, 561.3221476510067, 667.6472222222222, 476.5430107526882, 379.56451612903226, 406.95089285714283, 124.41588156123822, 133.97916666666666, 307.7043010752688, 333.99861111111113, 506.36877523553164, 300.14247311827955, 558.1611111111112, 405.83758389261743, 406.22849462365593, 375.7361111111111])
plt.show()

"""This box and whisker plot depicts the frequencies between the distribution of the monthly average output of fossil brown coal produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of fossil brown coal produced, which was in between 300 and 400 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), fossil brown coal output was slighty below 50 units. When the price of energy per EUR/MWH was at its highest, at approximately 79.49 EUR/MWH, fossil brown coal output was slighty below 700 units. At approximately 60.73 EUR/MWH, fossil brown coal produced the highest amount at roughly 700 units.The lowest amount produced, whcih was slightly above 100 units, was at the price of approximently 48.28 EUR/MWH.

"""

plt.suptitle('Distribution of average monthly fossil brown coal outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly fossil brown coal outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')   
  
plt.xlim(30, 80)   
matplotlib.rcParams.update({'font.size': 19}) 
# Stem Plot 
plt.stem(Rounded_Y, fossil_brown)

"""This plot depicts the frequencies between the distribution of the monthly average output of fossil brown coal produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of fossil brown coal produced, which was in between 300 and 400 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), fossil brown coal output was slighty below 50 units. When the price of energy per EUR/MWH was at its highest, at approximately 79.49 EUR/MWH, fossil brown coal output was slighty below 700 units. At approximately 60.73 EUR/MWH, fossil brown coal produced the highest amount at roughly 700 units.The lowest amount produced, whcih was slightly above 100 units, was at the price of approximently 48.28 EUR/MWH.

"""

fossil_brown_Dict = {key: i for i, key in enumerate(fossil_brown)}

def Hist_fossil_brown(fossil_brown_Dict):
    for k, v in fossil_brown.items(): print(f"{v}:{k}") 
print(fossil_brown_Dict)

plt.bar(list(fossil_brown_Dict.values()), fossil_brown_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs of fossil brown coal")
plt.ylabel('Average monthly outputs') 
plt.xlabel('Months') 


matplotlib.rcParams.update({'font.size': 19})
#Histograms
plt.show()



"""The green bars represent the observation value for each respective month. This histogram has significant trenches between month 10 and month 20 as well as in between months 37 and 40, meaning that there were sharp decreases in fossil oil output. In addition, the histogram has a multimodal shape, which means that there wasn't any external factors that led to a singular price increase. However, the price fluctuations within the histogram appear to be seasonal."""

pdtoList_Dict = {key: i for i, key in enumerate(pdToList)}

def Hist_pdtoList(pdtoList_Dict):
    for k, v in pdtoList_Dict.items(): print(f"{v}:{k}") #Histograms
print(pdtoList_Dict)

plt.bar(list(pdtoList_Dict.values()), pdtoList_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs/price ratio of fossil brown coal")
plt.ylabel('Average monthly outputs/price ratio') 
plt.xlabel('Months') 
import matplotlib 
 
matplotlib.rcParams.update({'font.size': 19})

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This  displays a roughly symmetric yet multimodal distribution. It appears that there are deep trenches occurring roughly every ten months, meaning that the output produced per EUR/MWH sharply declined for the time being.It would be fair to assume that this fluctuating pattern is seasonal."""

#OLS predicted quadratic average monthly ratios versus residuals 
FossilBrownQuadRatioPredict = FossilBrown_ypred/ypred 

sns.residplot(x = FossilBrownQuadRatioPredict , y = standardized_residualsFossilBrownquad/standardized_residualsPriceQuad , lowess = True, color="g")


plt.suptitle("Predicted quadratic fossil brown coal output to EUR/MWH versus respective quadratic model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")


plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Predicted OLS linear average monthly ratios versus residuals
FossilBrownRegRatioPredict = predictionsFossilBrown/predictions

sns.residplot(x = FossilBrownRegRatioPredict, y = standardized_residualsFossilBrown/standardized_residualsPricereg, lowess = True, color="g")
plt.suptitle("Predicted linear fossil brown coal output to EUR/MWH versus respective linear model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted linear average monthly ratios versus actual ratios
sns.residplot(x = FossilBrownRegRatioPredict, y = pdToList, lowess = True, color="g")
plt.suptitle("Predicted linear fossil brown coal output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice a hump forming a nonlinear pattern. However, the residuals are spread out without any distinct pattern which indicates homoskedascity, a lack of bias and constant variance.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#OLS predicted quadratic average monthly ratios versus actual ratios 

sns.residplot(x = FossilBrownQuadRatioPredict , y = pdToList, lowess = True, color="g")
plt.suptitle("Predicted quadratic fossil brown coal output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice the slight hump in the fitted model, which form a nonlinear pattern. The slight hump is too subtle to suggest a different model. In addition, the observations are spread out without the distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

Below is a scatterplot depicting the relationship between the average monthly prices of energy per EUR/MWH and the average monthly outputs of fossil brown coal.
"""

modelFossilBrowncoal = stats.linregress([572.8512960436562, 313.41815476190476, 244.43741588156124, 463.11977715877435, 374.2809139784946, 665.162726008345, 684.2204301075269, 585.7674731182796, 548.0833333333334, 528.0188172043011, 695.2847222222222, 493.4804845222073, 417.9274193548387, 191.66522988505747, 173.20323014804845, 143.57083333333333, 179.002688172043, 175.6, 398.8156123822342, 464.3736559139785, 473.72083333333336, 613.7691275167786, 649.5458333333333, 670.7956989247311, 688.6451612903226, 603.4151785714286, 335.66756393001344, 420.1152777777778, 500.77016129032256, 478.81111111111113, 650.6774193548387, 511.8467741935484, 642.6305555555556, 561.3221476510067, 667.6472222222222, 476.5430107526882, 379.56451612903226, 406.95089285714283, 124.41588156123822, 133.97916666666666, 307.7043010752688, 333.99861111111113, 506.36877523553164, 300.14247311827955, 558.1611111111112, 405.83758389261743, 406.22849462365593, 375.7361111111111],
[64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(fossil_brown,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(fossil_brown,io2, "o")
f = lambda x: 	0.039383 *x  + 40.221857
plt.plot(x,f(x), c="orange", label="line of best fit")
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.legend('#')
plt.title(f"R squared: {modelFossilBrowncoal.rvalue**2}")
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly fossil brown coal output') 
plt.show()
There is a moderately positive correlation the average monthly outputs of brown fossil coal and their respective the average monthly prices of energy per EUR/MWH. It appears that as the average monthly price of energy per EUR/MWH increases, the average monthly outputs of brown fossil coal increases as well.The blue dots are the observations and orange line is the linear model of best fit.



"""The next resource analyzed was hydro reservoir power."""



modelhydrowater = stats.linregress([2572.3396998635744, 3712.690476190476, 3081.620457604307, 2516.0125348189417, 2798.184139784946, 2531.1682892906815, 2412.5255376344085, 1963.0631720430108, 2261.1569444444444, 2276.9193548387098, 2404.3902777777776, 1943.42799461642, 4075.5846774193546, 4881.568965517241, 3901.5450874831763, 5119.295833333334, 4581.743279569892, 2983.7930555555554, 2556.6971736204578, 2460.0201612903224, 2303.461111111111, 2500.489932885906, 2501.2972222222224, 2805.2970430107525, 2156.951612903226, 1874.8497023809523, 2348.4589502018844, 1611.4152777777779, 1639.616935483871, 1448.6444444444444, 1290.983870967742, 1260.6908602150538, 1570.5097222222223, 1229.2845637583894, 1371.338888888889, 1452.9569892473119, 2271.896505376344, 2773.2038690476193, 4378.419919246298, 4159.898611111111, 2931.19623655914, 3362.5291666666667, 2789.228802153432, 2296.0295698924733, 2267.641666666667, 2172.1919463087247, 2763.0241935483873, 2665.9],
[64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

"""This is the linear model used for the average monthly hydro reservoir outputs versus the average monthly prices of energy per EUR/MWH."""

#Dataframes analyzed by resource
dfhydro = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Hydro" : [2572.3396998635744, 3712.690476190476, 3081.620457604307, 2516.0125348189417, 2798.184139784946, 2531.1682892906815, 2412.5255376344085, 1963.0631720430108, 2261.1569444444444, 2276.9193548387098, 2404.3902777777776, 1943.42799461642, 4075.5846774193546, 4881.568965517241, 3901.5450874831763, 5119.295833333334, 4581.743279569892, 2983.7930555555554, 2556.6971736204578, 2460.0201612903224, 2303.461111111111, 2500.489932885906, 2501.2972222222224, 2805.2970430107525, 2156.951612903226, 1874.8497023809523, 2348.4589502018844, 1611.4152777777779, 1639.616935483871, 1448.6444444444444, 1290.983870967742, 1260.6908602150538, 1570.5097222222223, 1229.2845637583894, 1371.338888888889, 1452.9569892473119, 2271.896505376344, 2773.2038690476193, 4378.419919246298, 4159.898611111111, 2931.19623655914, 3362.5291666666667, 2789.228802153432, 2296.0295698924733, 2267.641666666667, 2172.1919463087247, 2763.0241935483873, 2665.9],"Dates" : ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfhydro)
df_hydro= pd.DataFrame.from_dict(dfhydro, orient = "columns")
print(df_hydro)
df_hydro["Ratio"] = df_hydro["Hydro"]/df_hydro["Price"]
pdToListHydro = list(df_hydro["Ratio"])
print(pdToListHydro)

"""This is the linear model used for the average monthly hydro reservoir outputs versus the average monthly prices of energy per EUR/MWH."""

#Linear OLS regression
hydro1 = hydro_water
hydro1 = sm.add_constant(hydro1)
modelhydropowerreg = sm.OLS(io2, hydro1).fit()
predictionshydropower = modelhydropowerreg.predict(hydro1) 


modelhydropowerreg.summary() 
#OLS Linear Summary Table



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(hydro_water,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(hydro_water,io2,"o")
f = lambda x: 	-0.006186    *x + 73.998036
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.title(f"R squared: {modelhydrowater.rvalue**2}")
plt.legend("#")
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly hydro output') 
plt.show()

The blue dots represent the observations and the orange line is the linear model of best fit.There is a moderately negative correlation between the output and the respective the average monthly prices of energy per EUR/MWH. As the price decreases, the output increases.The blue dots are the observations and orange line is the linear model of best fit.

print(predictionshydropower)
#Linear OLS Predicted Values

#Linear OLS regression residuals
influenceHydroreg = modelhydropowerreg.get_influence()


standardized_residualsHydro = influenceHydroreg.resid_studentized_internal


print(standardized_residualsHydro)

plt.suptitle("Predicted average monthly linear hydro outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictionshydropower, y = hydro_water, lowess = True, color="g")
#Predicted OLS average monthly linear values versus actual values

"""With the exception of a few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Predicted OLS linear values versus residual values
sns.residplot(x = predictionshydropower, y =standardized_residualsHydro, lowess = True, color="g")

plt.suptitle("Hydro power residuals from linear model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice the hump in the fitted model, which form a nonlinear pattern, indicating bias and homoscedasticity.In addition, the residuals are spread out within the distinct pattern, meaning that a nonlinear model could be a better fit than a linear model.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Logarithmic OLS regressions
Logpricevalues = ((np.log(io2))) 
Loghydrovalues = ((np.log(hydro_water)))
Log = np.polyfit(np.log(io2), hydro1, 1)
lin2 = LinearRegression()
lin2.fit(np.log(hydro1), io2)
Hydro_Log = sm.OLS(io2, hydro1).fit()

Hydro_Logpred = Hydro_Log.predict(hydro1) 

#OLS Logarithmic summary table
Hydro_Log.summary() 
#Log
Log = np.polyfit(np.log(hydro_water), io2, 1)
print(Log)

y = -13.40692102 * Loghydrovalues + 162.49392679

#Logarithmic OLS regression scatterplot
plt.suptitle("Logarithmic average monthly outputs versus average monthly prices of energy per EUR/MWH")
plt.title("R squared : 0.325")
plt.ylabel("Average monthly prices of energy per EUR/MWH")
plt.xlabel("Average monthly outputs")
plt.yscale("log") 
plt.xscale("log")
plt.plot(Loghydrovalues, io2, "o")
plt.plot(Loghydrovalues, y)

"""The blue dots represent the observations and the orange line is the linear model of best fit.This is a moderate and positive correlation between the average monthly outputs and the average monthly prices of energy per EUR/MWH.The blue dots represent the observations and the orange line is the linear model of best fit."""

Hydro_Log.summary() #OLS Logarithmic summary table

influenceHydroLog = Hydro_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsHydroLog = influenceHydroLog.resid_studentized_internal


print(standardized_residualsHydroLog)

print(Hydro_Logpred) # OLS logarithmic predicted values

plt.suptitle("Predicted average monthly hydro output to EUR/MWH ratio versus actual ratios") 
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values")   
plt.legend("..#")
HydroLogRatioPredict = Hydro_Logpred/predictionLog 
sns.residplot(x = HydroLogRatioPredict, y = pdToListHydro, lowess = True, color="g")
  #OLS Logarithmic predicted average monthly ratios versus actual ratios



"""With the exception of a few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predictions versus residuals
plt.suptitle("Residuals from logarithmic hydro model versus predicted average monthly hydro outputs") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = Hydro_Logpred, y =standardized_residualsHydroLog, lowess = True, color="g")

"""As one can observe this residual plot, one may notice that the lowess line has an arching hump; indicating heteroskedasticity, decreasing variance, and bias.This would indicate that this model does not fit the data.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predicted ratios versus residuals

plt.suptitle("Predicted average monthly hydro outputs to prices of energy per EUR/MWH ratio versus respective hydro residuals ") 
plt.xlabel("Predicted outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values")   
plt.legend("..#")
sns.residplot(x = HydroLogRatioPredict, y = standardized_residualsHydroLog/standardized_residualsPriceLog,lowess = True, color="g")

"""With the exception of a few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted logarithmic average monthly values versus actual values
plt.suptitle("Predicted average monthly logarithmic hydro outputs per EUR/MWH versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = Hydro_Logpred, y = hydro_water, lowess = True, color="g")

"""With the exception of a few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

influenceHydroLog = Hydro_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsHydroLog = influenceHydroLog.resid_studentized_internal


print(standardized_residualsHydroLog)

"""This is the quadratic model used for the average monthly hydro reservior outputs versus the average monthly prices of energy per EUR/MWH."""

#Quadratic OLS regression 
from sklearn.preprocessing import PolynomialFeatures
polynomial_features = PolynomialFeatures(degree=2)

modelHydroquad = np.poly1d(np.polyfit(hydro_water,io2,2))
print(modelHydroquad)


hydro1 = hydro_water
hydro1 = sm.add_constant(hydro1)
hydro2 = polynomial_features.fit_transform(hydro1)
from sklearn.preprocessing import PolynomialFeatures
  
poly = PolynomialFeatures(degree = 3)
X_poly = poly.fit_transform(hydro1)
  
Hydro_Q = poly.fit(X_poly, hydro_water)
lin2 = LinearRegression()
lin2.fit(X_poly, hydro_water)
Hydro_Quad = sm.OLS(io2, hydro2).fit()

# OLS Predicted Quadratic values
Hydro_ypred = Hydro_Quad.predict(hydro2) 

#OLS Quadratic Summary Table
Hydro_Quad.summary()

#Quadratic Scatterplots
polyline = np.linspace(start = 0, stop = 100 , num = 10)
plt.title("R squared : 0.498")
plt.plot(polyline, modelHydroquad(polyline))
plt.scatter(hydro_water,io2, color = 'blue')
plt.suptitle('Quadratic average monthly hydro outputs versus average monthly prices of energy per EUR/MWH')
plt.xlabel('Average monthly outputs ')
plt.ylabel('Average monthly prices of energy per EUR/MWH')
plt.show()

"""The blue dots represent the observations and the orange line is the linear model of best fit.This is a moderate and postive correlation between the average monthly outputs and the average monthly price of energy per EUR/MWH."""



Hydro_Quad.summary()

print(Hydro_ypred) # OLS quadratic predicted values

influenceHydroQuad = Hydro_Quad.get_influence() #Quadratic OLS residuals


standardized_residualsHydroQuad = influenceHydroQuad.resid_studentized_internal

print(standardized_residualsHydroQuad)


 #Predicted average monthly OLS quadratic values versus residuals
sns.residplot(x = Hydro_ypred , y = standardized_residualsHydroQuad, lowess = True, color="g")


plt.suptitle("Hydro power residuals from quadratic model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice that the lowess line has a slight hump and that the residuals are clustered on the right side; indicating an increasing trend in variance, heteroskedasticity and bias. This indicates that the model does not fit the data.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

print(standardized_residualsHydroQuad)

plt.suptitle("Predicted average monthly quadratic Hydro outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = Hydro_ypred, y = hydro_water, lowess = True, color="g")
 #Predicted OLS average monthly quadratic values versus actual values

"""As one can observe this residual plot, one may notice some sharp spikes in the fitted model, which form a nonlinear pattern. However, the observations are spread out in a "C" shaped pattern; indicating heteroskedasticity and bias.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

If the data is deemed to be stationary based off the given tests below, then that means that seasonality and trends are not factors in the values of the tested data. If the data is deemed to be non stationary, than seasonality and trends are indeed factors after all.
"""

#Dataframes analyzed by resource
dfhydro = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Hydro" : [2572.3396998635744, 3712.690476190476, 3081.620457604307, 2516.0125348189417, 2798.184139784946, 2531.1682892906815, 2412.5255376344085, 1963.0631720430108, 2261.1569444444444, 2276.9193548387098, 2404.3902777777776, 1943.42799461642, 4075.5846774193546, 4881.568965517241, 3901.5450874831763, 5119.295833333334, 4581.743279569892, 2983.7930555555554, 2556.6971736204578, 2460.0201612903224, 2303.461111111111, 2500.489932885906, 2501.2972222222224, 2805.2970430107525, 2156.951612903226, 1874.8497023809523, 2348.4589502018844, 1611.4152777777779, 1639.616935483871, 1448.6444444444444, 1290.983870967742, 1260.6908602150538, 1570.5097222222223, 1229.2845637583894, 1371.338888888889, 1452.9569892473119, 2271.896505376344, 2773.2038690476193, 4378.419919246298, 4159.898611111111, 2931.19623655914, 3362.5291666666667, 2789.228802153432, 2296.0295698924733, 2267.641666666667, 2172.1919463087247, 2763.0241935483873, 2665.9],"Dates" : ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfhydro)
df_hydro= pd.DataFrame.from_dict(dfhydro, orient = "columns")
print(df_hydro)
df_hydro["Ratio"] = df_hydro["Hydro"]/df_hydro["Price"]
pdToListHydro = list(df_hydro["Ratio"])
print(pdToListHydro)
#ADF Tests 
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

test_result=adfuller(df_hydro["Ratio"])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_hydro["Ratio"])
plt.suptitle("Autocorrelations of Hydro Ratio")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_hydro["Ratio"])
plt.suptitle("Partialatocorrelations of Hydro Ratio")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 

plt.show



df_hydro['First Difference Ratio'] = df_hydro["Ratio"]- df_hydro["Ratio"].shift(1) # Seasonality values
df_hydro['Seasonal Difference Ratio']=df_hydro["Ratio"]- df_hydro["Ratio"].shift(12)
df_hydro.head()

Hydro_Ratio_Autocorrelations = sm.tsa.acf(df_hydro["Ratio"],fft=False) #Autocorrelations
print(Hydro_Ratio_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the autocorrelation and partialautocorrelation plot, indicating that the lags directly beforehand influenced the relationship between average monthly hydro reservoir outputs and the average monthly prices of energy per EUR/MWH.
"""

df_hydro.describe(include = 'all')  # Description table of Dataframes

plt.suptitle("Seasonal Difference of average monthly hydro output to price of energy per EUR/MWH ratio")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 

df_hydro['Seasonal Difference Ratio'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the average monthly outputs and the average monthly prices of energy per EUR/MWH."""

#Bell Curves 


hydroResults_mean = np.mean(df_hydro["Ratio"])
hydroResults_std = np.std(df_hydro["Ratio"])
 

hydroResultspdf = stats.norm.pdf(df_hydro["Ratio"].sort_values(), hydroResults_mean, hydroResults_std)


plt.plot(df_hydro["Ratio"].sort_values(), hydroResultspdf)
plt.xlim([0,200])  
plt.xlabel("Output to energy price per EUR/MWH", size=15)    
plt.title(f'Skewness for data: {skew(df_hydro["Ratio"])}') 
plt.suptitle("Frequency distribution of output to energy price per EUR/MWH ratios (scaled in decimals)")
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

#Bell Curves 
hydroResults_mean = np.mean(df_hydro["Hydro"])
hydroResults_std = np.std(df_hydro["Hydro"])
 

hydroResultspdf = stats.norm.pdf(df_hydro["Hydro"].sort_values(), hydroResults_mean, hydroResults_std)


plt.plot(df_hydro["Hydro"].sort_values(), hydroResultspdf)
plt.xlim([0,10000])  
plt.xlabel("Output in MWH ", size=15)   
plt.xlabel("Output to energy price per EUR/MWH", size=15)    
plt.title(f'Skewness for data: {skew(df_hydro["Hydro"])}') 
plt.suptitle("Frequency distribution of output amounts (scaled in decimals) " )
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

"""These bell shaped curves are both skewed to the right. Hence, they have a  asymmetrical distribution. The blue line in this plot represent the observation values and their likelihood of occurring.

If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.

The results from the list directly above will be analyzed for seasonality since the output and the respective average monthly price of energy per EUR/MWH are taken into account simultaneously.The  results are the outputs divided by the respective the average monthly prices of energy per EUR/MWH.
"""





#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result):
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_hydro['Hydro'])


test_result=adfuller(df_hydro['Hydro'])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_hydro["Hydro"])
plt.suptitle("Autocorrelations of Hydro")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 


plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_hydro["Hydro"])
plt.suptitle("Partialatocorrelations of Hydro")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 

plt.show
Hydro_Autocorrelations = sm.tsa.acf(df_hydro["Hydro"], fft=False) #Autocorrelations
print(Hydro_Autocorrelations)
df_hydro['First Difference'] = df_hydro["Hydro"]- df_hydro["Hydro"].shift(1) # Seasonality values
df_hydro['Seasonal Difference']=df_hydro["Hydro"]- df_hydro["Hydro"].shift(12)
df_hydro.head()



"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the autocorrelation and partial autocorrelation plot, indicating that the lags directly beforehand influenced the average monthly hydro reservoir outputs.
"""

df_hydro['First Difference'] = df_hydro["Ratio"]- df_hydro["Ratio"].shift(1) # Seasonality values
df_hydro['Seasonal Difference']=df_hydro["Ratio"]- df_hydro["Ratio"].shift(12)
df_hydro.head()

plt.suptitle("Seasonal Difference of average monthly Hydro output to price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_hydro['Seasonal Difference'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted in the average monthly hydro reservoir outputs."""

df_hydro.describe(include = 'all')  # Description table of Dataframes

"""Below is the box and whisker plot for the distribution of the average monthly outputs of hydro power and its the average monthly prices of energy per EUR/MWH."""

# Box and Whisker Plot
sns.set(style="darkgrid") 

plt.suptitle('Distribution of average hydro power outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly hydro power outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')
sns.boxplot(x=Rounded_Y, y=[2572.3396998635744, 3712.690476190476, 3081.620457604307, 2516.0125348189417, 2798.184139784946, 2531.1682892906815, 2412.5255376344085, 1963.0631720430108, 2261.1569444444444, 2276.9193548387098, 2404.3902777777776, 1943.42799461642, 4075.5846774193546, 4881.568965517241, 3901.5450874831763, 5119.295833333334, 4581.743279569892, 2983.7930555555554, 2556.6971736204578, 2460.0201612903224, 2303.461111111111, 2500.489932885906, 2501.2972222222224, 2805.2970430107525, 2156.951612903226, 1874.8497023809523, 2348.4589502018844, 1611.4152777777779, 1639.616935483871, 1448.6444444444444, 1290.983870967742, 1260.6908602150538, 1570.5097222222223, 1229.2845637583894, 1371.338888888889, 1452.9569892473119, 2271.896505376344, 2773.2038690476193, 4378.419919246298, 4159.898611111111, 2931.19623655914, 3362.5291666666667, 2789.228802153432, 2296.0295698924733, 2267.641666666667, 2172.1919463087247, 2763.0241935483873, 2665.9])
plt.show()

"""This box and whisker plot depicts the frequencies between the distribution of the monthly average output of fossil brown coal produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of hydro power produced, which was in between 2000 and 2500 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH. When the price of energy per EUR/MWH was at its lowest (at approximently 32.62 euros per MWH), hydro power output was at its highest, at slightly above 5000 units.  At approximately 60.73 EUR/MWH, hydropower produced the most units at roughly 700 units.The lowest amount produced, which was slightly above 1000 units, was at the price of approximently 63.93 EUR/MWH."""

plt.xlabel('Average monthly price of energy per EUR/MWH')   
  
plt.xlim(30, 80)   
plt.suptitle('Distribution of average hydro power outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly hydro power outputs')

  
# Stem Plot 
plt.stem(Rounded_Y, hydro_water)

"""This plot depicts the frequencies between the distribution of the monthly average output of fossil brown coal produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of hydro power produced, which was in between 2000 and 2500 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH. When the price of energy per EUR/MWH was at its lowest (at approximently 32.62 euros per MWH), hydro power output was at its highest, at slightly above 5000 units.  At approximately 60.73 EUR/MWH, hydropower produced the most units at roughly 700 units.The lowest amount produced, which was slightly above 1000 units, was at the price of approximently 63.93 EUR/MWH. Each blue dot at the end of the line respents an observation."""

#Histograms
hydro_water_Dict = {key: i for i, key in enumerate(hydro_water)}

def Hist_hydro_water(hydro_water_Dict):
    for k, v in hydro_water_Dict.items(): print(f"{v}:{k}")
print(hydro_water_Dict)

plt.bar(list(hydro_water_Dict.values()), hydro_water_Dict.keys(), color='g') 
print(dicDates)
plt.show()





"""The green bars represent the observation value for each respective month. This histogram is  multimodal, containing fluctuating patterns of gradual decrease in the average monthly outputs followed by a sudden increase in the average monthly outputs. This histogram is multimodal; there isn't an indication of a singular external factor increasing the average monthly outputs. """

pdToListHydro_Dict = {key: i for i, key in enumerate(pdToListHydro)}

def Hist_pdtoListHydro_water(pdToListHydro_Dict):
    for k, v in pdToListHydro_Dict.items(): print(f"{v}:{k}") #Histograms
print(pdToListHydro_Dict)

plt.bar(list(pdToListHydro_Dict.values()), pdToListHydro_Dict.keys(), color='g') 
print(dicDates)
plt.show()

"""The green bars represent the observation value for each respective month. This histogram is  bimodal in its distribution, with sharp increases in the output produced per EUR/MWH that always followed by gradual declines.

Below is a scatterplot depicting the relationship between the average monthly price of energy per EUR/MWH and the average monthly outputs of hydro power.
"""



modelhydrowater = stats.linregress([2572.3396998635744, 3712.690476190476, 3081.620457604307, 2516.0125348189417, 2798.184139784946, 2531.1682892906815, 2412.5255376344085, 1963.0631720430108, 2261.1569444444444, 2276.9193548387098, 2404.3902777777776, 1943.42799461642, 4075.5846774193546, 4881.568965517241, 3901.5450874831763, 5119.295833333334, 4581.743279569892, 2983.7930555555554, 2556.6971736204578, 2460.0201612903224, 2303.461111111111, 2500.489932885906, 2501.2972222222224, 2805.2970430107525, 2156.951612903226, 1874.8497023809523, 2348.4589502018844, 1611.4152777777779, 1639.616935483871, 1448.6444444444444, 1290.983870967742, 1260.6908602150538, 1570.5097222222223, 1229.2845637583894, 1371.338888888889, 1452.9569892473119, 2271.896505376344, 2773.2038690476193, 4378.419919246298, 4159.898611111111, 2931.19623655914, 3362.5291666666667, 2789.228802153432, 2296.0295698924733, 2267.641666666667, 2172.1919463087247, 2763.0241935483873, 2665.9],
[64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(hydro_water,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(hydro_water,io2,"o")
f = lambda x: 	-0.006186    *x + 73.998036
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.title(f"R squared: {modelhydrowater.rvalue**2}")
plt.legend("#")
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly hydro output') 
plt.show()

The blue dots represent the observations and the orange line is the linear model of best fit.There is a moderately negative correlation between the output and the respective the average monthly prices of energy per EUR/MWH. As the price decreases, the output increases.The blue dots are the observations and orange line is the linear model of best fit.

#OLS predicted quadratic average monthly ratios versus residuals
HydroQuadRatioPredict  = Hydro_ypred/ypred 

sns.residplot(x = HydroQuadRatioPredict , y = standardized_residualsHydroQuad/standardized_residualsPriceQuad , lowess = True, color="g")

plt.suptitle("Predicted quadratic hydro output to EUR/MWH versus respective quadratic model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Predicted OLS linear average monthly ratios versus residuals
HydroRegRatioPredict = predictionshydropower/predictions

sns.residplot(x = HydroRegRatioPredict, y = standardized_residualsHydro/standardized_residualsPricereg, lowess = True, color="g")
plt.suptitle("Predicted linear hydro power output to EUR/MWH versus respective linear model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#OLS predicted quadratic average monthly ratios versus actual ratios 
sns.residplot(x = HydroQuadRatioPredict , y = pdToListHydro, lowess = True, color="g")
plt.suptitle("Predicted quadratic hydro power output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted linear average monthly ratios versus actual ratios
plt.suptitle("Predicted linear hydro power output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

sns.residplot(x = HydroRegRatioPredict, y = pdToListHydro, lowess = True, color="g")

"""As one can observe this residual plot, one may notice the  hump in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

The next resource analyzed was nuclear energy.
"""

nuclear1 = nuclear 

nuclear1 = sm.add_constant(nuclear1)

#Dataframes analyzed by resource
dfnuclear = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Nuclear" : [6665.969986357435, 6681.1235119047615, 6687.913862718708, 6068.16991643454, 5403.817204301075, 5659.276773296245, 6483.623655913979, 6437.845430107527, 6466.175, 5854.012096774193, 5973.075, 6626.029609690444, 6223.8494623655915, 6159.264367816092, 6699.888290713325, 6706.406944444445, 5714.009408602151, 6647.4638888888885, 6628.9220430107525, 6633.3494623655915, 6675.7555555555555, 6576.6859060402685, 5534.297222222222, 6325.970430107527, 6769.916666666667, 6739.267857142857, 6755.951547779273, 6676.383333333333, 5561.240591397849, 6063.859722222222, 6117.403225806452, 6675.846774193548, 6427.688888888889, 6003.754362416107, 5565.216666666666, 6815.138440860215, 6723.689516129032, 6429.3735119047615, 6091.685060565276, 5504.175, 5465.200268817204, 5603.227777777778, 6121.515477792732, 6655.32123655914, 6621.998611111111, 6539.120805369127, 5821.1518817204305, 5403.497222222222],"Dates": ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfnuclear)
df_nuclear= pd.DataFrame.from_dict(dfnuclear, orient = "columns")
print(df_nuclear)
df_nuclear["Ratio"] = df_nuclear["Nuclear"]/df_nuclear["Price"]
pdToListNuclear = list(df_nuclear["Ratio"])
print(pdToListNuclear)

"""This is the logarithmic average monthly nuclear outputs verusus the average monthly prices of eneregy per EUR/MWH."""

#Logarithmic OLS regressions
Logpricevalues = ((np.log(io2))) 
Lognuclearvalues = ((np.log(nuclear)))
Log = np.polyfit(np.log(io2), nuclear1, 1)
lin2 = LinearRegression()
lin2.fit(np.log(nuclear1), io2)
Nuclear_Log = sm.OLS(io2, nuclear1).fit()

Nuclear_Logpred = Nuclear_Log.predict(nuclear1) 
#OLS Logarithmic summary table
Nuclear_Log.summary() 
#Log
Log = np.polyfit(np.log(nuclear), io2, 1)
print(Log)

y = -9.05428682 * Lognuclearvalues + 136.99359892

#Logarithmic OLS regression scatterplot
plt.suptitle("Logarithmic average monthly outputs versus average monthly prices of energy per EUR/MWH")
plt.title("R squared : 0.004")
plt.ylabel("Average monthly prices of energy per EUR/MWH")
plt.xlabel("Average monthly outputs")
plt.yscale("log") 
plt.xscale("log")
plt.plot(Lognuclearvalues, io2, "o")
plt.plot(Lognuclearvalues, y)

"""This is a extremely weak and positive correlation between the average monthly outputs and the average monthly prices of energy per EUR/MWH.The blue dots represent the observations and the orange line represents the logarithmic model of best fit."""

influenceNuclearLog = Nuclear_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsNuclearLog = influenceNuclearLog.resid_studentized_internal


print(standardized_residualsNuclearLog)

print(Nuclear_Logpred) # OLS logarithmic predicted values

plt.suptitle("Predicted average monthly nuclear output to EUR/MWH versus respective logarithmic  residuals") 
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
NuclearLogRatioPredict = Nuclear_Logpred/predictionLog    
sns.residplot(x = NuclearLogRatioPredict, y = pdToListNuclear, lowess = True, color="g")
  #OLS Logarithmic predicted average monthly ratios versus actual ratios

"""As one can observe, there is a decreasing trend in the variance of the residual values versus the actual values. This indicates that there is heteroskedasticity and no bias. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted nuclear residuals from model versus predicted average monthly logarithmic outputs") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = Nuclear_Logpred, y = standardized_residualsNuclearLog, lowess = True, color="g")
# OLS Logarithmic average monthly predictions versus residuals

"""As one can observe this residual plot, one may notice an arching hump in the fitted model, which forms a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias, and homoscedasticity. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predicted ratios versus residuals

plt.suptitle("Predicted average monthly logarithmic nuclear output to price of energy per EUR/MWH ratio versus respective residuals") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values") 
plt.legend("..#")
sns.residplot(x = NuclearLogRatioPredict, y = standardized_residualsNuclearLog/standardized_residualsPriceLog, lowess = True, color="g") #Predicted price or actual price versus residuals for Logarithmic modelslowess = True, color ="g")

"""With the exception of few heteroskedastic outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias otherwise. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted logarithmic average monthly values versus actual values
plt.suptitle("Predicted average monthly logarithmic nuclear outputs per EUR/MWH  versus actual values ") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = Nuclear_Logpred, y = nuclear, lowess = True, color="g")



"""With the exception of few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

influenceNuclearLog = Nuclear_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsNuclearLog = influenceNuclearLog.resid_studentized_internal


print(standardized_residualsNuclearLog)

"""This is the linear model used for the average monthly nuclear output versus the average monthly prices of energy per EUR/MWH."""



modelnuclear = stats.linregress( [6665.969986357435, 6681.1235119047615, 6687.913862718708, 6068.16991643454, 5403.817204301075, 5659.276773296245, 6483.623655913979, 6437.845430107527, 6466.175, 5854.012096774193, 5973.075, 6626.029609690444, 6223.8494623655915, 6159.264367816092, 6699.888290713325, 6706.406944444445, 5714.009408602151, 6647.4638888888885, 6628.9220430107525, 6633.3494623655915, 6675.7555555555555, 6576.6859060402685, 5534.297222222222, 6325.970430107527, 6769.916666666667, 6739.267857142857, 6755.951547779273, 6676.383333333333, 5561.240591397849, 6063.859722222222, 6117.403225806452, 6675.846774193548, 6427.688888888889, 6003.754362416107, 5565.216666666666, 6815.138440860215, 6723.689516129032, 6429.3735119047615, 6091.685060565276, 5504.175, 5465.200268817204, 5603.227777777778, 6121.515477792732, 6655.32123655914, 6621.998611111111, 6539.120805369127, 5821.1518817204305, 5403.497222222222], [64.9490188172043,56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881] )

#Linear OLS regression
nuclear1 = nuclear 

nuclear1 = sm.add_constant(nuclear1)
modelnuclearreg = sm.OLS(io2, nuclear1).fit()
predictionsnuclear = modelnuclearreg.predict(nuclear1) 


modelnuclearreg.summary() 
#OLS Linear Summary Table



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(nuclear,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(nuclear,io2, "o")
plt.title(f"R squared: {modelnuclear.rvalue**2}")
f = lambda x: 	-0.001453    *x + 66.961236
plt.plot(x,f(x), c="orange", label="line of best fit")
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.legend("#")
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly nuclear output') 
plt.show()

There is a very weak yet positive correlation between the output and their average monthly price per EUR/MWH. The blue dots are the observations and orange line is the linear model of best fit.

#Linear OLS regression residuals
influenceNuclearreg = modelnuclearreg.get_influence()


standardized_residualsNuclear = influenceNuclearreg.resid_studentized_internal


print(standardized_residualsNuclear)

print(predictionsnuclear)
#Linear OLS Predicted Values

#Predicted OLS linear values versus residual values
sns.residplot(x = predictionsnuclear, y = standardized_residualsNuclear, lowess = True, color ="g")

plt.suptitle("Nuclear residuals from linear model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""



"""This is the quadratic model used for the average monthly nuclear output versus the average monthly prices of energy per EUR/MWH."""

#Quadratic OLS regression 
from sklearn.preprocessing import PolynomialFeatures
polynomial_features = PolynomialFeatures(degree=2)

modelNuclearquad = np.poly1d(np.polyfit(nuclear,io2,2))
print(modelNuclearquad)

nuclear1 = nuclear 

nuclear1 = sm.add_constant(nuclear1)
nuclear2 = polynomial_features.fit_transform(nuclear1)
from sklearn.preprocessing import PolynomialFeatures
  
poly = PolynomialFeatures(degree = 3)
X_poly = poly.fit_transform(nuclear1)
  
Nuclear_Q = poly.fit(X_poly, io2)
lin2 = LinearRegression()
lin2.fit(X_poly, io2)
Nuclear_Quad = sm.OLS(io2, nuclear2).fit()

# OLS Predicted Quadratic values
Nuclear_ypred = Nuclear_Quad.predict(nuclear2) 

#OLS Quadratic Summary Table
Nuclear_Quad.summary()

#Quadratic Scatterplots
polyline = np.linspace(start = 0, stop =100 , num = 100)
plt.plot(polyline, modelNuclearquad(polyline))
plt.scatter(nuclear,io2, color = 'blue')
plt.title("R squared : 0.006")
plt.suptitle('Quadratic for average monthly outputs of nuclear power versus average monthly prices of energy per EUR/MWH')
plt.xlabel('Average monthly outputs of nuclear power ')
plt.ylabel('Average monthly prices of energy per EUR/MWH')
plt.show()







influenceNuclearquad = Nuclear_Quad.get_influence() #Quadratic OLS residuals


standardized_residualsNuclearQuad = influenceNuclearquad.resid_studentized_internal


print(standardized_residualsNuclearQuad)

"""The blue dots represent the observations and the orange line is the linear model of best fit.This is a very weak  and postive correlation between the average monthly outputs and the average monthly price of energy per EUR/MWH.The blue line represents the quadratic model of fit while the blue dots represent the observations."""

print(Nuclear_ypred) # OLS quadratic predicted values

print(standardized_residualsNuclearQuad)#Quadratic OLS residuals

#Predicted average monthly OLS quadratic values versus residuals
sns.residplot(x = Nuclear_ypred, y = standardized_residualsNuclearQuad, lowess = True, color="g")


plt.suptitle("Nuclear residuals from quadratic model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice that the lowess line has a slight hump and that the residuals are clustered on the left side; indicating heteroskedasticity and  bias.This indicates that the model does not fit the data.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly quadratic nuclear outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = Nuclear_ypred, y = nuclear, lowess = True, color="g")
 #Predicted OLS average monthly quadratic values versus actual values

"""As one can observe this residual plot, one may notice some sharp spikes in the fitted model, which form a nonlinear pattern. However, the observations are spread out in a "C" shaped pattern; indicating heteroskedasticity and bias.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

If the data is deemed to be stationary based off the given tests below, then that means that seasonality and trends are not factors in the values of the tested data. If the data is deemed to be non stationary, than seasonality and trends are indeed factors after all.
"""

#Dataframes analyzed by resource
dfnuclear = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Nuclear" : [6665.969986357435, 6681.1235119047615, 6687.913862718708, 6068.16991643454, 5403.817204301075, 5659.276773296245, 6483.623655913979, 6437.845430107527, 6466.175, 5854.012096774193, 5973.075, 6626.029609690444, 6223.8494623655915, 6159.264367816092, 6699.888290713325, 6706.406944444445, 5714.009408602151, 6647.4638888888885, 6628.9220430107525, 6633.3494623655915, 6675.7555555555555, 6576.6859060402685, 5534.297222222222, 6325.970430107527, 6769.916666666667, 6739.267857142857, 6755.951547779273, 6676.383333333333, 5561.240591397849, 6063.859722222222, 6117.403225806452, 6675.846774193548, 6427.688888888889, 6003.754362416107, 5565.216666666666, 6815.138440860215, 6723.689516129032, 6429.3735119047615, 6091.685060565276, 5504.175, 5465.200268817204, 5603.227777777778, 6121.515477792732, 6655.32123655914, 6621.998611111111, 6539.120805369127, 5821.1518817204305, 5403.497222222222],"Dates": ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfnuclear)
df_nuclear= pd.DataFrame.from_dict(dfnuclear, orient = "columns")
print(df_nuclear)
df_nuclear["Ratio"] = df_nuclear["Nuclear"]/df_nuclear["Price"]
pdToListNuclear = list(df_nuclear["Ratio"])
print(pdToListNuclear)
#ADF Tests 
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_nuclear["Ratio"])


test_result=adfuller(df_nuclear["Ratio"])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_nuclear["Ratio"])
plt.suptitle("Autocorrelations of Nuclear Ratio")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_nuclear["Ratio"])
plt.suptitle("Partialatocorrelations of Nuclear Ratio")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 

plt.show



df_nuclear['First Difference Nuclear Ratio'] = df_nuclear["Ratio"]- df_nuclear["Ratio"].shift(1) # Seasonality values
df_nuclear['Seasonal Difference Nuclear Ratio']=df_nuclear["Ratio"]- df_nuclear["Ratio"].shift(12)
df_nuclear.head()

nuclear_Ratio_Autocorrelations = sm.tsa.acf(df_nuclear["Ratio"],fft=False) #Autocorrelations
print(nuclear_Ratio_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the autocorrelation plot and the partialautocorrelation plot, indicating that the lags directly beforehand influenced the relationship between average monthly nuclear outputs and the average monthly prices of energy per EUR/MWH.
"""

df_nuclear.describe(include = 'all')  # Description table of Dataframes

plt.suptitle("Seasonal Difference of average monthly nuclear output to price of energy per EUR/MWH ratio")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 

df_nuclear['Seasonal Difference Nuclear Ratio'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the average monthly megawatts and the average monthly prices of energy per EUR/MWH."""

#Bell Curves

 
nuclearResults_mean = np.mean(df_nuclear["Ratio"])
nuclearResults_std = np.std(df_nuclear["Ratio"])
 

nuclearResultspdf = stats.norm.pdf(df_nuclear["Ratio"].sort_values(), nuclearResults_mean, nuclearResults_std)


plt.plot(df_nuclear["Ratio"].sort_values(), nuclearResultspdf)
plt.xlim([0,300])  
plt.xlabel("Output to energy price per EUR/MWH", size=15) 
plt.xlabel("Output to energy price per EUR/MWH", size=15)    
plt.title(f'Skewness for data: {skew(df_nuclear["Ratio"])}')  
plt.suptitle("Frequency distribution of output to energy price per EUR/MWH ratios (scaled in decimals)")  
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--") 
plt.show()

#Bell Curves 
nuclearResults_mean = np.mean(df_nuclear["Nuclear"])
nuclearResults_std = np.std(df_nuclear["Nuclear"])
 

nuclearResultspdf = stats.norm.pdf(df_nuclear["Nuclear"].sort_values(), nuclearResults_mean, nuclearResults_std)


plt.plot(df_nuclear["Nuclear"].sort_values(), nuclearResultspdf)
plt.xlim([0,10000])  
plt.xlabel("Output in MWH ", size=15)    
plt.title(f'Skewness for data: {skew(df_nuclear["Nuclear"])}')  
plt.suptitle("Frequency distribution of output amounts (scaled in decimals) " )
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

"""These bell shaped curves are skewed to the right and left, respectively. Hence they have a asymmetrical distribution. The blue line in this plot represent the observation values and their likelihood of occurring.

If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.
"""

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_nuclear["Nuclear"])
plt.suptitle("Autocorrelations of Nuclear")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_nuclear["Nuclear"])
plt.suptitle("Partialautocorrelations of Nuclear")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 

plt.show

Nuclear_Autocorrelations = sm.tsa.acf(df_nuclear["Nuclear"],fft=False) #Autocorrelations
print(Nuclear_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the first two lags on the autocorrelation plot, indicating that the lags directly beforehand influenced the relationship between average monthly nuclear outputs and the average monthly prices of energy per EUR/MWH.

The results from the list directly above will be analyzed for seasonality since the output and the respective average monthly price of energy per EUR/MWH are taken into account simultaneously.The  results are the outputs divided by the respective the average monthly prices of energy per EUR/MWH.
"""

#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_nuclear["Nuclear"])

df_nuclear['First Difference Nuclear'] = df_nuclear["Nuclear"]- df_nuclear["Nuclear"].shift(1) # Seasonality values
df_nuclear['Seasonal Difference Nuclear']=df_nuclear["Nuclear"]- df_nuclear["Nuclear"].shift(12)
df_nuclear.head()

plt.suptitle("Seasonal Difference of average monthly nuclear output to price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 

df_nuclear['Seasonal Difference Nuclear'].plot() # Seasonality Plot



"""The blue line represents the trend line among the values themselves.As one can observe, there are obvious patterns depicted in the average monthly nuclear output."""

df_nuclear.describe(include = 'all')  # Description table of Dataframes

"""Below is the box and whisker plot for the distribution of the average monthly outputs of nuclear power and its the average monthly prices of energy per EUR/MWH."""

# Box and Whisker Plot
sns.set(style="darkgrid") 

plt.suptitle('Distribution of average monthly nuclear power outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly nuclear power outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')
sns.boxplot(x=Rounded_Y, y=[6665.969986357435, 6681.1235119047615, 6687.913862718708, 6068.16991643454, 5403.817204301075, 5659.276773296245, 6483.623655913979, 6437.845430107527, 6466.175, 5854.012096774193, 5973.075, 6626.029609690444, 6223.8494623655915, 6159.264367816092, 6699.888290713325, 6706.406944444445, 5714.009408602151, 6647.4638888888885, 6628.9220430107525, 6633.3494623655915, 6675.7555555555555, 6576.6859060402685, 5534.297222222222, 6325.970430107527, 6769.916666666667, 6739.267857142857, 6755.951547779273, 6676.383333333333, 5561.240591397849, 6063.859722222222, 6117.403225806452, 6675.846774193548, 6427.688888888889, 6003.754362416107, 5565.216666666666, 6815.138440860215, 6723.689516129032, 6429.3735119047615, 6091.685060565276, 5504.175, 5465.200268817204, 5603.227777777778, 6121.515477792732, 6655.32123655914, 6621.998611111111, 6539.120805369127, 5821.1518817204305, 5403.497222222222])
plt.show()

"""This box and whisker plot depicts the frequencies between the distribution of the monthly average output of nuclear power produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of nuclear power produced, which was inbetween 6500 and 7000 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), nuclear power output was at roughly 6700 units. At approximately 65.15 EUR/MWH, nuclear power produced its highest output, whichughly 6800 units.The lowest amount produced, whcih was roughly 5000 units, was at the prices of approximently 57.29 EUR/MWH and 66.62 EUR/MWH. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.49 EUR/MWH, the output was slighty below 6600 units."""

plt.suptitle('Distribution of average monthly nuclear power outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly nuclear power outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')
  
plt.xlim(30, 80)   
  
# Stem Plot 
plt.stem(Rounded_Y, nuclear)

"""This plot depicts the frequencies between the distribution of the monthly average output of nuclear power produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of nuclear power produced, which was inbetween 6500 and 7000 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), nuclear power output was at roughly 6700 units. At approximately 65.15 EUR/MWH, nuclear power produced its highest output, which was roughly 6800 units.The lowest amount produced, whcih was roughly 5000 units, was at the prices of approximently 57.29 EUR/MWH and 66.62 EUR/MWH. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.49 EUR/MWH, the output was slighty below 6600 units. Each blue dot at the end of the blue line represents an observation."""

#Histograms
pdToListNuclear_Dict = {key: i for i, key in enumerate(pdToListNuclear)}

def Hist_pdToListNuclear(pdToListNuclear_Dict):
    for k, v in pdToListNuclear_Dict.items(): print(f"{v}:{k}") #Histograms
print(pdToListNuclear_Dict)

plt.bar(list(pdToListNuclear_Dict.values()),pdToListNuclear_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs/price ratio of nuclear power")
plt.ylabel('Average monthly outputs/price ratio') 
plt.xlabel('Months') 

plt.show()

"""The green bars represent the observation value for each respective month. This histogram displays a unimodal distribution between months 10 and 20, meaning that the output amount increased per EUR/MWH. Besides that exception, the histogram is roughly uniform."""

Nuclear_Dict = {key: i for i, key in enumerate(nuclear)}

def Hist_Nuclear(Nuclear_Dict):
    for k, v in Nuclear_Dict.items(): print(f"{v}:{k}") #Histograms
print(Nuclear_Dict)

plt.bar(list(Nuclear_Dict.values()), Nuclear_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs of nuclear power")
plt.ylabel('Average monthly outputs') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month.With the excpetion of the sudden but slight decrease in the average monthly outputs roughly every five months,  this histogram is otherwise roughly uniform throughout."""

#OLS predicted quadratic average monthly ratios versus residuals 
NuclearQuadRatioPredict  = Nuclear_ypred/ypred 

sns.residplot(x = NuclearQuadRatioPredict , y = standardized_residualsNuclearQuad/standardized_residualsPriceQuad , lowess = True, color="g")


plt.suptitle("Predicted quadratic nuclear output to EUR/MWH versus respective quadratic model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly linear nuclear outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictionsnuclear, y = nuclear, lowess = True, color="g")
#Predicted OLS average monthly linear values versus actual values

#Predicted OLS linear average monthly ratios versus residuals
NuclearRegRatioPredict = predictionsnuclear/predictions

sns.residplot(x = NuclearRegRatioPredict, y = standardized_residualsNuclear/standardized_residualsPricereg, lowess = True, color="g")
plt.suptitle("Predicted linear nuclear output to EUR/MWH versus respective linear model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#OLS predicted quadratic average monthly ratios versus actual ratios 

sns.residplot(x = NuclearQuadRatioPredict, y = pdToListNuclear, lowess = True, color="g")
plt.suptitle("Predicted quadratic nuclear output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe, there is a increasing trend along the lowess line in the variance of the predicted values versus the actual values. This indicates that there is heteroskedasticity and no bias. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted nuclear linear output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

sns.residplot(x = NuclearRegRatioPredict, y = pdToListNuclear, lowess = True, color="g")
 # OLS predicted linear average monthly ratios versus actual ratios

"""As one can observe this residual plot, one may notice that the lowess line has a  arching hump and that the residuals are spread out in a pattern; indicating heteroskedasticity and bias.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

Below is a scatterplot depicting the relationship between the average monthly price of energy per EUR/MWH and the average monthly outputs of nuclear power.
"""

modelnuclear = stats.linregress( [6665.969986357435, 6681.1235119047615, 6687.913862718708, 6068.16991643454, 5403.817204301075, 5659.276773296245, 6483.623655913979, 6437.845430107527, 6466.175, 5854.012096774193, 5973.075, 6626.029609690444, 6223.8494623655915, 6159.264367816092, 6699.888290713325, 6706.406944444445, 5714.009408602151, 6647.4638888888885, 6628.9220430107525, 6633.3494623655915, 6675.7555555555555, 6576.6859060402685, 5534.297222222222, 6325.970430107527, 6769.916666666667, 6739.267857142857, 6755.951547779273, 6676.383333333333, 5561.240591397849, 6063.859722222222, 6117.403225806452, 6675.846774193548, 6427.688888888889, 6003.754362416107, 5565.216666666666, 6815.138440860215, 6723.689516129032, 6429.3735119047615, 6091.685060565276, 5504.175, 5465.200268817204, 5603.227777777778, 6121.515477792732, 6655.32123655914, 6621.998611111111, 6539.120805369127, 5821.1518817204305, 5403.497222222222], [64.9490188172043,56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881] )



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(nuclear,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(nuclear,io2, "o")
plt.title(f"R squared: {modelnuclear.rvalue**2}")
f = lambda x: 	-0.001453    *x + 66.961236
plt.plot(x,f(x), c="orange", label="line of best fit")
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.legend("#")
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly nuclear output') 
plt.show()

There is a very weak yet positive correlation between the output and their average monthly price per EUR/MWH. The blue dots are the observations and orange line is the linear model of best fit.

"""The next resources analyzed are other renewables. These renewables are not specified."""

otherrenewable1 = other_renewable
otherrenewable1 = sm.add_constant(otherrenewable1)

other_renewable1 = other_renewable
other_renewable1 = sm.add_constant(other_renewable1)

#Dataframes analyzed by resource
dfotherrenewable = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Other_Renewable" : [70.66030013642565, 70.51488095238095, 66.63257065948856, 69.70055710306407, 70.56586021505376, 65.51182197496523, 68.3252688172043, 68.1760752688172, 67.96666666666667, 70.66935483870968, 70.3125, 71.62314939434724, 77.95430107526882, 74.45402298850574, 73.40242261103634, 78.275, 79.28225806451613, 83.48333333333333, 78.6271870794078, 78.43010752688173, 83.79166666666667, 83.78120805369127, 85.95694444444445, 90.09005376344086, 99.20430107526882, 94.90922619047619, 95.6850605652759, 95.97083333333333, 96.74596774193549, 92.10555555555555, 93.39650537634408, 92.24731182795699, 94.87222222222222, 95.6268456375839, 94.90138888888889, 91.81586021505376, 96.98252688172043, 96.75744047619048, 97.64199192462988, 97.15138888888889, 100.59005376344086, 101.10972222222222, 96.71736204576042, 96.61559139784946, 100.19444444444444, 98.61744966442953, 95.88172043010752, 96.4625],"Dates":['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfotherrenewable)
df_otherrenewable= pd.DataFrame.from_dict(dfotherrenewable, orient = "columns")
print(df_otherrenewable)
df_otherrenewable["Ratio"] = df_otherrenewable["Other_Renewable"]/df_otherrenewable["Price"]
pdToListOther = list(df_otherrenewable["Ratio"])
print(pdToListOther)

"""This is the logarithmic model for the average monthly other renewable outputs versus the average monthly prices of energy per EUR/MWH."""

#Logarithmic OLS regressions
Logpricevalues = ((np.log(io2))) 
Logotherrenewablevalues = ((np.log(other_renewable)))
Log = np.polyfit(np.log(io2), other_renewable1, 1)
lin2 = LinearRegression()
lin2.fit(np.log(other_renewable1), io2)
Otherrenewable_Log = sm.OLS(io2, other_renewable1).fit()

Otherrenewable_Logpred = Otherrenewable_Log.predict(other_renewable1) 
#OLS Logarithmic summary table
Otherrenewable_Log.summary() 
#Log
Log = np.polyfit(np.log(other_renewable), io2, 1)
print(Log)

y = 17.05011223 * Logotherrenewablevalues - 17.84401394

#Logarithmic OLS regression scatterplot
plt.suptitle("Logarithmic average monthly outputs versus average monthly prices of energy per EUR/MWH")
plt.title("R squared : 0.069")
plt.ylabel("Average monthly prices of energy per EUR/MWH")
plt.xlabel("Average monthly outputs")
plt.yscale("log") 
plt.xscale("log")
plt.plot(Logotherrenewablevalues, io2, "o")
plt.plot(Logotherrenewablevalues, y)

plt.xlim([1, 7])

"""The blue dots represent the observations and the orange line is the linear model of best fit.This is a very weak  and positive correlation between the average monthly outputs and the average monthly prices of energy per EUR/MWH."""

Otherrenewable_Log.summary() #OLS Logarithmic summary table



influenceOtherrenewableLog = Otherrenewable_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsOtherrenewableLog = influenceOtherrenewableLog.resid_studentized_internal


print(standardized_residualsOtherrenewableLog)

print(Otherrenewable_Logpred) # OLS logarithmic predicted values

plt.suptitle("Predicted average monthly logarithmic other renewable outputs")
plt.xlabel("Output to energy per EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")
OtherrenewableLogRatioPredict = Otherrenewable_Logpred/predictionLog
sns.residplot(x = OtherrenewableLogRatioPredict, y = pdToListOther, lowess = True, color="g")
  #OLS Logarithmic predicted average monthly ratios versus actual ratios

"""As one can observe this residual plot, one may notice an arching hump in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predicted ratios versus residuals
plt.suptitle("Predicted average monthly logarithmic other renewable outputs to price of energy per EUR/MWH ratio versus respective residuals")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = OtherrenewableLogRatioPredict, y = standardized_residualsOtherrenewableLog/standardized_residualsPriceLog,lowess = True, color="g")

"""With the exception of few heteroskedastic outliers, the residuals seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias otherwise. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predictions versus residuals
plt.suptitle("Residuals from logarithmic model versus predicted average monthly logarithmic other renewable outputs")
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = Otherrenewable_Logpred, y = standardized_residualsOtherrenewableLog, lowess = True, color="g")

"""As one can observe this residual plot, one may notice the slight humps in the observations, which form a nonlinear pattern. However, the residuals are spread out. This indicates homoscedasticity, a lack of bias and constant variance.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted logarithmic average monthly values versus actual values

plt.suptitle("Predicted average monthly logarithmic other renewable outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Actual values")  
plt.legend("..#")
sns.residplot(x = Otherrenewable_Logpred, y = other_renewable, lowess = True, color="g")

"""As one can observe this residual plot, one may notice the negative slope in the fitted model. In addition, the observations are spread out in a distinct pattern, indicating bias and homoscedasticity.It would be reasonable to assume that this model does not fit the data. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

This is the linear model used for the average monthly other renewable output versus the average monthly prices of energy per EUR/MWH.
"""



modelotherrenewable = stats.linregress([70.66030013642565, 70.51488095238095, 66.63257065948856, 69.70055710306407, 70.56586021505376, 65.51182197496523, 68.3252688172043, 68.1760752688172, 67.96666666666667, 70.66935483870968, 70.3125, 71.62314939434724, 77.95430107526882, 74.45402298850574, 73.40242261103634, 78.275, 79.28225806451613, 83.48333333333333, 78.6271870794078, 78.43010752688173, 83.79166666666667, 83.78120805369127, 85.95694444444445, 90.09005376344086, 99.20430107526882, 94.90922619047619, 95.6850605652759, 95.97083333333333, 96.74596774193549, 92.10555555555555, 93.39650537634408, 92.24731182795699, 94.87222222222222, 95.6268456375839, 94.90138888888889, 91.81586021505376, 96.98252688172043, 96.75744047619048, 97.64199192462988, 97.15138888888889, 100.59005376344086, 101.10972222222222, 96.71736204576042, 96.61559139784946, 100.19444444444444, 98.61744966442953, 95.88172043010752, 96.4625],
 [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

#Linear OLS regression
otherrenewable1 = other_renewable
otherrenewable1 = sm.add_constant(otherrenewable1)
modelotherrenewablereg = sm.OLS(io2,otherrenewable1).fit()
predictionsotherrenewable = modelotherrenewablereg.predict(otherrenewable1) 


modelotherrenewablereg.summary() 
#OLS Linear Summary Table



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(other_renewable,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(other_renewable,io2, "o")
plt.title(f"R squared: {modelotherrenewable.rvalue**2}")
f = lambda x: 	0.227125    *x + 38.410415
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.legend("#")
plt.suptitle('Average monthly outputs of other renewables versus average price of energy per EUR/MWH for each month')
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly outputs of other renewables') 
plt.show()


There is a very weak and positive correlation between the output and their average monthly price per EUR/MWH. The blue dots are the observations and orange line is the linear model of best fit.

print(predictionsotherrenewable)
#Linear OLS Predicted Values

#Linear OLS Predicted Values
influenceOtherreg = modelotherrenewablereg.get_influence()


standardized_residualsOther = influenceOtherreg.resid_studentized_internal


print(standardized_residualsOther)

#Predicted OLS linear values versus residual values
sns.residplot( x = predictionsotherrenewable, y = standardized_residualsOther, lowess = True , color = 'g' )

plt.suptitle("Other renewable residuals from linear model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice the slight humps in the observations, which form a nonlinear pattern. However, the residuals are spread out. This indicates homoscedasticity, a lack of bias and constant variance.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly linear other renewable outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictionsotherrenewable, y = other_renewable, lowess = True, color="g")
#Predicted OLS average monthly linear values versus actual values

"""As one can observe this residual plot, one may notice the negative slope in the fitted model. In addition, the observations are spread out in a distinct pattern, indicating bias and homoscedasticity.It would be reasonable to assume that this model does not fit the data. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

This is the quadratic model used for the average monthly other renewable output versus the average monthly prices of energy per EUR/MWH.
"""

#Quadratic OLS regression 
from sklearn.preprocessing import PolynomialFeatures
polynomial_features = PolynomialFeatures(degree=2)

modelOtherrenewablequad = np.poly1d(np.polyfit(other_renewable,io2,2))
print(modelOtherrenewablequad)

otherrenewable1 = other_renewable

otherrenewable1 = sm.add_constant(otherrenewable1)
otherrenewable2 = polynomial_features.fit_transform(otherrenewable1)
from sklearn.preprocessing import PolynomialFeatures
  
poly = PolynomialFeatures(degree = 3)
X_poly = poly.fit_transform(otherrenewable1)
  
Otherrenewable_Q = poly.fit(X_poly, io2)
lin2 = LinearRegression()
lin2.fit(X_poly, io2)
Otherrenewable_Quad = sm.OLS(io2, otherrenewable2).fit()

# OLS Predicted Quadratic values
Otherrenewable_ypred = Otherrenewable_Quad.predict(otherrenewable2) 

#OLS Quadratic Summary Table
Otherrenewable_Quad.summary()

#Quadratic Scatterplots
polyline = np.linspace(start = 0, stop =100 , num = 100)
plt.plot(polyline, modelOtherrenewablequad(polyline))
plt.scatter(other_renewable , io2, color = 'blue')
plt.title("R squared : 0.350")
plt.suptitle('Quadratic for average monthly prices of energy per EUR/MWH versus average monthly outputs of other renewables')
plt.xlabel('Average monthly outputs of other renewables')
plt.ylabel('Average monthly prices of energy per EUR/MWH')
plt.show()

influenceOtherrenewableQuad = Otherrenewable_Quad.get_influence() #Quadratic OLS residuals


standardized_residualsOtherrenewableQuad = influenceOtherrenewableQuad.resid_studentized_internal


print(standardized_residualsOtherrenewableQuad)

"""The blue dots represent the observations and the blue line is the quadratic model of best fit.This is a moderate and postive correlation between the average monthly outputs and the average monthly price of energy per EUR/MWH."""

Otherrenewable_Quad.summary()

print(Otherrenewable_ypred) # OLS quadratic predicted values

#Predicted average monthly OLS quadratic values versus residuals
sns.residplot(x = Otherrenewable_ypred, y = standardized_residualsOtherrenewableQuad, lowess = True, color="g")


plt.suptitle("Other renewable residuals from quadratic model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")



"""As one can observe this residual plot, one may notice the slight humps in the observations, which form a nonlinear pattern. However, the residuals are spread out. This indicates homoscedasticity, a lack of bias and constant variance.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly quadratic other renewable outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = Otherrenewable_ypred, y = other_renewable, lowess = True, color="g")
 #Predicted OLS average monthly quadratic values versus actual values

"""As one can observe this residual plot, one may notice some sharp spikes in the fitted model, which form a nonlinear pattern. However, the observations are spread out in a "C" shaped pattern; indicating heteroskedasticity and bias.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

If the data is deemed to be stationary based off the given tests below, then that means that seasonality and trends are not factors in the values of the tested data. If the data is deemed to be non stationary, than seasonality and trends are indeed factors after all.
"""

#Dataframes analyzed by resource
dfotherrenewable = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Other_Renewable" : [70.66030013642565, 70.51488095238095, 66.63257065948856, 69.70055710306407, 70.56586021505376, 65.51182197496523, 68.3252688172043, 68.1760752688172, 67.96666666666667, 70.66935483870968, 70.3125, 71.62314939434724, 77.95430107526882, 74.45402298850574, 73.40242261103634, 78.275, 79.28225806451613, 83.48333333333333, 78.6271870794078, 78.43010752688173, 83.79166666666667, 83.78120805369127, 85.95694444444445, 90.09005376344086, 99.20430107526882, 94.90922619047619, 95.6850605652759, 95.97083333333333, 96.74596774193549, 92.10555555555555, 93.39650537634408, 92.24731182795699, 94.87222222222222, 95.6268456375839, 94.90138888888889, 91.81586021505376, 96.98252688172043, 96.75744047619048, 97.64199192462988, 97.15138888888889, 100.59005376344086, 101.10972222222222, 96.71736204576042, 96.61559139784946, 100.19444444444444, 98.61744966442953, 95.88172043010752, 96.4625],"Dates":['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfotherrenewable)
df_otherrenewable= pd.DataFrame.from_dict(dfotherrenewable, orient = "columns")
print(df_otherrenewable)
df_otherrenewable["Ratio"] = df_otherrenewable["Other_Renewable"]/df_otherrenewable["Price"]
pdToListOther = list(df_otherrenewable["Ratio"])
print(pdToListOther)
#ADF Tests 
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_otherrenewable["Ratio"])


test_result=adfuller(df_otherrenewable["Ratio"])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_otherrenewable["Ratio"])
plt.suptitle("Autocorrelations of Other Renewable Ratio")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_otherrenewable["Ratio"])
plt.suptitle("Partialatocorrelations of Other Renewable Ratio")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 

plt.show

df_otherrenewable['First Difference Ratio'] = df_otherrenewable["Ratio"]- df_otherrenewable["Ratio"].shift(1) # Seasonality values
df_otherrenewable['Seasonal Difference Ratio']=df_otherrenewable["Ratio"]- df_otherrenewable["Ratio"].shift(12)
df_otherrenewable.head()

Otherrenewable_Ratio_Autocorrelations = sm.tsa.acf(df_otherrenewable["Ratio"],fft=False) #Autocorrelations
print(Otherrenewable_Ratio_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the autocorrelation and partial autocorrelation plot, indicating that the lags directly beforehand influenced the relationship between average monthly other renewable outputs and the average monthly prices of energy per EUR/MWH.

The results from the list directly above will be analyzed for seasonality since the output and the respective average monthly price of energy per EUR/MWH are taken into account simultaneously.The  results are the outputs divided by the respective the average monthly prices of energy per EUR/MWH.
"""

df_otherrenewable.describe(include = 'all')  # Description table of Dataframes

plt.suptitle("Seasonal Difference of average monthly other renewable output to price of energy per EUR/MWH ratio")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 



df_otherrenewable['Seasonal Difference Ratio'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the average monthly other renewable outputs and the average monthly prices of energy per EUR/MWH.


"""

#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result):
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_otherrenewable["Other_Renewable"])


test_result=adfuller(df_otherrenewable["Other_Renewable"])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_otherrenewable["Other_Renewable"])
plt.suptitle("Autocorrelations of Other Renewables")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_otherrenewable["Other_Renewable"])
plt.suptitle("Partialautocorrelations of Other Renewables")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 
plt.show
otherrenewable_Autocorrelations = sm.tsa.acf(df_otherrenewable["Other_Renewable"], fft=False) #Autocorrelations
print(otherrenewable_Autocorrelations)

Otherrenewable_Autocorrelations = sm.tsa.acf(df_otherrenewable["Other_Renewable"],fft=False) #Autocorrelations
print(Otherrenewable_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the first two lags on the autocorrelation and partial autocorrelation plot, indicating that the lags directly beforehand influenced the average monthly other renewable outputs.
"""

df_otherrenewable['First Difference'] = df_otherrenewable["Other_Renewable"]- df_otherrenewable["Other_Renewable"].shift(1) # Seasonality values
df_otherrenewable['Seasonal Difference']=df_otherrenewable["Other_Renewable"]- df_otherrenewable["Other_Renewable"].shift(12)
df_otherrenewable.head()

plt.suptitle("Seasonal Difference of average monthly Other Renewable output to price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_otherrenewable['Seasonal Difference'].plot() # Seasonality Plot



"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted in the average monthly other renewable outputs."""

#Bell Curves 


otherrenewableResults_mean = np.mean(df_otherrenewable["Ratio"])
otherrenewableResults_std = np.std(df_otherrenewable["Ratio"])
 

otherrenewableResultspdf = stats.norm.pdf(df_otherrenewable["Ratio"].sort_values(), otherrenewableResults_mean, otherrenewableResults_std)


plt.plot(df_otherrenewable["Ratio"].sort_values(), otherrenewableResultspdf)
plt.xlim([0,5])  
plt.xlabel("Output to energy price per EUR/MWH", size=15)    
plt.suptitle("Frequency distribution of output to energy price per EUR/MWH ratios (scaled in decimals)")
plt.title(f'Skewness for data: {skew(df_otherrenewable["Ratio"])}')  
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

#Bell Curves 


otherrenewableResults_mean = np.mean(df_otherrenewable["Other_Renewable"])
otherrenewableResults_std = np.std(df_otherrenewable["Other_Renewable"])
 

otherrenewableResultspdf = stats.norm.pdf(df_otherrenewable["Other_Renewable"].sort_values(), otherrenewableResults_mean, otherrenewableResults_std)


plt.plot(df_otherrenewable["Other_Renewable"].sort_values(), otherrenewableResultspdf)
plt.xlim([0,200])  
plt.xlabel("Output in MWH ", size=15)   
plt.title(f'Skewness for data: {skew(df_otherrenewable["Other_Renewable"])}') 
plt.suptitle("Frequency distribution of output amounts (scaled in decimals) " ) 
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

"""These bell shaped curves are roughly symmetrical, hence they have a normal distribution. The blue line in this plot represent the observation values and their likelihood of occurring.

If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.
"""

df_otherrenewable.describe(include = 'all')  # Description table of Dataframes

"""Below is the box and whisker plot for the distribution of the average monthly outputs of other renewable and its the average monthly prices of energy per EUR/MWH."""

# Box and Whisker Plot
sns.set(style="darkgrid") 
plt.suptitle('Distribution of average monthly outputs of other renewables by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly outputs of other renewables')
plt.xlabel('Average monthly price of energy per EUR/MWH')

sns.boxplot(x=Rounded_Y, y = other_renewable)
plt.show()

"""This box and whisker plot depicts the frequencies between the distribution of the monthly average output of other renewables produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of nuclear power produced, which was in between 95 and 100 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), the output of other renewables was slighty below 80 units.  At approximately 64.35 EUR/MWH, nuclear power produced its highest output, which was slighty above 100 units.The lowest amount produced, whcih was slightly above 65 units, was at the price of approximently 65.97 EUR/MWH. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was slighty below 100 units."""

plt.suptitle('Distribution of average monthly outputs of other renewables by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly outputs of other renewables')
plt.xlabel('Average monthly price of energy per EUR/MWH')   
  
# Stem Plot 
plt.stem(Rounded_Y, other_renewable)

"""This plot depicts the frequencies between the distribution of the monthly average output of other renewables produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of nuclear power produced, which was in between 95 and 100 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), the output of other renewables was slighty below 80 units.  At approximately 64.35 EUR/MWH, nuclear power produced its highest output, which was slighty above 100 units.The lowest amount produced, whcih was slightly above 65 units, was at the price of approximently 65.97 EUR/MWH. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was slighty below 100 units. Each blue dot and the end of the blue lines represent an observation."""

#Histograms
other_renewable_Dict = {key: i for i, key in enumerate(other_renewable)}

def Hist_other_renewable(other_renewable_Dict):
    for k, v in other_renewable_Dict.items(): print(f"{v}:{k}") 
print(other_renewable_Dict)

plt.bar(list(other_renewable_Dict.values()), other_renewable_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs of other renewables")
plt.ylabel('Average monthly outputs') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This histogram is  unimodal yet is skewed to the left, with a gradual increase in the average monthly outputs as the months progress."""

pdToListOther_Dict = {key: i for i, key in enumerate(pdToListOther)}

def Hist_pdToListOther(pdToListOther_Dict):
    for k, v in pdToListOther_Dict.items(): print(f"{v}:{k}") #Histograms
print(pdToListOther_Dict)

plt.bar(list(pdToListOther_Dict.values()), pdToListOther_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs/price ratio of other renewables")
plt.ylabel('Average monthly outputs/price ratio') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This histogram displays a gradual increase in the output amount per EUR/MWH as the months progress; with a unimodal between months 10 and 20.

Below is a scatterplot depicting the relationship between the average monthly price of energy per EUR/MWH and the average monthly outputs of other renewables.
"""



modelotherrenewable = stats.linregress([70.66030013642565, 70.51488095238095, 66.63257065948856, 69.70055710306407, 70.56586021505376, 65.51182197496523, 68.3252688172043, 68.1760752688172, 67.96666666666667, 70.66935483870968, 70.3125, 71.62314939434724, 77.95430107526882, 74.45402298850574, 73.40242261103634, 78.275, 79.28225806451613, 83.48333333333333, 78.6271870794078, 78.43010752688173, 83.79166666666667, 83.78120805369127, 85.95694444444445, 90.09005376344086, 99.20430107526882, 94.90922619047619, 95.6850605652759, 95.97083333333333, 96.74596774193549, 92.10555555555555, 93.39650537634408, 92.24731182795699, 94.87222222222222, 95.6268456375839, 94.90138888888889, 91.81586021505376, 96.98252688172043, 96.75744047619048, 97.64199192462988, 97.15138888888889, 100.59005376344086, 101.10972222222222, 96.71736204576042, 96.61559139784946, 100.19444444444444, 98.61744966442953, 95.88172043010752, 96.4625],
 [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(other_renewable,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(other_renewable,io2, "o")
plt.title(f"R squared: {modelotherrenewable.rvalue**2}")
f = lambda x: 	0.227125    *x + 38.410415
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.legend("#")
plt.suptitle('Average monthly outputs of other renewables versus average price of energy per EUR/MWH for each month')
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly outputs of other renewables') 
plt.show()


There is a very weak and positive correlation between the output and their average monthly price per EUR/MWH. The blue dots are the observations and orange line is the linear model of best fit.

#OLS predicted quadratic average monthly ratios versus residuals 
OtherQuadRatioPredict  = Otherrenewable_ypred/ypred 

sns.residplot(x = OtherQuadRatioPredict , y = standardized_residualsOtherrenewableQuad/standardized_residualsPriceQuad , lowess = True, color="g")


plt.suptitle("Predicted quadratic other renewable output to EUR/MWH versus respective quadratic model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Predicted OLS linear average monthly ratios versus residuals
OtherRegRatioPredict = predictionsotherrenewable/predictions

sns.residplot(x = OtherRegRatioPredict, y = standardized_residualsOther/standardized_residualsPricereg, lowess = True, color="g")
plt.suptitle("Predicted linear other renewable output to EUR/MWH versus respective linear model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted linear other renewable output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

sns.residplot(x = OtherRegRatioPredict, y = pdToListOther, lowess = True, color="g")
 # OLS predicted linear average monthly ratios versus actual ratios

"""With the exception of few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#OLS predicted quadratic average monthly ratios versus actual ratios 
sns.residplot(x = OtherQuadRatioPredict , y = pdToListOther, lowess = True, color="g")
plt.suptitle("Predicted quadratic other renewable output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

The next resource analyzed was fossil hard coal.

This is the linear model used for the average monthly fossil hard coal outputs versus the average monthly prices of energy per EUR/MWH.
"""



modelFossilHardcoal = stats.linregress([5411.263301500682, 4045.9747023809523, 4233.818304172274, 4819.516713091922, 4019.6129032258063, 6207.095966620306, 6748.469086021505, 5859.370967741936, 5653.873611111111, 5788.694892473119, 5982.631944444444, 5323.676985195155, 4204.615591397849, 3027.655172413793, 2985.886944818304, 2226.186111111111, 2226.65188172043, 2877.0805555555557, 4003.9165545087485, 4172.501344086021, 4208.013888888889, 4271.040268456376, 4581.631944444444, 4984.295698924731, 5533.782258064516, 4382.5327380952385, 2967.8492597577388, 3119.322222222222, 4428.919354838709, 5091.152777777777, 4561.283602150537, 3786.2325268817203, 4010.465277777778, 4321.130201342282, 5491.216666666666, 4330.653225806452, 3783.6223118279568, 4144.389880952381, 2157.1830417227457, 2775.8791666666666, 3674.15188172043, 3059.616666666667, 4014.707940780619, 4121.565860215053, 4651.018055555555, 3782.8161073825504, 3365.7580645161293, 4838.777777777777],
[64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

#Dataframes analyzed by resource
dfFossilHard = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Fossil_Hard_Coal" : [5411.263301500682, 4045.9747023809523, 4233.818304172274, 4819.516713091922, 4019.6129032258063, 6207.095966620306, 6748.469086021505, 5859.370967741936, 5653.873611111111, 5788.694892473119, 5982.631944444444, 5323.676985195155, 4204.615591397849, 3027.655172413793, 2985.886944818304, 2226.186111111111, 2226.65188172043, 2877.0805555555557, 4003.9165545087485, 4172.501344086021, 4208.013888888889, 4271.040268456376, 4581.631944444444, 4984.295698924731, 5533.782258064516, 4382.5327380952385, 2967.8492597577388, 3119.322222222222, 4428.919354838709, 5091.152777777777, 4561.283602150537, 3786.2325268817203, 4010.465277777778, 4321.130201342282, 5491.216666666666, 4330.653225806452, 3783.6223118279568, 4144.389880952381, 2157.1830417227457, 2775.8791666666666, 3674.15188172043, 3059.616666666667, 4014.707940780619, 4121.565860215053, 4651.018055555555, 3782.8161073825504, 3365.7580645161293, 4838.777777777777],"Dates": ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfFossilHard)
df_FossilHard= pd.DataFrame.from_dict(dfFossilHard, orient = "columns")
print(df_FossilHard)
df_FossilHard["Ratio"] = df_FossilHard["Fossil_Hard_Coal"]/df_FossilHard["Price"]
pdToListFossilHard = list(df_FossilHard["Ratio"])
print(pdToListFossilHard)

"""This is the linear model for the average monthly fossil hard coal outputs versus the average monthly prices of energy per EUR/MWH."""

#Linear OLS regression
Fossil_hard1 = Fossil_hard

Fossil_hard1 = sm.add_constant(Fossil_hard1)
modelFossilHardreg = sm.OLS(io2, Fossil_hard1).fit()
predictionsFossilHard = modelFossilHardreg.predict(Fossil_hard1) 


modelFossilHardreg.summary() 
#OLS Linear Summary Table



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(Fossil_hard,io2)
print("slope: %f    intercept: %f" % (slope, intercept))
# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(Fossil_hard,io2, "o")
plt.title(f"R squared: {modelFossilHardcoal.rvalue**2}")
f = lambda x: 	0.006141     *x + 31.729162
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.legend("#")
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly hard coal output') 
plt.show()

The blue dots represent the observations and the orange line is the linear model of best fit.There is a moderately positive correlation the average monthly outputs of hard fossil coal and their respective the average monthly prices of energy per EUR/MWH. It appears that as the average monthly price of energy per EUR/MWH increases, the average monthly outputs of  fossil hard coal increases as well.

#Linear OLS regression residuals
influenceFossilHardreg = modelFossilHardreg.get_influence()


standardized_residualsFossilHard = influenceFossilHardreg.resid_studentized_internal


print(standardized_residualsFossilHard)

print(predictionsFossilHard) 
#Linear OLS Predicted Values

#Predicted OLS linear values versus residual values
sns.residplot(x = predictionsFossilHard, y = standardized_residualsFossilHard, lowess = True, color ="g")

plt.suptitle("Fossil hard residuals from linear model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice an arching hump in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly linear fossil hard outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictionsFossilHard, y = Fossil_hard, lowess = True, color="g")
#Predicted OLS average monthly linear values versus actual values



"""With the exception of a few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

This is the logarithmic model for the average monthly fossil hard coal outputs versus the average monthly prices of energy per EUR/MWH.
"""

#Logarithmic OLS regressions
Logpricevalues = ((np.log(io2))) 
LogFossilHardvalues = ((np.log(Fossil_hard)))
Log = np.polyfit(np.log(io2), Fossil_hard1, 1)
lin2 = LinearRegression()
lin2.fit(np.log(Fossil_hard1), io2)
FossilHard_Log = sm.OLS(io2, Fossil_hard1).fit()

FossilHard_Logpred = FossilHard_Log.predict(Fossil_hard1) 
#OLS Logarithmic summary table
FossilHard_Log.summary() 
#Log
Log = np.polyfit(np.log(Fossil_hard), io2, 1)
print(Log)

y = 25.67246221 * LogFossilHardvalues -155.79490271

#Logarithmic OLS regression scatterplot
plt.suptitle("Logarithmic average monthly outputs versus average monthly prices of energy per EUR/MWH")
plt.title("R squared : 0.408")
plt.ylabel("Average monthly prices of energy per EUR/MWH")
plt.xlabel("Average monthly outputs")
plt.yscale("log") 
plt.xscale("log")
plt.plot(LogFossilHardvalues, io2, "o")
plt.plot(LogFossilHardvalues, y)

"""The blue dots represent the observations and the orange line is the linear model of best fit.This is a moderate and positive correlation between the average monthly outputs and the average monthly prices of energy per EUR/MWH."""

FossilHard_Log.summary() #OLS Logarithmic summary table



influenceFossilHardLog = FossilHard_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsFossilHardLog = influenceFossilHardLog.resid_studentized_internal


print(standardized_residualsFossilHardLog)

print(FossilHard_Logpred) # OLS logarithmic predicted values

#OLS Logarithmic predicted average monthly ratios versus actual ratios
plt.suptitle("Predicted average monthly logarithmic fossil hard outputs to EUR/MWH versus actual ratios")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio") 
plt.ylabel("Amount from actual values")   
plt.legend("..#")
FossilHardLogRatioPredict = FossilHard_Logpred/predictionLog   
sns.residplot(x = FossilHardLogRatioPredict, y = pdToListFossilHard, lowess = True, color="g")

"""As one can observe this residual plot, one may notice that the lowess line has an arching hump and that the residuals are spread out in a pattern; indicating heteroskedacity and bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predictions versus residuals
plt.suptitle("Residuals from logarithmic model versus predicted average monthly logarithmic fossil hard  outputs") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values") 
plt.legend("..#")
sns.residplot(x = FossilHard_Logpred, y = standardized_residualsFossilHardLog, lowess = True, color="g")

"""As one can observe this residual plot, one may notice an arching hump in the fitted model, which form a nonlinear pattern. However, the residuals are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predicted ratios versus residuals
plt.suptitle("Predicted average monthly logarithmic output to price of energy per EUR/MWH ratio versus respective residuals") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = FossilHardLogRatioPredict, y = standardized_residualsFossilHardLog/standardized_residualsPriceLog, lowess = True, color="g")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly logarithmic fossil hard outputs per EUR/MWH versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values")  
plt.legend("..#")
sns.residplot(x = FossilHard_Logpred, y = Fossil_hard, lowess = True, color="g")
 # OLS predicted logarithmic average monthly values versus actual values

"""With the exception of few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

influenceFossilHardLog = FossilHard_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsFossilHardLog = influenceFossilHardLog.resid_studentized_internal


print(standardized_residualsFossilHardLog)

"""This is the quadratic model used for the average monthly fossil hard coal outputs versus the average monthly prices of energy per EUR/MWH."""

#Quadratic OLS regression 
from sklearn.preprocessing import PolynomialFeatures
polynomial_features = PolynomialFeatures(degree=2)

modelFossilHardquad = np.poly1d(np.polyfit(Fossil_hard, io2,2))
print(modelFossilHardquad)

Fossil_hard1 = Fossil_hard

Fossil_hard1 = sm.add_constant(Fossil_hard1)
Fossil_hard2 = polynomial_features.fit_transform(Fossil_hard1)
from sklearn.preprocessing import PolynomialFeatures
  
poly = PolynomialFeatures(degree = 3)
X_poly = poly.fit_transform(Fossil_hard2)
  
FossilHard_Q = poly.fit(X_poly, io2)
lin2 = LinearRegression()
lin2.fit(X_poly, io2)
FossilHard_Quad = sm.OLS(io2, Fossil_hard2).fit()

# OLS Predicted Quadratic values
FossilHard_ypred = FossilHard_Quad.predict(Fossil_hard2) 

#OLS Quadratic Summary Table
FossilHard_Quad.summary()

#Quadratic Scatterplots
polyline = np.linspace(start = 0, stop =100 , num = 100)
plt.plot(polyline, modelFossilHardquad(polyline))
plt.scatter(Fossil_hard, io2, color = 'blue')
plt.title("R squared : 0.457")
plt.suptitle('Quadratic for average monthly outputs of fossil oil versus average monthly prices of energy per EUR/MWH')
plt.xlabel('Average monthly outputs of fossil oil')
plt.ylabel('Average monthly prices of energy per EUR/MWH')
plt.show()



influenceFossilHardQuad = FossilHard_Quad.get_influence() #Quadratic OLS residuals


standardized_residualsFossilHardQuad = influenceFossilHardQuad.resid_studentized_internal


print(standardized_residualsFossilHardQuad)



"""The blue dots represent the observations and the blue line is the quadratic model of best fit.This is a moderate and postive correlation between the average monthly outputs and the average monthly price of energy per EUR/MWH."""

FossilHard_Quad.summary()#OLS Quadratic Summary Table

print(FossilHard_ypred) # OLS quadratic predicted values

#Predicted average monthly OLS quadratic values versus residuals
sns.residplot(x = FossilHard_ypred, y = standardized_residualsFossilHardQuad, lowess = True, color="g")

plt.suptitle("Fossil hard residuals from quadratic model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice that the lowess line is subtle and that the residuals are clustered on the right side; indicating heteroskedasticity and  bias.This indicates that the model does not fit the data.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

print(FossilHard_ypred)

plt.suptitle("Predicted average monthly quadratic fossil hard outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = FossilHard_ypred , y = Fossil_hard, lowess = True, color="g")
 #Predicted OLS average monthly quadratic values versus actual values

"""As one can observe this residual plot, one may notice some sharp spikes in the fitted model, which form a nonlinear pattern. However, the observations are spread out in a "C" shaped pattern; indicating heteroskedasticity and bias.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

If the data is deemed to be stationary based off the given tests below, then that means that seasonality and trends are not factors in the values of the tested data. If the data is deemed to be non stationary, than seasonality and trends are indeed factors after all.
"""

df_FossilHard['First Difference Ratio'] = df_FossilHard["Ratio"]- df_FossilHard["Ratio"].shift(1) # Seasonality values
df_FossilHard['Seasonal Difference Ratio']=df_FossilHard["Ratio"]- df_FossilHard["Ratio"].shift(12)
df_FossilHard.head()

#Dataframes analyzed by resource
dfFossilHard = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Fossil_Hard_Coal" : [5411.263301500682, 4045.9747023809523, 4233.818304172274, 4819.516713091922, 4019.6129032258063, 6207.095966620306, 6748.469086021505, 5859.370967741936, 5653.873611111111, 5788.694892473119, 5982.631944444444, 5323.676985195155, 4204.615591397849, 3027.655172413793, 2985.886944818304, 2226.186111111111, 2226.65188172043, 2877.0805555555557, 4003.9165545087485, 4172.501344086021, 4208.013888888889, 4271.040268456376, 4581.631944444444, 4984.295698924731, 5533.782258064516, 4382.5327380952385, 2967.8492597577388, 3119.322222222222, 4428.919354838709, 5091.152777777777, 4561.283602150537, 3786.2325268817203, 4010.465277777778, 4321.130201342282, 5491.216666666666, 4330.653225806452, 3783.6223118279568, 4144.389880952381, 2157.1830417227457, 2775.8791666666666, 3674.15188172043, 3059.616666666667, 4014.707940780619, 4121.565860215053, 4651.018055555555, 3782.8161073825504, 3365.7580645161293, 4838.777777777777],"Dates": ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfFossilHard)
df_FossilHard= pd.DataFrame.from_dict(dfFossilHard, orient = "columns")
print(df_FossilHard)
df_FossilHard["Ratio"] = df_FossilHard["Fossil_Hard_Coal"]/df_FossilHard["Price"]
pdToListFossilHard = list(df_FossilHard["Ratio"])
print(pdToListFossilHard)
#ADF Tests 
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_FossilHard["Ratio"])


test_result=adfuller(df_FossilHard["Ratio"])



from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_FossilHard["Ratio"])
plt.suptitle("Autocorrelations of Fossil Hard Ratio")
plt.ylabel('Autocorrealations') 
plt.xlabel('Lags') 
plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_FossilHard["Ratio"])
plt.suptitle("Partialatocorrelations of Fossil Hard Rato")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 
plt.show

Fossil_Hard_Ratio_Autocorrelations = sm.tsa.acf(df_FossilHard["Ratio"],fft=False) #Autocorrelations
print(Fossil_Hard_Ratio_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the partial and autocorrelation plots, indicating that the lags directly beforehand influenced the relationship between average monthly fossil hard coal outputs and the average monthly prices of energy per EUR/MWH.
"""

df_FossilHard['First Difference'] = df_FossilHard["Ratio"]- df_FossilHard["Ratio"].shift(1) # Seasonality values
df_FossilHard['Seasonal Difference']=df_FossilHard["Ratio"]- df_FossilHard["Ratio"].shift(12)
df_FossilHard.head()

plt.suptitle("Seasonal Difference of average monthly Fossil Hard output to price of energy per EUR/MWH ratio")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 

df_FossilHard['Seasonal Difference'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the average monthly fossil hard outputs and the average monthly prices of energy per EUR/MWH.

"""



"""The results from the list directly above will be analyzed for seasonality since the output and the respective average monthly price of energy per EUR/MWH are taken into account simultaneously.The  results are the outputs divided by the respective the average monthly prices of energy per EUR/MWH."""

#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result):
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_FossilHard["Fossil_Hard_Coal"])


test_result=adfuller(df_FossilHard["Fossil_Hard_Coal"])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_FossilHard["Fossil_Hard_Coal"])
plt.suptitle("Autocorrelations of Fossil Hard Coal")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_FossilHard["Fossil_Hard_Coal"])
plt.suptitle("Partialatocorrelations of Fossil Hard Coal")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 


plt.show
Fossilhard_Autocorrelations = sm.tsa.acf(df_FossilHard["Fossil_Hard_Coal"], fft=False) #Autocorrelations
print(Fossilhard_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the partial and autocorrelation plot, indicating that the lags directly beforehand influenced the average monthly fossil hard coal outputs.
"""



df_FossilHard['First Difference Fossil Hard '] = df_FossilHard["Fossil_Hard_Coal"]- df_FossilHard["Fossil_Hard_Coal"].shift(1) # Seasonality values
df_FossilHard['Seasonal Difference Fossil Hard']=df_FossilHard["Fossil_Hard_Coal"]- df_FossilHard["Fossil_Hard_Coal"].shift(12)
df_FossilHard.head()
plt.suptitle("Seasonal Difference of Fossil Hard output to price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_FossilHard['Seasonal Difference Fossil Hard'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted in the average monthly fossil hard outputs."""

#Bell Curves 


FossilHardResults_mean = np.mean(df_FossilHard["Ratio"])
FossilHardResults_std = np.std(df_FossilHard["Ratio"])
 

FossilHardResultspdf = stats.norm.pdf(df_FossilHard["Ratio"].sort_values(), FossilHardResults_mean, FossilHardResults_std)


plt.plot(df_FossilHard["Ratio"].sort_values(), FossilHardResultspdf)
plt.xlim([0,200])  
plt.xlabel("Output to energy price per EUR/MWH", size=15)    
plt.title(f'Skewness for data: {skew(df_FossilHard["Ratio"])}') 
plt.suptitle("Frequency distribution of output to energy price per EUR/MWH ratios (scaled in decimals)")
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

#Bell Curves 


FossilHardResults_mean = np.mean(df_FossilHard["Fossil_Hard_Coal"])
FossilHardResults_std = np.std(df_FossilHard["Fossil_Hard_Coal"])
 

FossilHardResultspdf = stats.norm.pdf(df_FossilHard["Fossil_Hard_Coal"].sort_values(), FossilHardResults_mean, FossilHardResults_std)


plt.plot(df_FossilHard["Fossil_Hard_Coal"].sort_values(), FossilHardResultspdf)
plt.xlim([0,10000])  
plt.xlabel("Output in MWH ", size=15) 
plt.title(f'Skewness for data: {skew(df_FossilHard["Ratio"])}') 
plt.suptitle("Frequency distribution of output amounts (scaled in decimals) " )   
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

"""These bell shaped curves are roughly symmetrical, hence they have a normal distribution. The blue line in this plot represent the observation values and their likelihood of occurring.

If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.
"""

df_FossilHard.describe(include = 'all')  # Description table of Dataframes

"""Below is the box and whisker plot for the distribution of the average monthly outputs of fossil hard coal and its the average monthly prices of energy per EUR/MWH."""

# Box and Whisker Plot
sns.set(style="darkgrid") 

plt.suptitle('Distribution of average monthly fossil hard coal outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly fossil hard coal outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')
sns.boxplot(x=Rounded_Y, y=[5411.263301500682, 4045.9747023809523, 4233.818304172274, 4819.516713091922, 4019.6129032258063, 6207.095966620306, 6748.469086021505, 5859.370967741936, 5653.873611111111, 5788.694892473119, 5982.631944444444, 5323.676985195155, 4204.615591397849, 3027.655172413793, 2985.886944818304, 2226.186111111111, 2226.65188172043, 2877.0805555555557, 4003.9165545087485, 4172.501344086021, 4208.013888888889, 4271.040268456376, 4581.631944444444, 4984.295698924731, 5533.782258064516, 4382.5327380952385, 2967.8492597577388, 3119.322222222222, 4428.919354838709, 5091.152777777777, 4561.283602150537, 3786.2325268817203, 4010.465277777778, 4321.130201342282, 5491.216666666666, 4330.653225806452, 3783.6223118279568, 4144.389880952381, 2157.1830417227457, 2775.8791666666666, 3674.15188172043, 3059.616666666667, 4014.707940780619, 4121.565860215053, 4651.018055555555, 3782.8161073825504, 3365.7580645161293, 4838.777777777777])
plt.show()

"""
This box and whisker plot depicts the frequencies between the distribution of the monthly average output of fossil hard coal produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of fossil hard coal produced, which was slightly above and below 4000 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), fossil hard coal output was at roughly 2250 units. At approximately 71.07 EUR/MWH, fossil hard coal produced its highest output, which was slighty below 7000 units.The lowest amount produced, whcih was slightly above 2000 units, was at the price of approximently 48.28 EUR/MWH. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was at roughly 5500 units."""

plt.suptitle('Distribution of average monthly fossil hard coal outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly fossil hard coal outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')  
  
plt.xlim(30, 80)   
  
# Stem Plot 
plt.stem(Rounded_Y, fossil_oil)

"""
This plot depicts the frequencies between the distribution of the monthly average output of fossil hard coal produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of fossil hard coal produced, which was slightly above and below 4000 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), fossil hard coal output was at roughly 2250 units. At approximately 71.07 EUR/MWH, fossil hard coal produced its highest output, which was slighty below 7000 units.The lowest amount produced, whcih was slightly above 2000 units, was at the price of approximently 48.28 EUR/MWH. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was at roughly 5500 units. Each dot at the end of the blue lines represent an observation."""

Fossil_hard_Dict = {key: i for i, key in enumerate(Fossil_hard)}

def Hist_Fossil_hard(Fossil_hard_Dict):
    for k, v in Fossil_hard_Dict.items(): print(f"{v}:{k}") #Histograms
print(Fossil_hard_Dict)

plt.bar(list(Fossil_hard_Dict.values()), Fossil_hard_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs of fossil hard coal")
plt.ylabel('Average monthly outputs') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This histogram is  multimodal yet is slightly skewed to the right, indicating a gradual decrease in the average monthly outputs. In addition, there seems to be reccuring trenches occurring roughly every ten months. It would be fair to assume that this fluctuating pattern is seasonal."""

pdToListFossilHard_Dict = {key: i for i, key in enumerate(pdToListFossilHard)}

def Hist_pdToListFossilHard(pdToListFossilHard_Dict):
    for k, v in pdToListFossilHard_Dict.items(): print(f"{v}:{k}") #Histograms
print(pdToListFossilHard_Dict)

plt.bar(list(pdToListFossilHard_Dict.values()), pdToListFossilHard_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs/price ratio of fossil hard coal")
plt.ylabel('Average monthly outputs/price ratio') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This histogram is  roughly uniform that gradually declines in value as the months progress.

Below is a scatterplot depicting the relationship between the average monthly price of energy per EUR/MWH and the average monthly outputs of fossil hard coal.
"""



modelFossilHardcoal = stats.linregress([5411.263301500682, 4045.9747023809523, 4233.818304172274, 4819.516713091922, 4019.6129032258063, 6207.095966620306, 6748.469086021505, 5859.370967741936, 5653.873611111111, 5788.694892473119, 5982.631944444444, 5323.676985195155, 4204.615591397849, 3027.655172413793, 2985.886944818304, 2226.186111111111, 2226.65188172043, 2877.0805555555557, 4003.9165545087485, 4172.501344086021, 4208.013888888889, 4271.040268456376, 4581.631944444444, 4984.295698924731, 5533.782258064516, 4382.5327380952385, 2967.8492597577388, 3119.322222222222, 4428.919354838709, 5091.152777777777, 4561.283602150537, 3786.2325268817203, 4010.465277777778, 4321.130201342282, 5491.216666666666, 4330.653225806452, 3783.6223118279568, 4144.389880952381, 2157.1830417227457, 2775.8791666666666, 3674.15188172043, 3059.616666666667, 4014.707940780619, 4121.565860215053, 4651.018055555555, 3782.8161073825504, 3365.7580645161293, 4838.777777777777],
[64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(Fossil_hard,io2)
print("slope: %f    intercept: %f" % (slope, intercept))
# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(Fossil_hard,io2, "o")
plt.title(f"R squared: {modelFossilHardcoal.rvalue**2}")
f = lambda x: 	0.006141     *x + 31.729162
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.legend("#")
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly hard coal output') 
plt.show()

The blue dots represent the observations and the orange line is the linear model of best fit.There is a moderately positive correlation the average monthly outputs of hard fossil coal and their respective the average monthly prices of energy per EUR/MWH. It appears that as the average monthly price of energy per EUR/MWH increases, the average monthly outputs of  fossil hard coal increases as well.

#OLS predicted quadratic average monthly ratios versus residuals 
FossilHardQuadRatioPredict = FossilHard_ypred/ypred 

sns.residplot(x = FossilHardQuadRatioPredict , y = standardized_residualsFossilHardQuad/standardized_residualsPriceQuad , lowess = True, color="g")


plt.suptitle("Predicted quadratic fossil hard coal output to EUR/MWH versus respective quadratic model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Predicted OLS linear average monthly ratios versus residuals
FossilHardRegRatioPredict = predictionsFossilHard/predictions

sns.residplot(x = FossilHardRegRatioPredict, y = standardized_residualsFossilHard/standardized_residualsPricereg, lowess = True, color="g")

plt.suptitle("Predicted linear fossil hard coal output to EUR/MWH versus respective linear model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#OLS predicted quadratic average monthly ratios versus actual ratios 

sns.residplot(x = FossilHardQuadRatioPredict , y = pdToListFossilHard, lowess = True, color="g")
plt.suptitle("Predicted quadratic fossil hard coal output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice an arching hump in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted linear average monthly ratios versus actual ratios
sns.residplot(x = FossilHardRegRatioPredict, y = pdToListFossilHard, lowess = True, color="g")
plt.suptitle("Predicted linear fossil hard coal output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice the slight hump in the fitted model, which formed a nonlinear pattern. However, the residuals are quite spread out, which indicates homoscedasticity and constant variance. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

The next resource analyzed was solar power.

This is the linear model used for the average monthly solar outputs versus the average monthly prices of energy per EUR/MWH.
"""



modelsolar = stats.linregress([1130.392905866303, 1244.5252976190477, 1283.479138627187, 1461.5194986072424, 1920.2728494623657, 1998.6606397774688, 1973.7405913978494, 1738.9502688172042, 1591.2902777777779, 1082.279569892473, 1171.7194444444444, 874.3135935397039, 1025.741935483871, 1258.058908045977, 1382.9057873485867, 1390.4166666666667, 1689.1814516129032, 1942.8291666666667, 1915.7752355316286, 1835.8521505376343, 1548.213888888889, 1013.2832214765101, 951.3819444444445, 914.9758064516129, 1088.4180107526881, 1157.4613095238096, 1415.0915208613728, 1468.8277777777778, 1800.0524193548388, 1919.0236111111112, 2025.119623655914, 1754.159946236559, 1731.3666666666666, 1344.3261744966444, 1180.6458333333333, 1035.4260752688172, 1051.4193548387098, 1246.110119047619, 1352.3189771197847, 1501.6472222222221, 1526.899193548387, 1855.1972222222223, 2010.3458950201884, 1706.9301075268818, 1510.6527777777778, 999.786577181208, 875.5900537634409, 831.6680555555556],[64.9490188172043, 56.383854166666666, 55.522462987886975, 58.35408333333333, 57.29405913978498, 65.9749027777778, 71.07204301075271, 63.99806451612899, 60.254791666666634, 59.40676510067113, 60.72679166666668, 61.901760752688226, 45.57872311827956, 36.752083333333374, 36.81800807537014, 32.61866666666666, 34.691370967741896, 46.266319444444434, 47.50201612903221, 47.6023387096774, 50.40559722222224, 60.182429530201404, 62.58105555555558, 67.5951344086021, 79.49208333333331, 59.83779761904767, 50.95989232839837, 51.71791666666662, 53.77262096774189, 56.25822222222224, 55.252580645161316, 54.08432795698931, 55.81655555555558, 63.92528859060403, 65.43065277777781, 65.15127688172035, 56.51197580645163, 60.877098214285674, 48.279717362045766, 50.40073611111113, 61.633763440860214, 64.34813888888884, 67.78344086021498, 70.36391129032262, 76.9140416666666, 70.36221476510062, 67.0426075268817, 66.62351388888881]
)

#Dataframes analyzed by resource
dfsolar = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],
            "Solar" : [1130.392905866303, 1244.5252976190477, 1283.479138627187, 1461.5194986072424, 1920.2728494623657, 1998.6606397774688, 1973.7405913978494, 1738.9502688172042, 1591.2902777777779, 1082.279569892473, 1171.7194444444444, 874.3135935397039, 1025.741935483871, 1258.058908045977, 1382.9057873485867, 1390.4166666666667, 1689.1814516129032, 1942.8291666666667, 1915.7752355316286, 1835.8521505376343, 1548.213888888889, 1013.2832214765101, 951.3819444444445, 914.9758064516129, 1088.4180107526881, 1157.4613095238096, 1415.0915208613728, 1468.8277777777778, 1800.0524193548388, 1919.0236111111112, 2025.119623655914, 1754.159946236559, 1731.3666666666666, 1344.3261744966444, 1180.6458333333333, 1035.4260752688172, 1051.4193548387098, 1246.110119047619, 1352.3189771197847, 1501.6472222222221, 1526.899193548387, 1855.1972222222223, 2010.3458950201884, 1706.9301075268818, 1510.6527777777778, 999.786577181208, 831.6680555555556, 875.5900537634409], 
            
            "Dates": ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfsolar)
df_solar = pd.DataFrame.from_dict(dfsolar, orient = "columns")
print(df_solar)
df_solar["Ratio"] = df_solar["Solar"]/df_solar["Price"]
pdToListSolar = list(df_solar["Ratio"])
print(pdToListSolar)

#Linear OLS regression
solar1 = solar
solar1 = sm.add_constant(solar1)
modelsolarreg = sm.OLS(io2, solar1).fit()
predictionssolar = modelsolarreg.predict(solar1) 


modelsolarreg.summary() 
#OLS Linear Summary Table



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(solar,io2)
print("slope: %f    intercept: %f" % (slope, intercept))
# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(solar,io2, "o")
plt.title(f"R squared: {modelsolar.rvalue**2}")
f = lambda x: 	-0.005078  *x + 65.130153
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.legend("#")
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly solar power output') 
plt.show()

There is a very weak and negative correlation between the outputs and their respective the average monthly prices of energy per EUR/MWH.The blue dots are the observations and orange line is the linear model of best fit.

print(predictionssolar)
#Linear OLS Predicted Values

#Linear OLS regression residuals 
influencesolarreg = modelsolarreg.get_influence()


standardized_residualsSolar = influencesolarreg.resid_studentized_internal


print(standardized_residualsSolar)

#Predicted OLS linear values versus residual values
sns.residplot(x = predictionssolar, y = standardized_residualsSolar, lowess = True, color ="g")

plt.suptitle("Solar power residuals from linear model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice dull hump within the lowess line, which form a roughly linear pattern. However, the residuals are quite spread out, which indicates homoscedasticity and constant variance.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly linear solar outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictionssolar, y = solar, lowess = True, color="g")
#Predicted OLS average monthly linear values versus actual values

"""As one can observe this residual plot, one may notice the negative slope in the fitted model. In addition, the residuals are spread out in a distinct pattern, indicating bias and homoscedasticity. It would be reasonable to assume that this model does not fit the data. The green dots are the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

print(solar)

"""This is the quadratic model used for the average monthly solar output versus the average monthly prices of energy per EUR/MWH."""

#Quadratic OLS regression 
from sklearn.preprocessing import PolynomialFeatures
polynomial_features = PolynomialFeatures(degree=3)

modelSolarquad = np.poly1d(np.polyfit(solar, io2, 2))
print(modelSolarquad)


solar1 = solar
solar1 = sm.add_constant(solar1)
solar2 = polynomial_features.fit_transform(solar1)
from sklearn.preprocessing import PolynomialFeatures
  
poly = PolynomialFeatures(degree = 3)
X_poly = poly.fit_transform(solar1)
  
Solar_Q = poly.fit(X_poly, solar)
lin2 = LinearRegression()
lin2.fit(X_poly, io2)
Solar_Quad = sm.OLS(io2, solar2).fit()

# OLS Predicted Quadratic values
Solar_ypred = Solar_Quad.predict(solar2) 

#OLS Quadratic Summary Table
Solar_Quad.summary()

#Quadratic Scatterplots
polyline = np.linspace(start = 0, stop =100 , num = 100)
plt.plot(polyline, modelSolarquad(polyline))
plt.scatter(solar, io2, color = 'blue')
plt.title("R squared : 0.146")
plt.suptitle('Quadratic for average monthly prices of energy per EUR/MWH versus average monthly outputs')
plt.xlabel('Average monthly outputs')
plt.ylabel('Average monthly prices of energy per EUR/MWH')
plt.show()

"""The blue dots represent the observations and the blue line is the quadratic model of best fit.This is a very weak  and postive correlation between the average monthly outputs and the average monthly price of energy per EUR/MWH."""

influenceSolarQuad = Solar_Quad.get_influence() #Quadratic OLS residuals


standardized_residualsSolarQuad = influenceSolarQuad.resid_studentized_internal


print(standardized_residualsSolarQuad)

print(Solar_ypred) # OLS quadratic predicted values

plt.suptitle("Predicted average monthly quadratic solar outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = Solar_ypred, y = solar, lowess = True, color="g")
 #Predicted OLS average monthly quadratic values versus actual values

"""As one can observe this residual plot, one may notice some humps in the fitted model, which form a nonlinear pattern. However, the observations are spread out in a "C" shaped pattern; indicating heteroskedasticity and bias.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Predicted average monthly OLS quadratic values versus residuals
sns.residplot(x = Solar_ypred, y = standardized_residualsSolarQuad, lowess = True, color="g")

plt.suptitle("Solar power residuals from quadratic model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of a few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

This is the lagarithmic model for the average monthly solar outputs versus the average monthly prices of energy per EUR/MWH.
"""

#Logarithmic OLS regressions
Logpricevalues = ((np.log(io2))) 
Logsolarvalues = ((np.log(solar)))
Log = np.polyfit(np.log(io2), solar1, 1)
lin2 = LinearRegression()
lin2.fit(np.log(solar1), io2)
Solar_Log = sm.OLS(io2, solar1).fit()

Solar_Logpred = Solar_Log.predict(solar1) 
#OLS Logarithmic summary table
Solar_Log.summary() 
#Log
Log = np.polyfit(np.log(solar), io2, 1)
print(Log)

y = -8.46222795 * Logsolarvalues + 119.07321213

#Logarithmic OLS regression scatterplot
plt.suptitle("Logarithmic average monthly outputs versus average monthly prices of energy per EUR/MWH")
plt.title("R squared : 0.032")
plt.ylabel("Average monthly prices of energy per EUR/MWH")
plt.xlabel("Average monthly outputs")
plt.yscale("log") 
plt.xscale("log")
plt.plot(Logsolarvalues, io2, "o")
plt.plot(Logsolarvalues, y)

"""The blue dots represent the observations and the orange line is the logarithmic model of best fit.This is a very weak  and positive correlation between the average monthly outputs and the average monthly prices of energy per EUR/MWH."""

Solar_Log.summary() #OLS Logarithmic summary table



influenceSolarLog = Solar_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsSolarLog = influenceSolarLog.resid_studentized_internal


print(standardized_residualsSolarLog)

print(Solar_Logpred) # OLS logarithmic predicted values

#OLS Logarithmic predicted average monthly ratios versus actual ratios
plt.suptitle("Predicted average monthly outputs to EUR/MWH versus respective logarithmic  residuals ") 
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio") 
plt.ylabel("Amount from actual values")   
plt.legend("..#")
SolarLogRatioPredict = Solar_Logpred/predictionLog   
sns.residplot(x = SolarLogRatioPredict, y = pdToListSolar, lowess = True, color="g")

"""As one can observe this residual plot, one may notice some humps in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoskedacity.The green dots are the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predictions versus residuals
plt.suptitle("Residuals from logarithmic solar model versus predicted average monthly  logarithmic solar outputs") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = Solar_Logpred, y = standardized_residualsSolarLog, lowess = True, color="g")

# OLS Logarithmic average monthly predicted ratios versus residuals

plt.suptitle("Predicted average monthly logarithmic output to price of energy per EUR/MWH ratio versus respective solar residuals") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = SolarLogRatioPredict, y = standardized_residualsSolarLog/standardized_residualsPriceLog,lowess = True, color="g")

"""With the exception of few heteroskedastic outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias otherwise. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted logarithmic average monthly values versus actual values
plt.suptitle("Predicted average monthly logarithmic solar  outputs per EUR/MWH versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values")  
plt.legend("..#")
sns.residplot(x = Solar_Logpred, y = solar, lowess = True, color="g")

influenceSolarLog = Solar_Log.get_influence() 
#Logarithmic OLS regression residuals

"""As one can observe this residual plot, one may notice the negative slope in the fitted model. In addition, the observations are spread out in a distinct pattern, indicating bias and homoscedasticity.It would be reasonable to assume that this model does not fit the data. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

standardized_residualsSolarLog = influenceSolarLog.resid_studentized_internal


print(standardized_residualsSolarLog)

"""If the data is deemed to be stationary based off the given tests below, then that means that seasonality and trends are not factors in the values of the tested data. If the data is deemed to be non stationary, than seasonality and trends are indeed factors after all."""

#Dataframes analyzed by resource
dfsolar = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],
            "Solar" : [1130.392905866303, 1244.5252976190477, 1283.479138627187, 1461.5194986072424, 1920.2728494623657, 1998.6606397774688, 1973.7405913978494, 1738.9502688172042, 1591.2902777777779, 1082.279569892473, 1171.7194444444444, 874.3135935397039, 1025.741935483871, 1258.058908045977, 1382.9057873485867, 1390.4166666666667, 1689.1814516129032, 1942.8291666666667, 1915.7752355316286, 1835.8521505376343, 1548.213888888889, 1013.2832214765101, 951.3819444444445, 914.9758064516129, 1088.4180107526881, 1157.4613095238096, 1415.0915208613728, 1468.8277777777778, 1800.0524193548388, 1919.0236111111112, 2025.119623655914, 1754.159946236559, 1731.3666666666666, 1344.3261744966444, 1180.6458333333333, 1035.4260752688172, 1051.4193548387098, 1246.110119047619, 1352.3189771197847, 1501.6472222222221, 1526.899193548387, 1855.1972222222223, 2010.3458950201884, 1706.9301075268818, 1510.6527777777778, 999.786577181208, 831.6680555555556, 875.5900537634409], 
            
            "Dates": ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfsolar)
df_solar = pd.DataFrame.from_dict(dfsolar, orient = "columns")
print(df_solar)
df_solar["Ratio"] = df_solar["Solar"]/df_solar["Price"]
pdToListSolar = list(df_solar["Ratio"])
print(pdToListSolar)
#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_solar["Ratio"])


test_result=adfuller(df_solar["Ratio"])

df_solar['First Difference Solar Ratio'] = df_solar["Ratio"]- df_solar["Ratio"].shift(1) # Seasonality values
df_solar['Seasonal Difference Solar Ratio']=df_solar["Ratio"]- df_solar["Ratio"].shift(12)
df_solar.head()

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_solar["Ratio"])
plt.suptitle("Autocorrelations of Solar Ratio")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_solar["Ratio"])
plt.suptitle("Partialatocorrelations of Solar Ratio")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 

Solar_Ratio_Autocorrelations = sm.tsa.acf(df_solar["Ratio"],fft=False) #Autocorrelations
print(Solar_Ratio_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the auto and partial autocorrelation plots, indicating that the lags directly beforehand influenced the relationship between average monthly solar outputs and the average monthly prices of energy per EUR/MWH.
"""

plt.suptitle("Seasonal Difference of average monthly Solar output to price of energy per EUR/MWH ratio")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 

df_solar['Seasonal Difference Solar Ratio'].plot() # Seasonality Plot

"""The results from the list directly above will be analyzed for seasonality since the output and the respective average monthly price of energy per EUR/MWH are taken into account simultaneously.The  results are the outputs divided by the respective the average monthly prices of energy per EUR/MWH."""







#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result):
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_solar["Solar"])


test_result=adfuller(df_solar["Solar"])
from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_solar["Solar"])
plt.suptitle("Autocorrelations of Solar")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_solar["Solar"])
plt.suptitle("Partialatocorrelations of Solar")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 

plt.show



df_solar['First Difference'] = df_solar["Solar"]- df_solar["Solar"].shift(1) # Seasonality values
df_solar['Seasonal Difference']=df_solar["Solar"]- df_solar["Solar"].shift(12)
df_solar.head()

Solar_Ratio_Autocorrelations = sm.tsa.acf(df_solar["Solar"],fft=False) #Autocorrelations
print(Solar_Ratio_Autocorrelations)


Solar_Autocorrelations = sm.tsa.acf(df_solar["Solar"], fft=False) #Autocorrelations
print(Solar_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the of the autocorrelation plot, indicating that the lags  beforehand influenced the average monthly solar outputs.
"""

plt.suptitle("Seasonal Difference of average monthly Solar output to price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 

df_solar['Seasonal Difference'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted in the average monthly solar outputs."""

#Bell Curves 


solarResults_mean = np.mean(df_solar["Ratio"])
solarResults_std = np.std(df_solar["Ratio"])
 

solarResultspdf = stats.norm.pdf(df_solar["Ratio"].sort_values(), solarResults_mean, solarResults_std)


plt.plot(df_solar["Ratio"].sort_values(), solarResultspdf)
plt.xlim([0,100])  
plt.xlabel("Output to energy price per EUR/MWH", size=15)    
plt.title(f'Skewness for data: {skew(df_solar["Ratio"])}')
plt.suptitle("Frequency distribution of output to energy price per EUR/MWH ratios (scaled in decimals)")
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

#Bell Curves 


solarResults_mean = np.mean(df_solar["Solar"])
solarResults_std = np.std(df_solar["Solar"])
 

solarResultspdf = stats.norm.pdf(df_solar["Solar"].sort_values(), solarResults_mean, solarResults_std)


plt.plot(df_solar["Solar"].sort_values(), solarResultspdf)
plt.xlim([0,3000])  
plt.xlabel("Output in MWH ", size=15)
plt.title(f'Skewness for data: {skew(df_solar["Solar"])}')    
plt.suptitle("Frequency distribution of output amounts (scaled in decimals) " )
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

"""These bell shaped curves are roughly symmetrical, hence they have a normal distribution. The blue line in this plot represent the observation values and their likelihood of occurring.

If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.
"""



df_solar.describe(include = 'all')  # Description table of Dataframes

"""Below is the box and whisker plot for the distribution of the average monthly outputs of solar power and its the average monthly prices of energy per EUR/MWH."""

# Box and Whisker Plot
sns.set(style="darkgrid") 

plt.suptitle('Distribution of average monthly solar power outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly solar power outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')
sns.boxplot(x=Rounded_Y, y=[1130.392905866303, 1244.5252976190477, 1283.479138627187, 1461.5194986072424, 1920.2728494623657, 1998.6606397774688, 1973.7405913978494, 1738.9502688172042, 1591.2902777777779, 1082.279569892473, 1171.7194444444444, 874.3135935397039, 1025.741935483871, 1258.058908045977, 1382.9057873485867, 1390.4166666666667, 1689.1814516129032, 1942.8291666666667, 1915.7752355316286, 1835.8521505376343, 1548.213888888889, 1013.2832214765101, 951.3819444444445, 914.9758064516129, 1088.4180107526881, 1157.4613095238096, 1415.0915208613728, 1468.8277777777778, 1800.0524193548388, 1919.0236111111112, 2025.119623655914, 1754.159946236559, 1731.3666666666666, 1344.3261744966444, 1180.6458333333333, 1035.4260752688172, 1051.4193548387098, 1246.110119047619, 1352.3189771197847, 1501.6472222222221, 1526.899193548387, 1855.1972222222223, 2010.3458950201884, 1706.9301075268818, 1510.6527777777778, 999.786577181208, 875.5900537634409, 831.6680555555556])
plt.show()

"""This box and whisker plot depicts the frequencies between the distribution of the monthly average output of solar power produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of solar power produced, which was inbetween 1000 and 1800 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), solar power output was at roughly 1400 units. At approximately 71.07 EUR/MWH, solar power produced its highest output, which was slighty below 7000 units. The lowest amount produced, whcih was slightly above 800 units, was at the price of approximently 66.62 EUR/MWH.When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was at roughly 110 units. At approximently 66.62 EUR/MWH, solar power produced slightly above 800 units."""

plt.suptitle('Distribution of average monthly solar power outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly solar power outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH') 
  
# Stem Plot
plt.stem(Rounded_Y, solar)

"""This plot depicts the frequencies between the distribution of the monthly average output of solar power produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of solar power produced, which was inbetween 1000 and 1800 units, was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), solar power output was at roughly 1400 units. At approximately 71.07 EUR/MWH, solar power produced its highest output, which was slighty below 7000 units. The lowest amount produced, whcih was slightly above 800 units, was at the price of approximently 66.62 EUR/MWH.When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was at roughly 110 units. At approximently 66.62 EUR/MWH, solar power produced slightly above 800 units. Each blue dot at the end of the blue lines represent an observation."""

#Histograms
solar_Dict = {key: i for i, key in enumerate(solar)}

def Hist_solar(solar_Dict):
    for k, v in solar_Dict.items(): print(f"{v}:{k}") 
print(solar_Dict)

plt.bar(list(solar_Dict.values()), solar_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs of solar power")
plt.ylabel('Average monthly outputs') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This histogram is  multimodal, with sudden trenches in the average monthly outputs occurring roughly every ten months. It would be fair to assume that this fluctuating pattern is seasonal."""

pdToListSolar_Dict = {key: i for i, key in enumerate(pdToListSolar)}

def Hist_pdToListSolar(pdToListSolar_Dict):
    for k, v in pdToListSolar_Dict.items(): print(f"{v}:{k}") #Histograms
print(pdToListSolar_Dict)

plt.bar(list(pdToListSolar_Dict.values()), pdToListSolar_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs/price ratio of solar power")
plt.ylabel('Average monthly outputs/price ratio') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""This hisogram is multimodal, with the modals occurring as a result of sharp increases in output amount followed by deep trenches occurring roughly every ten months. It would be fair to assume that this fluctuating pattern is seasonal."""

standardized_residualsSolarQuad/standardized_residualsPriceQuad

SolarRatioQuad = list(standardized_residualsSolarQuad/standardized_residualsPriceQuad)

#OLS predicted quadratic average monthly ratios versus residuals 
SolarQuadRatioPredict  = Solar_ypred/ypred 

sns.residplot(x = SolarQuadRatioPredict , y = standardized_residualsSolarQuad/standardized_residualsPriceQuad , lowess = True, color="g")


plt.suptitle("Predicted average monthly outputs to EUR/MWH versus respective quadratic model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the residuals seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Predicted OLS linear average monthly ratios versus residuals
SolarRegRatioPredict = predictionssolar/predictions

sns.residplot(x = SolarRegRatioPredict, y = standardized_residualsSolar/standardized_residualsPricereg, lowess = True, color="g")

plt.suptitle("Predicted solar power output to EUR/MWH versus respective linear model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted linear average monthly ratios versus actual ratios
plt.suptitle("Predicted solar power linear output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")
sns.residplot(x = SolarRegRatioPredict, y = pdToListSolar, lowess = True, color="g")

"""As one can observe this residual plot, one may notice a slight hump in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#OLS predicted quadratic average monthly ratios versus actual ratios 

sns.residplot(x = SolarQuadRatioPredict , y = pdToListSolar, lowess = True, color="g")
plt.suptitle("Predicted quadratic solar power output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice an arching hump in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

Below is a scatterplot depicting the relationship between the average monthly price of energy per EUR/MWH and the average monthly outputs of solar power.
"""

modelsolar = stats.linregress([1130.392905866303, 1244.5252976190477, 1283.479138627187, 1461.5194986072424, 1920.2728494623657, 1998.6606397774688, 1973.7405913978494, 1738.9502688172042, 1591.2902777777779, 1082.279569892473, 1171.7194444444444, 874.3135935397039, 1025.741935483871, 1258.058908045977, 1382.9057873485867, 1390.4166666666667, 1689.1814516129032, 1942.8291666666667, 1915.7752355316286, 1835.8521505376343, 1548.213888888889, 1013.2832214765101, 951.3819444444445, 914.9758064516129, 1088.4180107526881, 1157.4613095238096, 1415.0915208613728, 1468.8277777777778, 1800.0524193548388, 1919.0236111111112, 2025.119623655914, 1754.159946236559, 1731.3666666666666, 1344.3261744966444, 1180.6458333333333, 1035.4260752688172, 1051.4193548387098, 1246.110119047619, 1352.3189771197847, 1501.6472222222221, 1526.899193548387, 1855.1972222222223, 2010.3458950201884, 1706.9301075268818, 1510.6527777777778, 999.786577181208, 875.5900537634409, 831.6680555555556],[64.9490188172043, 56.383854166666666, 55.522462987886975, 58.35408333333333, 57.29405913978498, 65.9749027777778, 71.07204301075271, 63.99806451612899, 60.254791666666634, 59.40676510067113, 60.72679166666668, 61.901760752688226, 45.57872311827956, 36.752083333333374, 36.81800807537014, 32.61866666666666, 34.691370967741896, 46.266319444444434, 47.50201612903221, 47.6023387096774, 50.40559722222224, 60.182429530201404, 62.58105555555558, 67.5951344086021, 79.49208333333331, 59.83779761904767, 50.95989232839837, 51.71791666666662, 53.77262096774189, 56.25822222222224, 55.252580645161316, 54.08432795698931, 55.81655555555558, 63.92528859060403, 65.43065277777781, 65.15127688172035, 56.51197580645163, 60.877098214285674, 48.279717362045766, 50.40073611111113, 61.633763440860214, 64.34813888888884, 67.78344086021498, 70.36391129032262, 76.9140416666666, 70.36221476510062, 67.0426075268817, 66.62351388888881]
)



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(solar,io2)
print("slope: %f    intercept: %f" % (slope, intercept))
# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(solar,io2, "o")
plt.title(f"R squared: {modelsolar.rvalue**2}")
f = lambda x: 	-0.005078  *x + 65.130153
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.legend("#")
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly solar power output') 
plt.show()

There is a very weak and negative correlation between the outputs and their respective the average monthly prices of energy per EUR/MWH.The blue dots are the observations and orange line is the linear model of best fit.

"""The next resource analyzed was fossil gas.

This is the linear model used for the average monthly fossil gas outputs versus the average monthly prices of energy per EUR/MWH.
"""



modelfossilfuelgas = stats.linregress([4850.009549795362, 4674.135416666667, 4614.7523553162855, 4952.123955431754, 4415.3494623655915, 4934.930458970793, 6529.490591397849, 4919.491935483871, 5076.581944444444, 5231.5, 5387.741666666667, 5062.588156123822, 5271.1196236559135, 4450.360632183908, 4336.594885598924, 4263.481944444445, 4508.034946236559, 4994.327777777778, 5475.64333781965, 4869.987903225807, 4643.55, 6222.820134228188, 6439.015277777778, 6176.176075268817, 6412.591397849463, 5561.144345238095, 5337.418573351279, 5169.840277777777, 5493.271505376344, 7194.280555555555, 7366.073924731183, 6701.935483870968, 7092.451388888889, 6961.8, 8534.818055555555, 5835.915322580645, 5687.715053763441, 5468.040178571428, 4936.013458950202, 4745.273611111111, 5777.162634408603, 5807.555555555556, 5865.691790040377, 6119.346774193548, 5842.0625, 6127.481879194631, 6463.5362903225805, 6945.804166666667],
 [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

#Dataframes analyzed by resource
dfFossilGas = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Fossil_Gas" :[4850.009549795362, 4674.135416666667, 4614.7523553162855, 4952.123955431754, 4415.3494623655915, 4934.930458970793, 6529.490591397849, 4919.491935483871, 5076.581944444444, 5231.5, 5387.741666666667, 5062.588156123822, 5271.1196236559135, 4450.360632183908, 4336.594885598924, 4263.481944444445, 4508.034946236559, 4994.327777777778, 5475.64333781965, 4869.987903225807, 4643.55, 6222.820134228188, 6439.015277777778, 6176.176075268817, 6412.591397849463, 5561.144345238095, 5337.418573351279, 5169.840277777777, 5493.271505376344, 7194.280555555555, 7366.073924731183, 6701.935483870968, 7092.451388888889, 6961.8, 8534.818055555555, 5835.915322580645, 5687.715053763441, 5468.040178571428, 4936.013458950202, 4745.273611111111, 5777.162634408603, 5807.555555555556, 5865.691790040377, 6119.346774193548, 5842.0625, 6127.481879194631, 6463.5362903225805, 6945.804166666667],"Dates" : ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfFossilGas)
df_FossilGas= pd.DataFrame.from_dict(dfFossilGas, orient = "columns")
print(df_FossilGas)
df_FossilGas["Ratio"] = df_FossilGas["Fossil_Gas"]/df_FossilGas["Price"]
pdToListFossilGas = list(df_FossilGas["Ratio"])
print(pdToListFossilGas)



#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(fossil_gas,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot
plt.plot(fossil_gas,io2, "o")
plt.title(f"R squared: {modelfossilfuelgas.rvalue**2}")
f = lambda x: 	0.005835     *x + 25.066272
plt.plot(x,f(x), c="orange", label="line of best fit")
plt.legend("#")
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.xlabel('Average price of energy per EUR/MWH for each month ') 
plt.ylabel('Average monthly fossil gas output') 
plt.show()
There is a slightly moderate yet postive correlation between the outputs and their respective the average monthly prices of energy per EUR/MWH.The blue dots are the observations and orange line is the linear model of best fit.

#Linear OLS regression
fossil_gas1 = fossil_gas
fossil_gas1 = sm.add_constant(fossil_gas1)
modelFossilGasreg = sm.OLS(io2,fossil_gas1).fit()
predictionsFossilGas = modelFossilGasreg.predict(fossil_gas1)
modelFossilGasreg.summary() 
#OLS Linear Summary Table

#Linear OLS regression residuals 
influenceFossilGasreg = modelFossilGasreg.get_influence()


standardized_residualsFossilGas = influenceFossilGasreg.resid_studentized_internal


print(standardized_residualsFossilGas)

print(predictionsFossilGas)
#Linear OLS Predicted Values

#Predicted OLS linear values versus residual values
sns.residplot(x = predictionsFossilGas, y =standardized_residualsFossilGas, lowess = True, color="g")

plt.suptitle("Fossil gas residuals from linear model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice that the lowess line has a  arching hump and that the residuals are spread out in a pattern; indicating heteroskedasticity and bias.This indicates that the model does not fit the data.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly linear fossil gas outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictionsFossilGas, y = fossil_gas, lowess = True, color="g")
#Predicted OLS average monthly linear values versus actual values

"""As one can observe this residual plot, one may notice the positive slope in the fitted model. In addition, the observations are spread out in a distinct pattern, indicating bias and homoscedasticity.It would be reasonable to assume that this model does not fit the data. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

print(fossil_gas)

fossil_gas1 = fossil_gas
fossil_gas1 = sm.add_constant(fossil_gas1)

#Logarithmic OLS regressions
Logpricevalues = ((np.log(io2))) 
LogFossilGasvalues = ((np.log(fossil_gas)))
Log = np.polyfit(np.log(io2), fossil_gas1, 1)
lin2 = LinearRegression()
lin2.fit(np.log(fossil_gas1), io2)
FossilGas_Log = sm.OLS(io2, fossil_gas1).fit()

FossilGas_Logpred = FossilGas_Log.predict(fossil_gas1) 
#OLS Logarithmic summary table
FossilGas_Log.summary() 
#Log
Log = np.polyfit(np.log(fossil_gas), io2, 1)
print(Log)

y = 36.53286955 * LogFossilGasvalues -257.09729841

#Logarithmic OLS regression scatterplot
plt.suptitle("Logarithmic average monthly outputs versus average monthly prices of energy per EUR/MWH")
plt.title("R squared : 0.279")
plt.ylabel("Average monthly prices of energy per EUR/MWH")
plt.xlabel("Average monthly outputs")
plt.yscale("log") 
plt.xscale("log")
plt.plot(LogFossilGasvalues, io2, "o")
plt.plot(LogFossilGasvalues, y)

"""The blue dots represent the observations and the orange line is the linear model of best fit.This is a moderate and positive correlation between the average monthly outputs and the average monthly prices of energy per EUR/MWH."""

FossilGas_Log.summary() #OLS Logarithmic summary table

influenceFossilGasLog = FossilGas_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsFossilGasLog = influenceFossilGasLog.resid_studentized_internal


print(standardized_residualsFossilGasLog)

print(FossilGas_Logpred) # OLS logarithmic predicted values

#OLS Logarithmic predicted average monthly ratios versus actual ratios 

plt.suptitle("Predicted average monthly logarithmic fossil gas outputs to EUR/MWH versus respective logarithmic  residuals ") 
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio") 
plt.ylabel("Amount from actual values")   
plt.legend("..#")
FossilGasLogRatioPredict = FossilGas_Logpred/predictionLog   
sns.residplot(x = FossilGasLogRatioPredict, y = pdToListFossilGas, lowess = True, color="g")

"""As one can observe this residual plot, one may notice an arching hump in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predictions versus residuals

plt.suptitle("Residuals from logarithmic fossil gas model versus predicted average monthly logarithmic fossil gas outputs ") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = FossilGas_Logpred, y =standardized_residualsFossilGasLog, lowess = True, color="g")

"""As one can observe this residual plot, one may notice that the lowess line has a  arching hump and that the residuals are spread out in a pattern; indicating heteroskedasticity and bias.This indicates that the model does not fit the data.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predicted ratios versus residuals

plt.suptitle("Predicted average monthly logarithmic fossil gas output to price of energy per EUR/MWH ratio versus respective residuals")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 
plt.legend("..#")
sns.residplot(x = FossilGasLogRatioPredict, y = standardized_residualsFossilGasLog/standardized_residualsPriceLog,lowess = True, color="g")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly logarithmic outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Actual values")  
plt.legend("..#")
sns.residplot(x = FossilGas_Logpred, y = fossil_gas, lowess = True, color="g")
 # OLS predicted logarithmic average monthly values versus actual values

"""As one can observe this residual plot, one may notice the negative slope in the fitted model. In addition, the observations are spread out in a distinct pattern, indicating bias and homoscedasticity.It would be reasonable to assume that this model does not fit the data. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

influenceFossilGasLog = FossilGas_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsFossilGasLog = influenceFossilGasLog.resid_studentized_internal


print(standardized_residualsFossilGasLog)

"""This is the quadratic model used for the average monthly fossil gas outputs versus the average monthly prices of energy per EUR/MWH."""

#Quadratic OLS regression 
from sklearn.preprocessing import PolynomialFeatures
polynomial_features = PolynomialFeatures(degree=2)

modelFossilGasquad = np.poly1d(np.polyfit(fossil_gas,io2,2))
print(modelFossilGasquad)

fossil_gas1 = sm.add_constant(fossil_gas1)
fossil_gas2 = polynomial_features.fit_transform(fossil_gas1)
from sklearn.preprocessing import PolynomialFeatures
  
poly = PolynomialFeatures(degree = 3)
X_poly = poly.fit_transform(fossil_gas2)
  
FossilGas_Quad = poly.fit(X_poly, fossil_gas)
lin2 = LinearRegression()
lin2.fit(X_poly, fossil_gas)
FossilGas_Quad = sm.OLS(io2, fossil_gas2).fit()

# OLS Predicted Quadratic values
FossilGas_ypred = FossilGas_Quad.predict(fossil_gas2) 
#OLS Quadratic Summary Table
FossilGas_Quad.summary()

#Quadratic Scatterplots
plt.scatter(fossil_gas,io2, color = 'blue')
polyline = np.linspace(start = 2000, stop =10000 , num = 100)
plt.plot(polyline, modelFossilGasquad(polyline))
plt.title("R squared : 0.439")
plt.suptitle('Quadratic for average monthly prices of energy per EUR/MWH versus average monthly outputs')
plt.xlabel('Average monthly outputs')
plt.ylabel('Average monthly prices of energy per EUR/MWH')



  
plt.show()

"""The blue dots represent the observations and the blue line is the quadratic model of best fit.This is a moderate and postive correlation between the average monthly outputs and the average monthly price of energy per EUR/MWH."""

print(FossilGas_ypred) # OLS quadratic predicted values

FossilGas_Quad.summary()

FossilGas_Quad.summary()

influenceFossilGasQuad = FossilGas_Quad.get_influence() #Quadratic OLS residuals


standardized_residualsFossilGasQuad = influenceFossilGasQuad.resid_studentized_internal


print(standardized_residualsFossilGasQuad)

FossilGas_Quad.summary()

#Predicted average monthly OLS quadratic values versus residuals
sns.residplot(x = FossilGas_ypred, y =standardized_residualsFossilGasQuad, lowess = True, color="g")

plt.suptitle("Fossil gas residuals from quadratic model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice an arching hump in the fitted model, which form a nonlinear pattern. However, the residuals are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly quadratic fossil gas outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = FossilGas_ypred, y = fossil_gas, lowess = True, color="g")
 #Predicted OLS average monthly quadratic values versus actual values

"""As one can observe this residual plot, one may notice some sharp spikes in the fitted model, which form a nonlinear pattern. However, the observations are spread out in a "C" shaped pattern; indicating heteroskedasticity and bias.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

If the data is deemed to be stationary based off the given tests below, then that means that seasonality and trends are not factors in the values of the tested data. If the data is deemed to be non stationary, than seasonality and trends are indeed factors after all.
"""

#ADF Tests 
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_FossilGas["Fossil_Gas"])


test_result=adfuller(df_FossilGas["Fossil_Gas"])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_FossilGas["Fossil_Gas"])
plt.suptitle("Autocorrelations of Fossil Gas")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_FossilGas["Fossil_Gas"])
plt.suptitle("Partialatocorrelations of Fossil Gas")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags')

Fossil_Gas_Autocorrelations = sm.tsa.acf(df_FossilGas["Fossil_Gas"],fft=False) #Autocorrelations
print(Fossil_Gas_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the autocorrelation plot, indicating that the lags beforehand influenced the  average monthly fossil gas outputs.
"""

df_FossilGas['First Difference'] = df_FossilGas["Fossil_Gas"]- df_FossilGas["Fossil_Gas"].shift(1) # Seasonality values
df_FossilGas['Seasonal Difference']=df_FossilGas["Fossil_Gas"]- df_FossilGas["Fossil_Gas"].shift(12)
df_FossilGas.head()

plt.suptitle("Seasonal Difference of average monthly Fossil Gas output to price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_FossilGas['Seasonal Difference'].plot() # Seasonality Plot

"""As one can observe, there are no obvious patterns depicted in the average monthly fossil gas outputs.The blue line represents the trend of the outputs."""

#Bell Curves 


FossilGasResults_mean = np.mean(df_FossilGas["Ratio"])
FossilGasResults_std = np.std(df_FossilGas["Ratio"])
 

FossilGasResultspdf = stats.norm.pdf(df_FossilGas["Ratio"].sort_values(), FossilGasResults_mean, FossilGasResults_std)


plt.plot(df_FossilGas["Ratio"].sort_values(), FossilGasResultspdf)
plt.xlim([0,200])  
plt.xlabel("Output to energy price per EUR/MWH", size=15)    
plt.suptitle("Frequency distribution of output to energy price per EUR/MWH ratios (scaled in decimals)")
plt.title(f'Skewness for data: {skew(df_FossilGas["Ratio"])}') 
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

#Bell Curves 


FossilGasResults_mean = np.mean(df_FossilGas["Fossil_Gas"])
FossilGasResults_std = np.std(df_FossilGas["Fossil_Gas"])
 

FossilGasResultspdf = stats.norm.pdf(df_FossilGas["Fossil_Gas"].sort_values(), FossilGasResults_mean, FossilGasResults_std)


plt.plot(df_FossilGas["Fossil_Gas"].sort_values(), FossilGasResultspdf)
plt.xlim([0,10000])  
plt.xlabel("Output in MWH ", size=15)    
plt.title(f'Skewness for data: {skew(df_FossilGas["Fossil_Gas"])}') 
plt.suptitle("Frequency distribution of output amounts (scaled in decimals) " )
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

"""These bell shaped curves area skewed to the right. Hence, they have a asymmetrical distribution. The blue line in this plot represent the observation values and their likelihood of occurring.

If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.
"""

#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_FossilGas["Ratio"])
from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_FossilGas["Ratio"])
plt.suptitle("Autocorrelations of Fossil Gas ratio")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_FossilGas["Ratio"])
plt.suptitle("Partialatocorrelations of Fossil Gas ratio")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 

plt.show



"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the autocorrelation plot, indicating that the lags directly beforehand influenced the relationship between average monthly fossil gas outputs and the average monthly prices of energy per EUR/MWH.
"""

df_FossilGas['First Difference in Fossil Gas Ratio'] = df_FossilGas["Ratio"]- df_FossilGas["Ratio"].shift(1) # Seasonality values
df_FossilGas['Seasonal Difference Fossil Gas Ratio']=df_FossilGas["Ratio"]- df_FossilGas["Ratio"].shift(12)
df_FossilGas.head()

Fossil_Gas_Ratio_Autocorrelations = sm.tsa.acf(df_FossilGas["Fossil_Gas"],fft=False) #Autocorrelations
print(Fossil_Gas_Ratio_Autocorrelations)

plt.suptitle("Seasonal Difference of Fossil Gas output  to price of energy per EUR/MWH ratio")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_FossilGas['Seasonal Difference Fossil Gas Ratio'].plot() # Seasonality Plot

"""The blue line represents the trend of the outputs. As one can observe, there are no obvious patterns depicted between the average monthly fossil gas outputs and the average monthly prices of energy per EUR/MWH."""

print(fossil_gas)

df_FossilGas.describe(include = 'all')  # Description table of Dataframes

"""Below is the box and whisker plot for the distribution of the average monthly outputs of fossil gas and its the average monthly prices of energy per EUR/MWH."""

# Box and Whisker Plot
sns.set(style="darkgrid") 

plt.suptitle('Distribution of average monthly fossil gas outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly fossil gas outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')
sns.boxplot(x=Rounded_Y, y=[4850.009549795362, 4674.135416666667, 4614.7523553162855, 4952.123955431754, 4415.3494623655915, 4934.930458970793, 6529.490591397849, 4919.491935483871, 5076.581944444444, 5231.5, 5387.741666666667, 5062.588156123822, 5271.1196236559135, 4450.360632183908, 4336.594885598924, 4263.481944444445, 4508.034946236559, 4994.327777777778, 5475.64333781965, 4869.987903225807, 4643.55, 6222.820134228188, 6439.015277777778, 6176.176075268817, 6412.591397849463, 5561.144345238095, 5337.418573351279, 5169.840277777777, 5493.271505376344, 7194.280555555555, 7366.073924731183, 6701.935483870968, 7092.451388888889, 6961.8, 8534.818055555555, 5835.915322580645, 5687.715053763441, 5468.040178571428, 4936.013458950202, 4745.273611111111, 5777.162634408603, 5807.555555555556, 5865.691790040377, 6119.346774193548, 5842.0625, 6127.481879194631, 6463.5362903225805, 6945.804166666667])
plt.show()

"""This box and whisker plot depicts the frequencies between the distribution of the monthly average output of fossil gas produced and its the average monthly prices of energy per EUR/MWH. As one can observe, there is no area in which the values are concentrated. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), fossil gas output was slightly above 4000 units whcih was also the lowest amount produced. At approximately 66.62 EUR/MWH, fossil gas produced its highest output, which was slighty below 9000 units. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was at roughly 6500 units."""



plt.suptitle('Distribution of average monthly fossil gas outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly fossil gas outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')  
  
# Stem Plot 
plt.stem(Rounded_Y, fossil_gas)

"""This plot depicts the frequencies between the distribution of the monthly average output of fossil gas produced and its the average monthly prices of energy per EUR/MWH. As one can observe, there is no area in which the values are concentrated. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), fossil gas output was slightly above 4000 units whcih was also the lowest amount produced. At approximately 66.62 EUR/MWH, fossil gas produced its highest output, which was slighty below 9000 units. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was at roughly 6500 units.Each blue dot at the end of the blue lines represent an observation."""

#Histograms
fossil_gas_Dict = {key: i for i, key in enumerate(fossil_gas)}

def Hist_fossil_gas(fossil_gas_Dict):
    for k, v in fossil_gas_Dict.items(): print(f"{v}:{k}") 
print(fossil_gas_Dict)

plt.bar(list(fossil_gas_Dict.values()), fossil_gas_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs of fossil gas")
plt.ylabel('Average monthly outputs') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This histogram is  bimodal, but indicates a gradual increase in the average monthly outputs. There are no sudden changes in the average monthly outputs."""

pdToListFossilGas_Dict = {key: i for i, key in enumerate(pdToListFossilGas)}

def Hist_pdToListFossilGas(pdToListFossilGas_Dict):
    for k, v in pdToListFossilGas_Dict.items(): print(f"{v}:{k}") #Histograms
print(pdToListFossilGas_Dict)

plt.bar(list(pdToListFossilGas_Dict.values()), pdToListFossilGas_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs/price ratio of fossil gas")
plt.ylabel('Average monthly outputs/price ratio') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This histogram is  bimodal with gradual declines in output amount occurring after every modal and gradual increases before every modal."""



#OLS predicted quadratic average monthly ratios versus residuals
FossilGasQuadRatioPredict  = FossilGas_ypred/ypred 

sns.residplot(x = FossilGasQuadRatioPredict , y = standardized_residualsFossilGasQuad/standardized_residualsPriceQuad , lowess = True, color="g")



plt.suptitle("Predicted average monthly outputs to EUR/MWH versus respective quadratic model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Predicted OLS linear average monthly ratios versus residuals

FossilGasRegRatioPredict = predictionsFossilGas/predictions

sns.residplot(x = FossilGasRegRatioPredict, y = standardized_residualsFossilGas/standardized_residualsPricereg, lowess = True, color="g")

plt.suptitle("Predicted average monthly outputs to EUR/MWH versus respective linear model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#OLS predicted quadratic average monthly ratios versus actual ratios 
sns.residplot(x = FossilGasQuadRatioPredict ,y = pdToListFossilGas, lowess = True, color="g")
plt.suptitle("Predicted quadratic fossil gas output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted linear average monthly ratios versus actual ratios
plt.suptitle("Predicted linear fossil gas output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")
sns.residplot(x = FossilGasRegRatioPredict, y = pdToListFossilGas, lowess = True, color="g")



"""As one can observe this residual plot, one may notice that the lowess line has an arching hump and that the observations are spread out in a pattern; indicating heteroscedasticity and bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

Below is a scatterplot depicting the relationship between the average monthly price of energy per EUR/MWH and the average monthly outputs of fossil fuel gas.
"""



modelfossilfuelgas = stats.linregress([4850.009549795362, 4674.135416666667, 4614.7523553162855, 4952.123955431754, 4415.3494623655915, 4934.930458970793, 6529.490591397849, 4919.491935483871, 5076.581944444444, 5231.5, 5387.741666666667, 5062.588156123822, 5271.1196236559135, 4450.360632183908, 4336.594885598924, 4263.481944444445, 4508.034946236559, 4994.327777777778, 5475.64333781965, 4869.987903225807, 4643.55, 6222.820134228188, 6439.015277777778, 6176.176075268817, 6412.591397849463, 5561.144345238095, 5337.418573351279, 5169.840277777777, 5493.271505376344, 7194.280555555555, 7366.073924731183, 6701.935483870968, 7092.451388888889, 6961.8, 8534.818055555555, 5835.915322580645, 5687.715053763441, 5468.040178571428, 4936.013458950202, 4745.273611111111, 5777.162634408603, 5807.555555555556, 5865.691790040377, 6119.346774193548, 5842.0625, 6127.481879194631, 6463.5362903225805, 6945.804166666667],
 [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])



"""The next resource analyzed was biomass.

This is the linear model for the average monthly biomass outputs versus the average monthly prices of energy per EUR/MWH.
"""



modelbiomass = stats.linregress([483.73533424283767, 470.1502976190476, 468.1063257065949, 426.32033426183847, 503.5698924731183, 485.99860917941584, 512.4879032258065, 518.9475806451613, 517.1069444444445, 519.5564516129032, 503.6166666666667, 483.92462987886944, 459.9959677419355, 430.3448275862069, 429.7442799461642, 286.8902777777778, 337.2029569892473, 340.3375, 351.8896366083446, 369.64516129032256, 349.39166666666665, 336.2187919463087, 355.57301808066757, 338.7768817204301, 347.28360215053766, 351.3645833333333, 284.40242261103634, 280.7611111111111, 353.5040322580645, 339.9791666666667, 367.7069892473118, 362.8790322580645, 351.96805555555557, 343.938255033557, 354.59305555555557, 347.1733870967742, 343.8481182795699, 360.51190476190476, 307.2543741588156, 299.3930555555556, 318.30913978494624, 351.73333333333335, 367.2207267833109, 361.3252688172043, 355.46805555555557, 317.9275167785235, 320.16129032258067, 342.10277777777776],
 [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

biomass1 = biomass
biomass1 = sm.add_constant(biomass1)

#Dataframes analyzed by resource
dfbiomass = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Biomass" : [483.73533424283767, 470.1502976190476, 468.1063257065949, 426.32033426183847, 503.5698924731183, 485.99860917941584, 512.4879032258065, 518.9475806451613, 517.1069444444445, 519.5564516129032, 503.6166666666667, 483.92462987886944, 459.9959677419355, 430.3448275862069, 429.7442799461642, 286.8902777777778, 337.2029569892473, 340.3375, 351.8896366083446, 369.64516129032256, 349.39166666666665, 336.2187919463087, 355.57301808066757, 338.7768817204301, 347.28360215053766, 351.3645833333333, 284.40242261103634, 280.7611111111111, 353.5040322580645, 339.9791666666667, 367.7069892473118, 362.8790322580645, 351.96805555555557, 343.938255033557, 354.59305555555557, 347.1733870967742, 343.8481182795699, 360.51190476190476, 307.2543741588156, 299.3930555555556, 318.30913978494624, 351.73333333333335, 367.2207267833109, 361.3252688172043, 355.46805555555557, 317.9275167785235, 320.16129032258067, 342.10277777777776],
 "Dates" :  ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12'],})

print(dfbiomass)
df_biomass= pd.DataFrame.from_dict (dfbiomass, orient = "columns")
print(df_biomass)
df_biomass["Ratio"] = df_biomass["Biomass"]/df_biomass["Price"]
pdToListBiomass = list(df_biomass["Ratio"])
print(pdToListBiomass)

biomass1 = biomass
biomass1 = sm.add_constant(biomass1)

"""This is the logarithmic outputs for the average monthly biomass outputs versus the average monthly prices of energy per EUR/MWH/"""

#Logarithmic OLS regressions
Logpricevalues = ((np.log(io2))) 
Logbiomassvalues = ((np.log(biomass)))
Log = np.polyfit(np.log(io2), biomass1, 1)
lin2 = LinearRegression()
lin2.fit(np.log(biomass1), io2)
Biomass_Log = sm.OLS(io2, biomass1).fit()

Biomass_Logpred = Biomass_Log.predict(biomass1) 
#OLS Logarithmic summary table
Biomass_Log.summary() 
#Log
Log = np.polyfit(np.log(biomass), io2, 1)
print(Log)

y = 7.82705763 * Logbiomassvalues + 11.41916835

#Logarithmic OLS regression scatterplot
plt.suptitle("Logarithmic average monthly outputs versus average monthly prices of energy per EUR/MWH")
plt.title("R squared : 0.016")
plt.ylabel("Average monthly prices of energy per EUR/MWH")
plt.xlabel("Average monthly outputs")
plt.yscale("log") 
plt.xscale("log")
plt.plot(Logbiomassvalues, io2, "o")
plt.plot(Logbiomassvalues, y)

plt.xlim([1, 7])

"""The blue dots represent the observations and the orange line is the logarithmic model of best fit.This is a very weak  and positive correlation between the average monthly outputs and the average monthly prices of energy per EUR/MWH."""

Biomass_Log.summary() #OLS Logarithmic summary table

influenceBiomassLog = Biomass_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsBiomassLog = influenceBiomassLog.resid_studentized_internal


print(standardized_residualsBiomassLog)

print(Biomass_Logpred) # OLS logarithmic predicted values

#OLS Logarithmic predicted average monthly ratios versus actual ratios 
plt.suptitle("Predicted average monthly biomass output to price of energy per EUR/MWH versus actual ratios ") 
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values")  
plt.legend("..#")
BiomassLogRatioPredict = Biomass_Logpred/predictionLog 
sns.residplot(x = BiomassLogRatioPredict, y = pdToListBiomass, lowess = True, color="g")

"""As one can observe this residual plot, one may notice some humps in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Residuals from logarithmic biomass  model versus predicted average monthly biomass outputs")
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values") 
plt.legend("..#")
sns.residplot(x = Biomass_Logpred, y =standardized_residualsBiomassLog, lowess = True, color="g")
# OLS Logarithmic average monthly predictions versus residuals

"""As one can observe this residual plot, one may notice some humps in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predicted ratios versus residuals
plt.suptitle("Predicted average monthly logarithmic biomass output to price of energy per EUR/MWH ratio versus respective biomass residuals") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")
plt.legend("..#")
sns.residplot(x = BiomassLogRatioPredict, y = standardized_residualsBiomassLog/standardized_residualsPriceLog, lowess = True, color="g")



"""With the exception of a few heteroskedastic outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias otherwise. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly logarithmic biomass outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = Biomass_Logpred, y = biomass, lowess = True, color="g")
 # OLS predicted logarithmic average monthly values versus actual values

"""The predictions seem to be nearly the same as the actual values. This indicates a lack of bias, constant variance, and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

influenceBiomassLog = Biomass_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsBiomassLog = influenceBiomassLog.resid_studentized_internal


print(standardized_residualsBiomassLog)

"""This is the linear model used for the average monthly biomass output versus the average monthly prices of energy per EUR/MWH."""

#Linear OLS regression
biomass1 = biomass
biomass1 = sm.add_constant(biomass1)
modelbiomassreg = sm.OLS(io2, biomass1).fit()
predictionsbiomass = modelbiomassreg.predict(biomass1) 


modelbiomassreg.summary() 
#OLS Linear Summary Table

#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(biomass,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(biomass,io2, "o")
plt.title(f"R squared: {modelbiomass.rvalue**2}")
f = lambda x: 	0.018365   *x + 50.815924
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.suptitle("Average total monthly output versus average monthly price of energy per EUR/MWH")
plt.legend("#")
plt.ylabel('Average price of energy per EUR/MWH for each month ') 
plt.xlabel('Average monthly biomass output') 
plt.show()

There is a very weak correlation between the outputs and their respective the average monthly prices of energy per EUR/MWH. The blue dots are the observations and orange line is the linear model of best fit.

#Linear OLS regression residuals 
influenceBiomass = modelbiomassreg.get_influence()


standardized_residualsBiomass = influenceBiomass.resid_studentized_internal


print(standardized_residualsBiomass)

print(predictionsbiomass)
#Linear OLS Predicted Values

plt.suptitle("Predicted average monthly linear biomass outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictionsbiomass, y = biomass, lowess = True, color="g")
#Predicted OLS average monthly linear values versus actual values

"""With the exception of a few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Predicted OLS linear values versus residual values
sns.residplot(x = predictionsbiomass, y = standardized_residualsBiomass, lowess = True, color ="g")

plt.suptitle("Biomass residuals from linear model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice some humps in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""



"""This is the quadratic model used for the average monthly biomass output versus the average monthly prices of energy per EUR/MWH."""

#Quadratic OLS regression 
from sklearn.preprocessing import PolynomialFeatures
polynomial_features = PolynomialFeatures(degree=2)

modelBiomassquad = np.poly1d(np.polyfit(biomass,io2,2))
print(modelBiomassquad)



biomass1 = sm.add_constant(biomass1)
biomass2 = polynomial_features.fit_transform(biomass1)
from sklearn.preprocessing import PolynomialFeatures
  
poly = PolynomialFeatures(degree = 3)
X_poly = poly.fit_transform(biomass1)
  
Biomass_Q = poly.fit(X_poly, io2)
lin2 = LinearRegression()
lin2.fit(X_poly, io2)
Biomass_Quad = sm.OLS(io2, biomass2).fit()

# OLS Predicted Quadratic values
Biomass_ypred = Biomass_Quad.predict(biomass2) 

#OLS Quadratic Summary Table
Biomass_Quad.summary()

#Quadratic Scatterplots
polyline = np.linspace(start = 0, stop =100 , num = 100)
plt.plot(polyline, modelBiomassquad(polyline))
plt.scatter(biomass,io2, color = 'blue')
plt.title("R squared : 0.002")
plt.suptitle('Quadratic for average total monthly output versus average monthly prices of energy per EUR/MWH')
plt.xlabel('Average total monthly output')
plt.ylabel('Average monthly prices of energy per EUR/MWH')
plt.show()

"""The blue dots represent the observations and the blue line is the quadratic model of best fit.This is a very weak  and postive correlation between the average monthly outputs and the average monthly price of energy per EUR/MWH."""

Biomass_Quad.summary()

influenceBiomassquad = Biomass_Quad.get_influence() #Quadratic OLS residuals


standardized_residualsBiomassQuad = influenceBiomassquad.resid_studentized_internal


print(standardized_residualsBiomassQuad)

print(Biomass_ypred) # OLS quadratic predicted values

#Predicted average monthly OLS quadratic values versus residuals
sns.residplot(x = Biomass_ypred, y = standardized_residualsBiomassQuad, lowess = True, color="g")
plt.suptitle("Biomass residuals from quadratic model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe, there is a double yet subtle hump along the lowess line in the residual plot. In addition, the residuals are quite spread out in no particular pattern which indicates constant variance, homoscedasticity, and a lack of bias. Given these circumstances, it would be reasonable to assume that the quadratic model of fit is suitable. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly quadratic biomass outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = Biomass_ypred, y = biomass, lowess = True, color="g")
 #Predicted OLS average monthly quadratic values versus actual values

"""As one can observe this residual plot, one may notice some sharp spikes in the fitted model, which form a nonlinear pattern. However, the observations are spread out in a "C" shaped pattern; indicating heteroskedasticity and bias.The green dots represent the respective observations while the dotted horizonal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

The results from the list directly above will be analyzed for seasonality since the output and the respective average monthly price of energy per EUR/MWH are taken into account simultaneously.The  results are the outputs divided by the respective the average monthly prices of energy per EUR/MWH.
"""

dfbiomass = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Biomass" : [483.73533424283767, 470.1502976190476, 468.1063257065949, 426.32033426183847, 503.5698924731183, 485.99860917941584, 512.4879032258065, 518.9475806451613, 517.1069444444445, 519.5564516129032, 503.6166666666667, 483.92462987886944, 459.9959677419355, 430.3448275862069, 429.7442799461642, 286.8902777777778, 337.2029569892473, 340.3375, 351.8896366083446, 369.64516129032256, 349.39166666666665, 336.2187919463087, 355.57301808066757, 338.7768817204301, 347.28360215053766, 351.3645833333333, 284.40242261103634, 280.7611111111111, 353.5040322580645, 339.9791666666667, 367.7069892473118, 362.8790322580645, 351.96805555555557, 343.938255033557, 354.59305555555557, 347.1733870967742, 343.8481182795699, 360.51190476190476, 307.2543741588156, 299.3930555555556, 318.30913978494624, 351.73333333333335, 367.2207267833109, 361.3252688172043, 355.46805555555557, 317.9275167785235, 320.16129032258067, 342.10277777777776],
 "Dates" :  ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12'],})

#Dataframes analyzed by resource
dfbiomass = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Biomass" : [483.73533424283767, 470.1502976190476, 468.1063257065949, 426.32033426183847, 503.5698924731183, 485.99860917941584, 512.4879032258065, 518.9475806451613, 517.1069444444445, 519.5564516129032, 503.6166666666667, 483.92462987886944, 459.9959677419355, 430.3448275862069, 429.7442799461642, 286.8902777777778, 337.2029569892473, 340.3375, 351.8896366083446, 369.64516129032256, 349.39166666666665, 336.2187919463087, 355.57301808066757, 338.7768817204301, 347.28360215053766, 351.3645833333333, 284.40242261103634, 280.7611111111111, 353.5040322580645, 339.9791666666667, 367.7069892473118, 362.8790322580645, 351.96805555555557, 343.938255033557, 354.59305555555557, 347.1733870967742, 343.8481182795699, 360.51190476190476, 307.2543741588156, 299.3930555555556, 318.30913978494624, 351.73333333333335, 367.2207267833109, 361.3252688172043, 355.46805555555557, 317.9275167785235, 320.16129032258067, 342.10277777777776],
 "Dates" :  ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12'],})

print(dfbiomass)
df_biomass= pd.DataFrame.from_dict(dfbiomass, orient = "columns")
print(df_biomass)
df_biomass["Ratio"] = df_biomass["Biomass"]/df_biomass["Price"]
pdToListBiomass = list(df_biomass["Ratio"])
print(pdToListBiomass)



#Bell Curves 


biomassResults_mean = np.mean(df_biomass["Ratio"])
biomassResults_std = np.std(df_biomass["Ratio"])
 

biomassResultspdf = stats.norm.pdf(df_biomass["Ratio"].sort_values(), biomassResults_mean, biomassResults_std)


plt.plot(df_biomass["Ratio"].sort_values(), biomassResultspdf)
plt.xlim([0,20])  
plt.xlabel("Output to energy price per EUR/MWH", size=15)    
plt.suptitle("Frequency distribution of output to energy price per EUR/MWH ratios (scaled in decimals)")
plt.title(f'Skewness for data: {skew(df_biomass["Ratio"])}') 
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

#Bell Curves 


biomassResults_mean = np.mean(df_biomass["Biomass"])
biomassResults_std = np.std(df_biomass["Biomass"])
 

biomassResultspdf = stats.norm.pdf(df_biomass["Biomass"].sort_values(), biomassResults_mean, biomassResults_std)


plt.plot(df_biomass["Biomass"].sort_values(), biomassResultspdf)
plt.xlim([0,1000])  
plt.xlabel("Output in MWH ", size=15)
plt.title(f'Skewness for data: {skew(df_biomass["Biomass"])}')     
plt.suptitle("Frequency distribution of output amounts (scaled in decimals) " )
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

"""These bell shaped curves are roughly symmetrical, hence they have a normal distribution. The blue line in this plot represent the observation values and their likelihood of occurring.

If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.

If the data is deemed to be stationary based off the given tests below, then that means that seasonality and trends are not factors in the values of the tested data. If the data is deemed to be non stationary, than seasonality and trends are indeed factors after all.
"""

#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_biomass["Ratio"])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_biomass["Ratio"])
plt.suptitle("Autocorrelations of Biomass ratio")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 
plt.show

from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_biomass["Ratio"])
plt.suptitle("Partialatocorrelations of Biomass ratio")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 

plt.show

Biomass_Ratio_Autocorrelations = sm.tsa.acf(df_biomass["Ratio"],fft=False) #Autocorrelations
print(Biomass_Ratio_Autocorrelations)



"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the partial and autocorrelation plot, indicating that the lags directly beforehand influenced the relationship between average monthly biomass outputs and the average monthly prices of energy per EUR/MWH. 
"""

df_biomass['First Difference Ratio'] = df_biomass["Ratio"]- df_biomass["Ratio"].shift(1) # Seasonality values
df_biomass['Seasonal Difference Ratio']=df_biomass["Ratio"]- df_biomass["Ratio"].shift(12)
df_biomass.head()

plt.suptitle("Seasonal Difference of average monthly Biomass output to price of energy per EUR/MWH ratio")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 

df_biomass['Seasonal Difference Ratio'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the average monthly biomass outputs and the average monthly prices of energy per EUR/MWH."""



#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result):
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_biomass["Biomass"])


test_result=adfuller(df_biomass["Biomass"])

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_biomass["Biomass"])
plt.suptitle("Autocorrelations of Biomass")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 

plt.show
from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_biomass["Biomass"])
plt.suptitle("Partialatocorrelations of Biomass")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 
plt.show
Biomass_Autocorrelations = sm.tsa.acf(df_biomass["Biomass"], fft=False) #Autocorrelations
print(Biomass_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the partial and autocorrelation plot, indicating that the lags directly beforehand influenced the average monthly biomass outputs.
"""

df_biomass['First Difference'] = df_biomass["Biomass"]- df_biomass["Biomass"].shift(1) # Seasonality values
df_biomass['Seasonal Difference']=df_biomass["Biomass"]- df_biomass["Biomass"].shift(12)
df_biomass.head()



plt.suptitle("Seasonal Difference of average monthly Biomass output to price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 
df_biomass['Seasonal Difference'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are patterns depicted in the average monthly biomass outputs."""

print(biomass)

df_biomass.describe(include = 'all')  # Description table of Dataframes

"""Below is the box and whisker plot for the distribution of the average monthly outputs of biomass and its the average monthly prices of energy per EUR/MWH."""

# Box and Whisker Plot
sns.set(style="darkgrid") 

plt.suptitle('Distribution of average monthly biomass outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly biomass outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')
sns.boxplot(x=Rounded_Y, y=[483.73533424283767, 470.1502976190476, 468.1063257065949, 426.32033426183847, 503.5698924731183, 485.99860917941584, 512.4879032258065, 518.9475806451613, 517.1069444444445, 519.5564516129032, 503.6166666666667, 483.92462987886944, 459.9959677419355, 430.3448275862069, 429.7442799461642, 286.8902777777778, 337.2029569892473, 340.3375, 351.8896366083446, 369.64516129032256, 349.39166666666665, 336.2187919463087, 355.57301808066757, 338.7768817204301, 347.28360215053766, 351.3645833333333, 284.40242261103634, 280.7611111111111, 353.5040322580645, 339.9791666666667, 367.7069892473118, 362.8790322580645, 351.96805555555557, 343.938255033557, 354.59305555555557, 347.1733870967742, 343.8481182795699, 360.51190476190476, 307.2543741588156, 299.3930555555556, 318.30913978494624, 351.73333333333335, 367.2207267833109, 361.3252688172043, 355.46805555555557, 317.9275167785235, 320.16129032258067, 342.10277777777776])
plt.show()

"""This box and whisker plot depicts the frequencies between the distribution of the monthly average output of biomass produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of biomass produced was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH,which was slighty above and below 350 units. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), biomass output was slightly above 250 units.The lowest amount produced, which was slightly above 200 units, was at the price of approximently 51.72 EUR/MWH. At approximately 59.41 EUR/MWH, biomass produced the highest output amount,which was roughly 550 units. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was at roughly 350 units."""

plt.suptitle('Distribution of average monthly biomass outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly biomass outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')  
  
# Stem Plot 
plt.stem(Rounded_Y, biomass)

"""This plot depicts the frequencies between the distribution of the monthly average output of biomass produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of biomass produced was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH,which was slighty above and below 350 units. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), biomass output was slightly above 250 units.The lowest amount produced, which was slightly above 200 units, was at the price of approximently 51.72 EUR/MWH. At approximately 59.41 EUR/MWH, biomass produced the highest output amount,which was roughly 550 units. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was at roughly 350 units. Each blue dot at end of the blue lines represent an observation."""

#Histograms
Biomass_Dict = {key: i for i, key in enumerate(biomass)}

def Hist_Biomass(Biomass_Dict):
    for k, v in Biomass_Dict.items(): print(f"{v}:{k}")
print(Biomass_Dict)

plt.bar(list(Biomass_Dict.values()), Biomass_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs of biomas")
plt.ylabel('Average monthly outputs') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This histogram is  skewed to the right, incidating that there was a external factor decreasing the average monthly outputs. Aside from the skewness on the left side of the histogram, the histogram is roughly uniform to the right of the skweness."""

pdToListBiomass_Dict = {key: i for i, key in enumerate(pdToListBiomass)}

def Hist_pdToListBiomass(pdToListBiomass_Dict):
    for k, v in pdToListBiomass_Dict.items(): print(f"{v}:{k}") #Histograms
print(pdToListBiomass_Dict)

plt.bar(list(pdToListBiomass_Dict.values()), pdToListBiomass_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs/price ratio of biomas")
plt.ylabel('Average monthly outputs/price ratio') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This histogram is  skewed to the right, with a unimodal occurring between month 20 and 10.

Below is a scatterplot depicting the relationship between the average monthly price of energy per EUR/MWH and the average monthly outputs of biomass.
"""



modelbiomass = stats.linregress([483.73533424283767, 470.1502976190476, 468.1063257065949, 426.32033426183847, 503.5698924731183, 485.99860917941584, 512.4879032258065, 518.9475806451613, 517.1069444444445, 519.5564516129032, 503.6166666666667, 483.92462987886944, 459.9959677419355, 430.3448275862069, 429.7442799461642, 286.8902777777778, 337.2029569892473, 340.3375, 351.8896366083446, 369.64516129032256, 349.39166666666665, 336.2187919463087, 355.57301808066757, 338.7768817204301, 347.28360215053766, 351.3645833333333, 284.40242261103634, 280.7611111111111, 353.5040322580645, 339.9791666666667, 367.7069892473118, 362.8790322580645, 351.96805555555557, 343.938255033557, 354.59305555555557, 347.1733870967742, 343.8481182795699, 360.51190476190476, 307.2543741588156, 299.3930555555556, 318.30913978494624, 351.73333333333335, 367.2207267833109, 361.3252688172043, 355.46805555555557, 317.9275167785235, 320.16129032258067, 342.10277777777776],
 [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])





BiomassRatio = list(standardized_residualsBiomass/standardized_residualsPricereg)



BiomassRatioQuad = list(standardized_residualsBiomassQuad/standardized_residualsPriceQuad)
print(BiomassRatioQuad)

#OLS predicted quadratic average monthly ratios versus residuals
BiomassQuadRatioPredict  = Biomass_ypred/ypred 

sns.residplot(x = BiomassQuadRatioPredict , y = standardized_residualsBiomassQuad/standardized_residualsPriceQuad , lowess = True, color="g")



plt.suptitle("Predicted quadratic biomass output to EUR/MWH versus respective quadratic model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

#Predicted OLS linear average monthly ratios versus residuals
BiomassRegRatioPredict = predictionsbiomass/predictions

sns.residplot(x = BiomassRegRatioPredict, y = standardized_residualsBiomass/standardized_residualsPricereg, lowess = True, color="g")
plt.suptitle("Predicted linear biomass output to EUR/MWH versus respective linear model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the residuals. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""



#OLS predicted quadratic average monthly ratios versus actual ratios 
sns.residplot(x = BiomassQuadRatioPredict , y = pdToListBiomass, lowess = True, color="g")
plt.suptitle("Predicted quadratic biomass output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice the humps in the lowess line , which form a roughly linear pattern. However, the residuals are quite spread out, which indicates homoscedasticity and constant variance.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted linear average monthly ratios versus actual ratios
plt.suptitle("Predicted linear biomass output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

sns.residplot(x = BiomassRegRatioPredict, y = pdToListBiomass, lowess = True, color="g")

"""As one can observe this residual plot, one may notice the slight hump in the fitted model, which form a nonlinear pattern. However, the observations are spread out without a distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""



"""The last resource analzyed is wind power."""

wind1 = wind
wind1 = sm.add_constant(wind1)

#Dataframes analyzed by resource
dfwind = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Wind" : [7587.697135061391, 7731.806547619048, 6747.878869448183, 5506.381615598886, 6757.408602150537, 4375.495132127956, 3955.2540322580644, 4856.173387096775, 4323.8, 4597.236559139785, 4493.763888888889, 4943.14131897712, 4993.399193548387, 6534.337643678161, 5884.690444145357, 5343.191666666667, 5309.384408602151, 5638.5375, 5715.833109017497, 5103.193548387097, 5484.695833333333, 4788.928859060403, 5766.394444444444, 4519.7661290322585, 6483.298387096775, 5330.943452380952, 5623.149394347241, 5741.669444444445, 5031.903225806452, 5586.527777777777, 4799.477150537635, 4348.514784946236, 3883.8791666666666, 5234.8, 5200.188888888889, 7257.2553763440865, 6197.444892473119, 6864.555059523809, 8771.240915208613, 5289.247222222222, 4389.743279569892, 4779.433333333333, 4059.907133243607, 4358.579301075269, 4265.988888888889, 6156.939597315436, 5886.720430107527, 6057.558333333333],"Dates": ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfwind)
df_wind= pd.DataFrame.from_dict(dfwind, orient = "columns")
print(df_wind)
df_wind["Ratio"] = df_wind["Wind"]/df_wind["Price"]
pdToListWind = list(df_wind["Ratio"])
print(pdToListWind)

"""This is the logarithmic model for the average monthly on shore wind outputs versus the average monthly prices of energy per EUR/MWH."""

#Logarithmic OLS regressions
Logpricevalues = ((np.log(io2))) 
Logwindvalues = ((np.log(wind)))
Log = np.polyfit(np.log(io2), wind1, 1)
lin2 = LinearRegression()
lin2.fit(np.log(wind1), io2)
Wind_Log = sm.OLS(io2, wind1).fit()

Wind_Logpred = Wind_Log.predict(wind1) 
#OLS Logarithmic summary table
Wind_Log.summary() 
#Log
Log = np.polyfit(np.log(wind), io2, 1)
print(Log)

y = -11.45231819 * Logwindvalues + 156.2322607 
#Logarithmic OLS regression scatterplot
plt.suptitle("Logarithmic average monthly outputs versus average monthly prices of energy per EUR/MWH")
plt.title("R squared : 0.032")
plt.ylabel("Average monthly prices of energy per EUR/MWH")
plt.xlabel("Average monthly outputs")
plt.yscale("log") 
plt.xscale("log")
plt.plot(Logwindvalues, io2, "o")
plt.plot(Logwindvalues, y)

"""The blue dots represent the observations and the orange line is the linear model of best fit.This is a very weak  and positive correlation between the average monthly outputs and the average monthly prices of energy per EUR/MWH."""

Wind_Log.summary() #OLS Logarithmic summary table

influenceWindLog = Wind_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsWindLog = influenceWindLog.resid_studentized_internal


print(standardized_residualsWindLog)

print(Wind_Logpred) # OLS logarithmic predicted values

#OLS Logarithmic predicted average monthly ratios versus actual ratios 
plt.suptitle("Predicted average monthly logarithmic wind output to EUR/MWH versus respective logarithmic output residuals ") 
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratios")
plt.ylabel("Amount from actual values")  
plt.legend("..#")
WindLogRatioPredict = Wind_Logpred/predictionLog   
sns.residplot(x = WindLogRatioPredict, y = pdToListWind, lowess = True, color="g")

"""Due to the gradual hump in the lowess line, there is indication that there is heteroskedasticity in this plot. However, there is a lack of bias in this plot since there is a decreasing trend in the variance. The green dots represent the respective observations while the dotted horizontal line represents the regression model.The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Residuals from logarithmic wind model versus predicted average monthly wind outputs") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values") 
plt.legend("..#")
sns.residplot(x = Wind_Logpred, y =standardized_residualsWindLog, lowess = True, color="g")
# OLS Logarithmic average monthly predictions versus residuals

"""As one can observe, there is a double yet subtle hump along the lowess line in the residual plot. In addition, the residuals are quite spread out in no particular pattern which indicates constant variance, homoscedasticity, and a lack of bias. Given these circumstances, it would be reasonable to assume that the logarithmic model of fit is suitable. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS Logarithmic average monthly predicted ratios versus residuals
plt.suptitle("Predicted average monthly logarithmic wind output to price of energy per EUR/MWH ratio versus respective residuals") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Amount from actual values")  
plt.legend("..#")
sns.residplot(x = WindLogRatioPredict, y = standardized_residualsWindLog/standardized_residualsPriceLog,lowess = True, color="g")

"""With the exception of a few  heteroskedastic outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias otherwise. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly logarithmic wind outputs per EUR/MWH  versus actual values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values")
plt.legend("..#")
sns.residplot(x = Wind_Logpred, y = wind, lowess = True, color="g")
 # OLS predicted logarithmic average monthly values versus actual values

"""As one can observe this residual plot, one may notice the positive slope in the fitted model. In addition, the observations are spread out in a distinct pattern, indicating bias and homoscedasticity.It would be reasonable to assume that this model does not fit the data. The green dots are the respective observations while the dotted horizonal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

influenceWindLog = Wind_Log.get_influence() 
#Logarithmic OLS regression residuals


standardized_residualsWindLog = influenceWindLog.resid_studentized_internal


print(standardized_residualsWindLog)



modelwindonshore = stats.linregress([7587.697135061391, 7731.806547619048, 6747.878869448183, 5506.381615598886, 6757.408602150537, 4375.495132127956, 3955.2540322580644, 4856.173387096775, 4323.8, 4597.236559139785, 4493.763888888889, 4943.14131897712, 4993.399193548387, 6534.337643678161, 5884.690444145357, 5343.191666666667, 5309.384408602151, 5638.5375, 5715.833109017497, 5103.193548387097, 5484.695833333333, 4788.928859060403, 5766.394444444444, 4519.7661290322585, 6483.298387096775, 5330.943452380952, 5623.149394347241, 5741.669444444445, 5031.903225806452, 5586.527777777777, 4799.477150537635, 4348.514784946236, 3883.8791666666666, 5234.8, 5200.188888888889, 7257.2553763440865, 6197.444892473119, 6864.555059523809, 8771.240915208613, 5289.247222222222, 4389.743279569892, 4779.433333333333, 4059.907133243607, 4358.579301075269, 4265.988888888889, 6156.939597315436, 5886.720430107527, 6057.558333333333], [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

"""This is the linear model for the average monthly on shore wind outputs versus the average monthly prices of energy per EUR/MWH."""

#Linear OLS regression
wind1 = wind
wind1 = sm.add_constant(wind1)
modelwindreg = sm.OLS(io2, wind1).fit()
predictionswind = modelwindreg.predict(wind1) 


modelwindreg.summary() 
#OLS Linear Summary Table

#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(wind,io2)
print("slope: %f    intercept: %f" % (slope, intercept))

# OLS linear Scatterplot 
plt.suptitle("Average monthly outputs to price of energy per EUR/MWH")
plt.plot(wind, io2, "o")
plt.title(f"R squared: {modelwindonshore.rvalue**2}")
f = lambda x: 	-0.001736   *x + 67.357851
plt.plot(x,f(x), c="orange", label="line of best fit") 
plt.legend("#")
plt.ylabel('Average monthly price of energy per EUR/MWH') 
plt.xlabel('Average monthly wind power output') 
plt.show()
There is a very weak yet negative correlation between the average monthly outputs and the respective months.The blue dots are the observations and orange line is the linear model of best fit.

print(predictionswind)
#Linear OLS Predicted Values

#Linear OLS regression residuals 
influencewindreg = modelwindreg.get_influence()


standardized_residualsWind = influencewindreg.resid_studentized_internal


print(standardized_residualsWind)

#Predicted OLS linear values versus residual values values
sns.residplot(x = predictionswind, y = standardized_residualsWind, lowess = True, color ="g")
plt.suptitle("Wind power residuals from linear model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")



"""As one can observe, there is a double yet subtle hump along the lowess line in the residual plot. In addition, the residuals are quite spread out in no particular pattern which indicates constant variance, homoscedasticity, and a lack of bias. Given these circumstances, it would be reasonable to assume that the quadratic model of fit is suitable. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly linear wind outputs per EUR/MWH  versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = predictionswind, y = wind, lowess = True, color="g")
#Predicted OLS average monthly linear values versus actual values

"""This is the quadratic model used for the average monthly on shore wind output versus the average monthly prices of energy per EUR/MWH."""

#Quadratic OLS regression 
from sklearn.preprocessing import PolynomialFeatures
polynomial_features = PolynomialFeatures(degree=2)

modelWindquad = np.poly1d(np.polyfit(wind,io2,2))
print(modelWindquad)


wind1 = sm.add_constant(wind1)
wind2 = polynomial_features.fit_transform(wind1)
from sklearn.preprocessing import PolynomialFeatures
  
poly = PolynomialFeatures(degree = 3)
X_poly = poly.fit_transform(wind2)
  
Wind_Q = poly.fit(X_poly, wind)
lin2 = LinearRegression()
lin2.fit(X_poly, wind1)
Wind_Quad = sm.OLS(io2, wind2).fit()

# OLS Predicted Quadratic values
Wind_ypred = Wind_Quad.predict(wind2) 

#OLS Quadratic Summary Table
Wind_Quad.summary()

#Quadratic Scatterplots
polyline = np.linspace(start = 0, stop =10000 , num = 100)
plt.plot(polyline, modelWindquad(polyline))
plt.title("R squared : 	0.072")
plt.scatter(wind, io2, color = 'blue')
plt.suptitle('Quadratic for average monthly outputs versus average monthly prices of energy per EUR/MWH')
plt.xlabel('Average monthly outputs')
plt.ylabel('Average monthly prices of energy per EUR/MWH')
plt.show()

"""The blue dots represent the observations and the blue line is the quadratic model of best fit.This is a very weak and postive correlation between the average monthly outputs and the average monthly price of energy per EUR/MWH."""

Wind_Quad.summary()

influenceWind_Quad = Wind_Quad.get_influence() #Quadratic OLS residuals


standardized_residualsWindQuad = influenceWind_Quad.resid_studentized_internal


print(standardized_residualsWindQuad)

print(Wind_ypred) # OLS quadratic predicted values

#Predicted average monthly OLS quadratic values versus residuals
plt.suptitle("Wind power residuals from quadratic model versus predicted values")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

sns.residplot(x = Wind_ypred, y = standardized_residualsWindQuad, lowess = True, color="g")

"""As one can observe, there is a slight curve along the lowess line in the residual plot. In addition, the residuals are quite spread out in no particular pattern which indicates constant variance, homoscedasticity, and a lack of bias. Given these circumstances, it would be reasonable to assume that the quadratic model of fit is suitable. The green dots represent the respective observations, while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

plt.suptitle("Predicted average monthly quadratic wind outputs per EUR/MWH versus actual values") 
plt.xlabel("Predicted average monthly outputs") 
plt.ylabel("Actual values") 
plt.legend("..#")
sns.residplot(x = Wind_ypred, y = wind, lowess = True, color="g")
 #Predicted OLS average monthly quadratic values versus actual values

"""As one can observe this residual plot, one may notice some sharp spikes in the fitted model, which form a nonlinear pattern. However, the observations are spread out in a "C" shaped pattern; indicating heteroskedasticity and bias.The green dots represent the respective observations while the dotted horizonal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself.

The results from the list directly above will be analyzed for seasonality since the output and the respective average monthly price of energy per EUR/MWH are taken into account simultaneously.The  results are the outputs divided by the respective the average monthly prices of energy per EUR/MWH.

If the data is deemed to be stationary based off the given tests below, then that means that seasonality and trends are not factors in the values of the tested data. If the data is deemed to be non stationary, than seasonality and trends are indeed factors after all.
"""

#Dataframes analyzed by resource
dfwind = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Wind" : [7587.697135061391, 7731.806547619048, 6747.878869448183, 5506.381615598886, 6757.408602150537, 4375.495132127956, 3955.2540322580644, 4856.173387096775, 4323.8, 4597.236559139785, 4493.763888888889, 4943.14131897712, 4993.399193548387, 6534.337643678161, 5884.690444145357, 5343.191666666667, 5309.384408602151, 5638.5375, 5715.833109017497, 5103.193548387097, 5484.695833333333, 4788.928859060403, 5766.394444444444, 4519.7661290322585, 6483.298387096775, 5330.943452380952, 5623.149394347241, 5741.669444444445, 5031.903225806452, 5586.527777777777, 4799.477150537635, 4348.514784946236, 3883.8791666666666, 5234.8, 5200.188888888889, 7257.2553763440865, 6197.444892473119, 6864.555059523809, 8771.240915208613, 5289.247222222222, 4389.743279569892, 4779.433333333333, 4059.907133243607, 4358.579301075269, 4265.988888888889, 6156.939597315436, 5886.720430107527, 6057.558333333333],"Dates": ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfwind)
df_wind= pd.DataFrame.from_dict(dfwind, orient = "columns")
print(df_wind)
df_wind["Ratio"] = df_wind["Wind"]/df_wind["Price"]
pdToListWind = list(df_wind["Ratio"])
print(pdToListWind)
#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_wind["Ratio"])


test_result=adfuller(df_wind["Ratio"])



from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_wind["Ratio"])
plt.suptitle("Partialatocorrelations of Wind ratio")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 
plt.show
plt.show

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_wind["Ratio"])
plt.suptitle("Autocorrelations of Wind ratio")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 
plt.show
plt.show




Wind_Ratio_Autocorrelations = sm.tsa.acf(df_wind["Ratio"],fft=False) #Autocorrelations
print(Wind_Ratio_Autocorrelations)



"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the partial and  autocorrelation plot, indicating that the lags directly beforehand influenced the relationship between average monthly on shore wind outputs and the average monthly prices of energy per EUR/MWH.
"""

df_wind['First Difference Ratio'] = df_wind["Ratio"]- df_wind["Ratio"].shift(1) # Seasonality values
df_wind['Seasonal Difference Ratio']=df_wind["Ratio"]- df_wind["Ratio"].shift(12)
df_wind.head()



df_wind['Seasonal Difference Ratio'].plot() # Seasonality Plot



"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the average monthly on shore wind outputs and the average monthly prices of energy per EUR/MWH."""

#Bell Curves 


windResults_mean = np.mean(df_wind["Ratio"])
windResults_std = np.std(df_wind["Ratio"])
 

windResultspdf = stats.norm.pdf(df_wind["Ratio"].sort_values(), windResults_mean, windResults_std)


plt.plot(df_wind["Ratio"].sort_values(), windResultspdf)
plt.xlim([0,200])  
plt.xlabel("Output to energy price per EUR/MWH", size=15) 
plt.title(f'Skewness for data: {skew(df_wind["Ratio"])}')      
plt.suptitle("Frequency distribution of output to energy price per EUR/MWH ratios (scaled in decimals)")
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

#Bell Curves 


windResults_mean = np.mean(df_wind["Wind"])
windResults_std = np.std(df_wind["Wind"])
 

windResultspdf = stats.norm.pdf(df_wind["Wind"].sort_values(), windResults_mean, windResults_std)


plt.plot(df_wind["Wind"].sort_values(), windResultspdf)
plt.xlim([0,10000])  
plt.xlabel("Output in MWH ", size=15) 
plt.title(f'Skewness for data: {skew(df_wind["Wind"])}')      
plt.suptitle("Frequency distribution of output amounts (scaled in decimals) " ) 
plt.ylabel("Frequency", size=15)                
plt.grid(True, alpha=0.3, linestyle="--")
plt.show()

"""These bell shaped curves are skewed to the right. Hence, they have a aymmetrical distribution.The blue line in this plot represent the observation values and their likelihood of occurring.

If the skewness is between -0.5 and 0.5, the data is fairly symmetrical. If the skewness is between -1 and – 0.5 or between 0.5 and 1, the data is moderately skewed. If the skewness is less than -1 or greater than 1, the data is highly skewed.
"""

dfwind = ({"Price":[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 67.04260752688172, 66.6235138888889],

 "Wind" : [7587.697135061391, 7731.806547619048, 6747.878869448183, 5506.381615598886, 6757.408602150537, 4375.495132127956, 3955.2540322580644, 4856.173387096775, 4323.8, 4597.236559139785, 4493.763888888889, 4943.14131897712, 4993.399193548387, 6534.337643678161, 5884.690444145357, 5343.191666666667, 5309.384408602151, 5638.5375, 5715.833109017497, 5103.193548387097, 5484.695833333333, 4788.928859060403, 5766.394444444444, 4519.7661290322585, 6483.298387096775, 5330.943452380952, 5623.149394347241, 5741.669444444445, 5031.903225806452, 5586.527777777777, 4799.477150537635, 4348.514784946236, 3883.8791666666666, 5234.8, 5200.188888888889, 7257.2553763440865, 6197.444892473119, 6864.555059523809, 8771.240915208613, 5289.247222222222, 4389.743279569892, 4779.433333333333, 4059.907133243607, 4358.579301075269, 4265.988888888889, 6156.939597315436, 5886.720430107527, 6057.558333333333],"Dates": ['2015-01', '2015-02', '2015-03', '2015-04', '2015-05', '2015-06', '2015-07', '2015-08', '2015-09', '2015-10', '2015-11', '2015-12', '2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09', '2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06', '2018-07', '2018-08', '2018-09', '2018-10', '2018-11', '2018-12']})
print(dfwind)
df_wind= pd.DataFrame.from_dict (dfwind, orient = "columns")
print(df_wind)
df_wind["Ratio"] = df_wind["Wind"]/df_wind["Price"]
pdToListWind = list(df_wind["Ratio"])
print(pdToListWind)

#ADF Tests
from statsmodels.tsa.stattools import adfuller
def adfuller_test(test_result): 
    result=adfuller(test_result)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )

    if result[1] <= 0.05:
         print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data is stationary")
    else:
        print("weak evidence against null hypothesis,indicating it is non-stationary ")

adfuller_test(df_wind["Wind"])


test_result=adfuller(df_wind["Wind"])

from statsmodels.graphics.tsaplots import plot_pacf # Partial autocorrelation Plot
plot_pacf(df_wind["Wind"])
plt.suptitle("Partialatocorrelations of Wind")
plt.ylabel('Partialautocorrealtions') 
plt.xlabel('Lags') 
plt.show

from statsmodels.graphics.tsaplots import plot_acf # Autocorrelation Plot
plot_acf(df_wind["Wind"])
plt.suptitle("Autocorrelations of Wind")
plt.ylabel('Autocorrealtions') 
plt.xlabel('Lags') 
plt.show
Wind_Autocorrelations = sm.tsa.acf(df_wind["Wind"],fft=False) #Autocorrelations
print(Wind_Autocorrelations)

"""The plots above graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.The autocorrelation with lag zero always equals 1, because this represents the autocorrelation between each term and itself. Each spike that rises above or falls below the shaded blue shapes is considered to be statistically significant. This means the spike has a value that is significantly different from zero. If a spike is significantly different from zero, that is evidence of autocorrelation. A spike that's close to zero is evidence against autocorrelation.Meanwhile, the lags within partialautocorrelation plots depend on the lag directly beforehand.

As one can observe, there is statistical significance in the partial and  autocorrelation plot, indicating that the lags directly beforehand influenced the average monthly on shore wind outputs.
"""

df_wind['First Difference'] = df_wind["Wind"]- df_wind["Wind"].shift(1) # Seasonality values
df_wind['Seasonal Difference']=df_wind["Wind"]- df_wind["Wind"].shift(12)
df_wind.head()

plt.suptitle("Seasonal Difference of average monthly wind output to price of energy per EUR/MWH")
plt.ylabel('Seasonality') 
plt.xlabel('Months') 

df_wind['Seasonal Difference'].plot() # Seasonality Plot

"""The blue line represents the trend line among the values themselves.As one can observe, there are no obvious patterns depicted between the average monthly on shore wind outputs and the average monthly prices of energy per EUR/MWH."""

df_wind.describe(include = 'all')  # Description table of Dataframes

"""Below is the box and whisker plot for the distribution of the average monthly outputs of wind power and its the average monthly prices of energy per EUR/MWH."""

# Box and Whisker Plots
sns.set(style="darkgrid") 

plt.suptitle('Distribution of average monthly wind power outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly wind power outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')
sns.boxplot(x=Rounded_Y, y=[7587.697135061391, 7731.806547619048, 6747.878869448183, 5506.381615598886, 6757.408602150537, 4375.495132127956, 3955.2540322580644, 4856.173387096775, 4323.8, 4597.236559139785, 4493.763888888889, 4943.14131897712, 4993.399193548387, 6534.337643678161, 5884.690444145357, 5343.191666666667, 5309.384408602151, 5638.5375, 5715.833109017497, 5103.193548387097, 5484.695833333333, 4788.928859060403, 5766.394444444444, 4519.7661290322585, 6483.298387096775, 5330.943452380952, 5623.149394347241, 5741.669444444445, 5031.903225806452, 5586.527777777777, 4799.477150537635, 4348.514784946236, 3883.8791666666666, 5234.8, 5200.188888888889, 7257.2553763440865, 6197.444892473119, 6864.555059523809, 8771.240915208613, 5289.247222222222, 4389.743279569892, 4779.433333333333, 4059.907133243607, 4358.579301075269, 4265.988888888889, 6156.939597315436, 5886.720430107527, 6057.558333333333])
plt.show()

"""This box and whisker plot depicts the frequencies between the distribution of the monthly average output of wind power produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of wind power produced was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH,which was slighty above and below 5500 units. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), wind power output was roughly 5250 units.The lowest amount produced, whcih was slightly below 4000 units, was at the price of approximently 55.82 EUR/MWH. At approximately 48.28 EUR/MWH, wind power produced the highest output amount,which was slightly below 9000 units. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was at roughly 6500 units. """

plt.suptitle('Distribution of average monthly wind power outputs by average monthly price of energy per EUR/MWH ')
plt.ylabel('Average monthly wind power outputs')
plt.xlabel('Average monthly price of energy per EUR/MWH')  
  
# Stem Plot 
plt.stem(Rounded_Y, wind)

"""This plot depicts the frequencies between the distribution of the monthly average output of wind power produced and its the average monthly prices of energy per EUR/MWH. As one can observe, the highest concentrated amount of wind power produced was when the price of energy per EUR/MWH was at roughly 70.36 euros/MWH,which was slighty above and below 5500 units. When the price of energy per EUR/MWH was at its lowest(at approximently 32.62 euros per MWH), wind power output was roughly 5250 units.The lowest amount produced, whcih was slightly below 4000 units, was at the price of approximently 55.82 EUR/MWH. At approximately 48.28 EUR/MWH, wind power produced the highest output amount,which was slightly below 9000 units. When the monthly average price of energy per EUR/MWH was at its highest, at approximently 79.13 EUR/MWH, the output was at roughly 6500 units. Each blue dot at the end of the blue lines represent an observation."""

#Histograms
wind_Dict = {key: i for i, key in enumerate(wind)}

def Hist_wind(wind_Dict):
    for k, v in wind_Dict.items(): print(f"{v}:{k}") 
print(wind_Dict)

plt.bar(list(wind_Dict.values()), wind_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs of wind power")
plt.ylabel('Average monthly outputs') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This unimodal histogram is roughly uniform and symmetrical throughout. It would be fair to assume that there was a singular external factor that increased the average monthly outputs, as indicated in the unimodal."""

pdToListWind_Dict = {key: i for i, key in enumerate(pdToListWind)}

def Hist_pdToListWind(pdToListWind_Dict):
    for k, v in pdToListWind_Dict.items(): print(f"{v}:{k}") #Histograms
print(pdToListWind_Dict)

plt.bar(list(pdToListWind_Dict.values()), pdToListWind_Dict.keys(), color='g') 
print(dicDates)
plt.suptitle("Average monthly outputs/price ratio of wind power")
plt.ylabel('Average monthly outputs/price ratio') 
plt.xlabel('Months') 

plt.show()
plt.show()

"""The green bars represent the observation value for each respective month. This histogram has a significant trench between month 0 and month 10, meaning that there was a drop in the output produced per EUR/MWH. In addition, the histogram has a multimodal distribution, which could indicate that there wasn't any external factors that led to a singular price increase. However, the price fluctuations within the histogram appear to be seasonal."""



#Predicted OLS linear average monthly ratios versus residuals
WindRegRatioPredict = predictionswind/predictions

sns.residplot(x = WindRegRatioPredict, y = standardized_residualsWind/standardized_residualsPricereg, lowess = True, color="g")

plt.suptitle("Predicted linear wind power output to EUR/MWH versus respective linear model residuals ")
plt.xlabel("Predicted average monthly outputs to EUR/MWH ratio")
plt.ylabel("Amount from actual values") 
plt.legend("..#")

"""With the exception of few outliers, the predictions seem to be nearly the same as the actual values. This indicates homoscedasticity, constant variance, and a lack of bias. The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

WindQuadRatioPredict = Wind_ypred/ypred

#OLS predicted quadratic average monthly ratios versus actual ratios 
sns.residplot(x = WindQuadRatioPredict , y = pdToListWind, lowess = True, color="g")
plt.suptitle("Predicted quadratic wind power output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice the slight hump in the fitted model, which form a nonlinear pattern. However, the slight hump is too subtle to suggest that a different model would be more suitable to use. In addition, the observations are spread out without the distinct pattern, indicating constant variance, a lack of bias and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

# OLS predicted linear average monthly ratios versus actual ratios
sns.residplot(x = WindRegRatioPredict, y = pdToListWind, lowess = True, color="g")
plt.suptitle("Predicted linear wind power output ratio versus actual ratio")
plt.xlabel("Predicted average monthly outputs")
plt.ylabel("Amount from actual values") 

plt.legend("..#")

"""As one can observe this residual plot, one may notice the humps in the lowess line.However, the observations are spread out without the distinct pattern, indicating constant variance and homoscedasticity.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

modelwindonshore = stats.linregress([7587.697135061391, 7731.806547619048, 6747.878869448183, 5506.381615598886, 6757.408602150537, 4375.495132127956, 3955.2540322580644, 4856.173387096775, 4323.8, 4597.236559139785, 4493.763888888889, 4943.14131897712, 4993.399193548387, 6534.337643678161, 5884.690444145357, 5343.191666666667, 5309.384408602151, 5638.5375, 5715.833109017497, 5103.193548387097, 5484.695833333333, 4788.928859060403, 5766.394444444444, 4519.7661290322585, 6483.298387096775, 5330.943452380952, 5623.149394347241, 5741.669444444445, 5031.903225806452, 5586.527777777777, 4799.477150537635, 4348.514784946236, 3883.8791666666666, 5234.8, 5200.188888888889, 7257.2553763440865, 6197.444892473119, 6864.555059523809, 8771.240915208613, 5289.247222222222, 4389.743279569892, 4779.433333333333, 4059.907133243607, 4358.579301075269, 4265.988888888889, 6156.939597315436, 5886.720430107527, 6057.558333333333], [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

#slope and intercept for OLS linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(wind,io2)
print("slope: %f    intercept: %f" % (slope, intercept))





print(nuclear)

print(io2)

print(solar)

print(fossil_gas)

print(biomass)

print(wind)

print(Fossil_hard)

print(nuclear)

print(hydro_water)

print(fossil_oil)

print(fossil_brown)

data = [383.548775,5469.944902,298.324069,447.860317,2608.982390,6264.260822,85.633141,4255.364629,1431.838433,5619.729849]
label = ['Biomass', 'Wind','Fossil oil', 'fossil brown coal','Hydro Reservoir', 'Nuclear', 'Other renewables', 'Fossil hard coal' , 'Solar', 'Fossil gas']
 
plt.pie(data, labels=label, autopct='%1.1f%%', explode=[0,0,0,0,0,0,0,0,0,0], shadow=True, startangle=90)
plt.suptitle('Distrubtion of Spanish megawatt production based off the total average monthly outputs of the respective resources from 2015 to 2018')
plt.axis('equal')
plt.show()
#Pie Chart

"""Based off of this pie chart, nuclear output is the most productive resource since it produced 23.3% of Spains energy while other renewables were the least productive resource since they produced only 0.3% of Spains energy."""

#Multiple OLS regression 

import statsmodels.api as sm
import numpy as np

y = [64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 66.6235138888889, 67.04260752688172]


 
X = [[6665.969986357435, 6681.1235119047615, 6687.913862718708, 6068.16991643454, 5403.817204301075, 5659.276773296245, 6483.623655913979, 6437.845430107527, 6466.175, 5854.012096774193, 5973.075, 6626.029609690444, 6223.8494623655915, 6159.264367816092, 6699.888290713325, 6706.406944444445, 5714.009408602151, 6647.4638888888885, 6628.9220430107525, 6633.3494623655915, 6675.7555555555555, 6576.6859060402685, 5534.297222222222, 6325.970430107527, 6769.916666666667, 6739.267857142857, 6755.951547779273, 6676.383333333333, 5561.240591397849, 6063.859722222222, 6117.403225806452, 6675.846774193548, 6427.688888888889, 6003.754362416107, 5565.216666666666, 6815.138440860215, 6723.689516129032, 6429.3735119047615, 6091.685060565276, 5504.175, 5465.200268817204, 5603.227777777778, 6121.515477792732, 6655.32123655914, 6621.998611111111, 6539.120805369127, 5403.497222222222, 5821.1518817204305],
     [1130.392905866303, 1244.5252976190477, 1283.479138627187, 1461.5194986072424, 1920.2728494623657, 1998.6606397774688, 1973.7405913978494, 1738.9502688172042, 1591.2902777777779, 1082.279569892473, 1171.7194444444444, 874.3135935397039, 1025.741935483871, 1258.058908045977, 1382.9057873485867, 1390.4166666666667, 1689.1814516129032, 1942.8291666666667, 1915.7752355316286, 1835.8521505376343, 1548.213888888889, 1013.2832214765101, 951.3819444444445, 914.9758064516129, 1088.4180107526881, 1157.4613095238096, 1415.0915208613728, 1468.8277777777778, 1800.0524193548388, 1919.0236111111112, 2025.119623655914, 1754.159946236559, 1731.3666666666666, 1344.3261744966444, 1180.6458333333333, 1035.4260752688172, 1051.4193548387098, 1246.110119047619, 1352.3189771197847, 1501.6472222222221, 1526.899193548387, 1855.1972222222223, 2010.3458950201884, 1706.9301075268818, 1510.6527777777778, 999.786577181208, 875.5900537634409, 831.6680555555556],
 [4850.009549795362, 4674.135416666667, 4614.7523553162855, 4952.123955431754, 4415.3494623655915, 4934.930458970793, 6529.490591397849, 4919.491935483871, 5076.581944444444, 5231.5, 5387.741666666667, 5062.588156123822, 5271.1196236559135, 4450.360632183908, 4336.594885598924, 4263.481944444445, 4508.034946236559, 4994.327777777778, 5475.64333781965, 4869.987903225807, 4643.55, 6222.820134228188, 6439.015277777778, 6176.176075268817, 6412.591397849463, 5561.144345238095, 5337.418573351279, 5169.840277777777, 5493.271505376344, 7194.280555555555, 7366.073924731183, 6701.935483870968, 7092.451388888889, 6961.8, 8534.818055555555, 5835.915322580645, 5687.715053763441, 5468.040178571428, 4936.013458950202, 4745.273611111111, 5777.162634408603, 5807.555555555556, 5865.691790040377, 6119.346774193548, 5842.0625, 6127.481879194631, 6463.5362903225805, 6945.804166666667],
  [483.73533424283767, 470.1502976190476, 468.1063257065949, 426.32033426183847, 503.5698924731183, 485.99860917941584, 512.4879032258065, 518.9475806451613, 517.1069444444445, 519.5564516129032, 503.6166666666667, 483.92462987886944, 459.9959677419355, 430.3448275862069, 429.7442799461642, 286.8902777777778, 337.2029569892473, 340.3375, 351.8896366083446, 369.64516129032256, 349.39166666666665, 336.2187919463087, 355.57301808066757, 338.7768817204301, 347.28360215053766, 351.3645833333333, 284.40242261103634, 280.7611111111111, 353.5040322580645, 339.9791666666667, 367.7069892473118, 362.8790322580645, 351.96805555555557, 343.938255033557, 354.59305555555557, 347.1733870967742, 343.8481182795699, 360.51190476190476, 307.2543741588156, 299.3930555555556, 318.30913978494624, 351.73333333333335, 367.2207267833109, 361.3252688172043, 355.46805555555557, 317.9275167785235, 342.10277777777776, 320.16129032258067],
  [7587.697135061391, 7731.806547619048, 6747.878869448183, 5506.381615598886, 6757.408602150537, 4375.495132127956, 3955.2540322580644, 4856.173387096775, 4323.8, 4597.236559139785, 4493.763888888889, 4943.14131897712, 4993.399193548387, 6534.337643678161, 5884.690444145357, 5343.191666666667, 5309.384408602151, 5638.5375, 5715.833109017497, 5103.193548387097, 5484.695833333333, 4788.928859060403, 5766.394444444444, 4519.7661290322585, 6483.298387096775, 5330.943452380952, 5623.149394347241, 5741.669444444445, 5031.903225806452, 5586.527777777777, 4799.477150537635, 4348.514784946236, 3883.8791666666666, 5234.8, 5200.188888888889, 7257.2553763440865, 6197.444892473119, 6864.555059523809, 8771.240915208613, 5289.247222222222, 4389.743279569892, 4779.433333333333, 4059.907133243607, 4358.579301075269, 4265.988888888889, 6156.939597315436, 6057.558333333333, 5886.720430107527],
 [5411.263301500682, 4045.9747023809523, 4233.818304172274, 4819.516713091922, 4019.6129032258063, 6207.095966620306, 6748.469086021505, 5859.370967741936, 5653.873611111111, 5788.694892473119, 5982.631944444444, 5323.676985195155, 4204.615591397849, 3027.655172413793, 2985.886944818304, 2226.186111111111, 2226.65188172043, 2877.0805555555557, 4003.9165545087485, 4172.501344086021, 4208.013888888889, 4271.040268456376, 4581.631944444444, 4984.295698924731, 5533.782258064516, 4382.5327380952385, 2967.8492597577388, 3119.322222222222, 4428.919354838709, 5091.152777777777, 4561.283602150537, 3786.2325268817203, 4010.465277777778, 4321.130201342282, 5491.216666666666, 4330.653225806452, 3783.6223118279568, 4144.389880952381, 2157.1830417227457, 2775.8791666666666, 3674.15188172043, 3059.616666666667, 4014.707940780619, 4121.565860215053, 4651.018055555555, 3782.8161073825504, 4838.777777777777, 3365.7580645161293],
  [70.66030013642565, 70.51488095238095, 66.63257065948856, 69.70055710306407, 70.56586021505376, 65.51182197496523, 68.3252688172043, 68.1760752688172, 67.96666666666667, 70.66935483870968, 70.3125, 71.62314939434724, 77.95430107526882, 74.45402298850574, 73.40242261103634, 78.275, 79.28225806451613, 83.48333333333333, 78.6271870794078, 78.43010752688173, 83.79166666666667, 83.78120805369127, 85.95694444444445, 90.09005376344086, 99.20430107526882, 94.90922619047619, 95.6850605652759, 95.97083333333333, 96.74596774193549, 92.10555555555555, 93.39650537634408, 92.24731182795699, 94.87222222222222, 95.6268456375839, 94.90138888888889, 91.81586021505376, 96.98252688172043, 96.75744047619048, 97.64199192462988, 97.15138888888889, 100.59005376344086, 101.10972222222222, 96.71736204576042, 96.61559139784946, 100.19444444444444, 98.61744966442953, 96.4625, 95.88172043010752],
 [306.0204638472033, 319.2395833333333, 319.3337819650067, 338.78133704735376, 332.56720430107526, 319.2294853963839, 360.23387096774195, 323.9139784946237, 343.4916666666667, 323.39112903225805, 346.06388888888887, 330.6514131897712, 337.46505376344084, 297.25431034482756, 294.05248990578735, 259.8875, 277.9153225806452, 289.82916666666665, 286.6900269541779, 283.30645161290323, 281.3861111111111, 276.9959731543624, 271.56944444444446, 276.63978494623655, 279.52284946236557, 291.4017857142857, 302.50740242261105, 261.4902777777778, 291.9206989247312, 299.3930555555556, 308.2002688172043, 306.23521505376345, 310.8013888888889, 287.4187919463087, 303.54305555555555, 293.9260752688172, 285.73924731182797, 295.9002976190476, 288.1265141318977, 257.62916666666666, 280.4502688172043, 285.12083333333334, 281.5450874831763, 283.3333333333333, 296.1361111111111, 291.2993288590604, 272.98333333333335, 269.02150537634407],
 [2572.3396998635744, 3712.690476190476, 3081.620457604307, 2516.0125348189417, 2798.184139784946, 2531.1682892906815, 2412.5255376344085, 1963.0631720430108, 2261.1569444444444, 2276.9193548387098, 2404.3902777777776, 1943.42799461642, 4075.5846774193546, 4881.568965517241, 3901.5450874831763, 5119.295833333334, 4581.743279569892, 2983.7930555555554, 2556.6971736204578, 2460.0201612903224, 2303.461111111111, 2500.489932885906, 2501.2972222222224, 2805.2970430107525, 2156.951612903226, 1874.8497023809523, 2348.4589502018844, 1611.4152777777779, 1639.616935483871, 1448.6444444444444, 1290.983870967742, 1260.6908602150538, 1570.5097222222223, 1229.2845637583894, 1371.338888888889, 1452.9569892473119, 2271.896505376344, 2773.2038690476193, 4378.419919246298, 4159.898611111111, 2931.19623655914, 3362.5291666666667, 2789.228802153432, 2296.0295698924733, 2267.641666666667, 2172.1919463087247, 2665.9, 2763.0241935483873],
 [572.8512960436562, 313.41815476190476, 244.43741588156124, 463.11977715877435, 374.2809139784946, 665.162726008345, 684.2204301075269, 585.7674731182796, 548.0833333333334, 528.0188172043011, 695.2847222222222, 493.4804845222073, 417.9274193548387, 191.66522988505747, 173.20323014804845, 143.57083333333333, 179.002688172043, 175.6, 398.8156123822342, 464.3736559139785, 473.72083333333336, 613.7691275167786, 649.5458333333333, 670.7956989247311, 688.6451612903226, 603.4151785714286, 335.66756393001344, 420.1152777777778, 500.77016129032256, 478.81111111111113, 650.6774193548387, 511.8467741935484, 642.6305555555556, 561.3221476510067, 667.6472222222222, 476.5430107526882, 379.56451612903226, 406.95089285714283, 124.41588156123822, 133.97916666666666, 307.7043010752688, 333.99861111111113, 506.36877523553164, 300.14247311827955, 558.1611111111112, 405.83758389261743, 375.7361111111111, 406.22849462365593]]
def reg(y, x):
    ones = np.ones(len(x[0]))
    X = sm.add_constant(np.column_stack((x[0], ones)))
    for ele in x[1:]:
        X = sm.add_constant(np.column_stack((ele, X)))
    results = sm.OLS(y, X).fit()
    predictionsresults = results.predict(X)
    return results
    


print(reg(y, X).summary())

"""X1 = Nuclear, X2 = Solar, X3 = Fossil gas, X4 = Biomass, X5 = On shore wind, X6 = Fossil hard coal, X7 = Other renewable, X8 = Fossil oil, X9 = Hydro reservior, X10 = Fossil brown coal

Our null hypothesis is that the coefficents total average nuclear,solar,fossil fuel gas, wind onshore, fossil hard coal, hydro, other renewable,fossil oil, hydro water reservoir and fossil brown coal/lignite generated are all 0.
 
Our alternative hypothesis is that the coefficents total average nuclear,solar,fossil fuel gas, wind onshore, fossil hard coal, hydro, other renewable,fossil oil, hydro water reservoir and fossil brown coal/lignite generated are not 0.
 
 
We will evaluate the significance behind these results under the alpha threshold of .05. This would mean that any variables having an impact of 5% or less of the time would be deemed significant. Furthermore, this would indicate that the average monthly outputs of a resource is indeed impacted by the average monthly price of energy per EUR/MWH and by other resources in the regression. Given that the p values of respective monthly nuclear,solar,fossil fuel gas,biomass, wind onshore, fossil hard coal, other renewable,fossil oil, hydro water reservoir and fossil brown coal/lignite output averages generated in a given month from 2015 to 2018 compared to the total average price of energy per EUR/MWH are 0.978, 0.786,0.342,0.000,0.001,0.498,0.070, 0.977,0.647 and 0.497 respectively, one could conclude that there is significance between the average price of energy per EUR/MWH and the hydro generated from 2015 to 2018. In addition, one could conclude that there is significance between the average price of energy per EUR/MWH and other renewable energy generated from 2015 to 2018.This implies that the total average monthly outputs of biomass and on shore wind generated from 2015 to 2018 do have an correlation with the average price of energy per EUR/MWH. This would imply that the output amount generated from biomass and on shore wind are affected by the average monthly prices of energy per EUR/MWH from 2015 to 2018 in Spain. Below is the Predicted model generated from this particular regression.
 
 
0.0003(X1) + 0.0004(X2) -0.0723(X3)+ 0.7494(X4) + 0.0076(X5) + 0.0007(X6) + 0.0713(X7) -0.00004956(X8) -0.0013(X9) + 0.0015(X10)-57.1224
 
 
Given the multi variable regression model above, one can observe and conclude patterns of volatility amongst the variables. For example, when the production of nuclear power increases by one unit, the average price of energy per EUR/MWH increases by .0003 units. When the production of solar increases by one unit, the average price of energy per EUR/MWH increases by .0004 units. When the production of fossil fuel gas increases by one unit, the average price of energy per EUR/MWH decreases by .0723 units. When the production of wind onshore increases by one unit, the average price of energy per EUR/MWH increases by .7494 units. When the production of fossil hard coal increases by one unit, the price of energy per EUR/MWH increases by .0076 units. When the production of hydro increases by one unit, the price of energy per EUR/MWH increases by .0007 units. When the production of other renewables increases by one unit, the price of energy per EUR/MWH increases by .0713 units. When the production of fossil oil increases by one unit, the price of energy per EUR/MWH decreases by .00004956 units. When the production of hydro water increases by one unit, the price of energy per EUR/MWH decreases by .0013 units. When the production of fossil brown coal increases by one unit, the price of energy per EUR/MWH increases by .0015 units. 
 
  Given these circumstances, it appears that the average price of energy per EUR/MWH decreases when fossil fuel and oil production increase. In addition, the average price of energy per EUR/MWH decreases when hydro power production increases. However, since their p values were above the alpha threshold, it would not be fair to assume that this is truly the case. In retrospect, it would be fair to assume that the price of energy per EUR/MWH increases when hydro and other renewable increase their production outputs.
 
Based off this regression analysis , the output amounts of some resources are dependant to the price of energy per EUR/MWH.
"""

influence = reg(y, X).get_influence()# Multiple regression OLS residuals


standardized_residuals = influence.resid_studentized_internal


print(list(standardized_residuals))

#Multiple regression residual plot

sns.residplot(x=[64.9490188172043, 56.38385416666667, 55.52246298788695, 58.354083333333335, 57.29405913978494, 65.97490277777777, 71.0720430107527, 63.99806451612903, 60.25479166666667, 59.40676510067113, 60.72679166666667, 61.901760752688176, 45.57872311827957, 36.75208333333333, 36.818008075370116, 32.61866666666666, 34.69137096774194, 46.26631944444444, 47.502016129032256, 47.60233870967742, 50.40559722222222, 60.18242953020134, 62.58105555555556, 67.59513440860215, 79.49208333333334, 59.83779761904762, 50.95989232839838, 51.71791666666666, 53.772620967741936, 56.25822222222222, 55.25258064516129, 54.08432795698924, 55.81655555555556, 63.92528859060402, 65.43065277777778, 65.15127688172043, 56.511975806451616, 60.877098214285716, 48.279717362045766, 50.40073611111111, 61.63376344086022, 64.34813888888888, 67.78344086021505, 70.36391129032258, 76.91404166666666, 70.36221476510067, 66.6235138888889, 67.04260752688172],y =[0.10477158543926485, 0.752143049395303, 1.086139622058257, 1.6954362975438575, 1.6126903196822373, 1.003415695089534, 0.8675520835041093, 0.01846113371907312, -0.06913781119385613, -1.132444622655525, -0.5858287909809463, 0.20147865718772684, -1.9215700741352895, -1.6050647938840437, -1.381479760830908, -0.3841892993061226, -0.13004093934300504, 0.5338446340926323, -0.33890290161961495, -0.731380438166916, -0.8793566886908649, 0.9221699521358143, 0.45043912511291906, 0.4209567704774091, 0.24427393588817292, -0.8874985389754407, 0.40246827398422846, -0.16975572642031625, -1.8869203201594564, -1.678952996828757, -1.3464850134340751, -0.38666014843656327, -0.4659553096645099, 0.19268509440633333, -1.047211779367519, 0.4294883459950216, -1.055976052854833, -0.8260944794332877, -0.16091988035133376, -0.19937642982147077, 0.43161884162258496, 1.3451828561918475, 1.0099146874254956, 1.3200693741870912, 1.415853489977706, 1.6696639658052026, -0.5221651136918398, 1.9625392669641346],lowess = True, color="g")
plt.suptitle("Residuals from multiple regression model versus predicted values")
plt.title("R squared: 0.744")
plt.xlabel("Average monthly prices of energy per EUR/MWH")
plt.ylabel("Amount from actual values") 
plt.legend("..#")

"""As one can observe, there is a subtle hump along the lowess line in the residual plot. In addition, there residuals are quite spread out in no particular pattern which indicates constant variance, a lack of bias, and homoscedasticity. Given these circumstances, it would be reasonable to assume that the multiple regression model of fit is suitable.The green dots represent the respective observations while the dotted horizontal line represents the regression model. The green line represents the expected accuracy from the observed regression value versus the actual value of the observation itself."""

solar =[]
df2018_11.describe(include='all').loc['mean']
solar.append(df2018_11.describe(include='all').loc['mean']['generation solar'])
df2018_12.describe(include='all').loc['mean']
solar.append(df2018_12.describe(include='all').loc['mean']['generation solar'])
df2018_10.describe(include='all').loc['mean']
solar.append(df2018_10.describe(include='all').loc['mean']['generation solar'])
df2018_9.describe(include='all').loc['mean']
solar.append(df2018_9.describe(include='all').loc['mean']['generation solar'])
df2018_8.describe(include='all').loc['mean']
solar.append(df2018_8.describe(include='all').loc['mean']['generation solar'])
df2018_7.describe(include='all').loc['mean']
solar.append(df2018_7.describe(include='all').loc['mean']['generation solar'])
df2018_6.describe(include='all').loc['mean']
solar.append(df2018_6.describe(include='all').loc['mean']['generation solar'])
df2018_5.describe(include='all').loc['mean']
solar.append(df2018_5.describe(include='all').loc['mean']['generation solar'])
df2018_4.describe(include='all').loc['mean']
solar.append(df2018_4.describe(include='all').loc['mean']['generation solar'])
df2018_3.describe(include='all').loc['mean']
solar.append(df2018_3.describe(include='all').loc['mean']['generation solar'])
df2018_2.describe(include='all').loc['mean']
solar.append(df2018_2.describe(include='all').loc['mean']['generation solar'])
df2018_1.describe(include='all').loc['mean']
solar.append(df2018_1.describe(include='all').loc['mean']['generation solar'])
df2017_12.describe(include='all').loc['mean']
solar.append(df2017_12.describe(include='all').loc['mean']['generation solar'])
df2017_11.describe(include='all').loc['mean']
solar.append(df2017_11.describe(include='all').loc['mean']['generation solar'])
df2017_10.describe(include='all').loc['mean']
solar.append(df2017_10.describe(include='all').loc['mean']['generation solar'])
df2017_9.describe(include='all').loc['mean']
solar.append(df2017_9.describe(include='all').loc['mean']['generation solar'])
df2017_8.describe(include='all').loc['mean']
solar.append(df2017_8.describe(include='all').loc['mean']['generation solar'])
df2017_7.describe(include='all').loc['mean']
solar.append(df2017_7.describe(include='all').loc['mean']['generation solar'])
df2017_6.describe(include='all').loc['mean']
solar.append(df2017_6.describe(include='all').loc['mean']['generation solar'])
df2017_5.describe(include='all').loc['mean']
solar.append(df2017_5.describe(include='all').loc['mean']['generation solar'])
df2017_4.describe(include='all').loc['mean']
solar.append(df2017_4.describe(include='all').loc['mean']['generation solar'])
df2017_3.describe(include='all').loc['mean']
solar.append(df2017_3.describe(include='all').loc['mean']['generation solar'])
df2017_2.describe(include='all').loc['mean']
solar.append(df2017_2.describe(include='all').loc['mean']['generation solar'])
df2017_1.describe(include='all').loc['mean']
solar.append(df2017_1.describe(include='all').loc['mean']['generation solar'])
df2016_12.describe(include='all').loc['mean']
solar.append(df2016_12.describe(include='all').loc['mean']['generation solar'])
df2016_11.describe(include='all').loc['mean']
solar.append(df2016_11.describe(include='all').loc['mean']['generation solar'])
df2016_10.describe(include='all').loc['mean']
solar.append(df2016_10.describe(include='all').loc['mean']['generation solar'])
df2016_9.describe(include='all').loc['mean']
solar.append(df2016_9.describe(include='all').loc['mean']['generation solar'])
df2016_8.describe(include='all').loc['mean']
solar.append(df2016_8.describe(include='all').loc['mean']['generation solar'])
df2016_7.describe(include='all').loc['mean']
solar.append(df2016_7.describe(include='all').loc['mean']['generation solar'])
df2016_6.describe(include='all').loc['mean']
solar.append(df2016_6.describe(include='all').loc['mean']['generation solar'])
df2016_5.describe(include='all').loc['mean']
solar.append(df2016_5.describe(include='all').loc['mean']['generation solar'])
df2016_4.describe(include='all').loc['mean']
solar.append(df2016_4.describe(include='all').loc['mean']['generation solar'])
df2016_3.describe(include='all').loc['mean']
solar.append(df2016_3.describe(include='all').loc['mean']['generation solar'])
df2016_2.describe(include='all').loc['mean']
solar.append(df2016_2.describe(include='all').loc['mean']['generation solar'])
df2016_1.describe(include='all').loc['mean']
solar.append(df2016_1.describe(include='all').loc['mean']['generation solar'])
df2015_12.describe(include='all').loc['mean']
solar.append(df2015_12.describe(include='all').loc['mean']['generation solar'])
df2015_11.describe(include='all').loc['mean']
solar.append(df2015_11.describe(include='all').loc['mean']['generation solar'])
df2015_10.describe(include='all').loc['mean']
solar.append(df2015_10.describe(include='all').loc['mean']['generation solar'])
df2015_9.describe(include='all').loc['mean']
solar.append(df2015_9.describe(include='all').loc['mean']['generation solar'])
df2015_8.describe(include='all').loc['mean']
solar.append(df2015_8.describe(include='all').loc['mean']['generation solar'])
df2015_7.describe(include='all').loc['mean']
solar.append(df2015_7.describe(include='all').loc['mean']['generation solar'])
df2015_6.describe(include='all').loc['mean']
solar.append(df2015_6.describe(include='all').loc['mean']['generation solar'])
df2015_5.describe(include='all').loc['mean']
solar.append(df2015_5.describe(include='all').loc['mean']['generation solar'])
df2015_4.describe(include='all').loc['mean']
solar.append(df2015_4.describe(include='all').loc['mean']['generation solar'])
df2015_3.describe(include='all').loc['mean']
solar.append(df2015_3.describe(include='all').loc['mean']['generation solar'])
df2015_2.describe(include='all').loc['mean']
solar.append(df2015_2.describe(include='all').loc['mean']['generation solar'])
df2015_1.describe(include='all').loc['mean']
solar.append(df2015_1.describe(include='all').loc['mean']['generation solar'])

solar.reverse() # Average monthly values 
print(solar)

"""Below are the codes that extracted and appended the means of each month from 2015 to 2016"""

fossil_gas =[]


fossil_gas.append(df2018_11.describe(include='all').loc['mean']["generation fossil gas"])
df2018_12.describe(include='all').loc['mean']
fossil_gas.append(df2018_12.describe(include='all').loc['mean']["generation fossil gas"])
df2018_10.describe(include='all').loc['mean']
fossil_gas.append(df2018_10.describe(include='all').loc['mean']["generation fossil gas"])
df2018_9.describe(include='all').loc['mean']
fossil_gas.append(df2018_9.describe(include='all').loc['mean']["generation fossil gas"])
df2018_8.describe(include='all').loc['mean']
fossil_gas.append(df2018_8.describe(include='all').loc['mean']["generation fossil gas"])
df2018_7.describe(include='all').loc['mean']
fossil_gas.append(df2018_7.describe(include='all').loc['mean']["generation fossil gas"])
df2018_6.describe(include='all').loc['mean']
fossil_gas.append(df2018_6.describe(include='all').loc['mean']["generation fossil gas"])
df2018_5.describe(include='all').loc['mean']
fossil_gas.append(df2018_5.describe(include='all').loc['mean']["generation fossil gas"])
df2018_4.describe(include='all').loc['mean']
fossil_gas.append(df2018_4.describe(include='all').loc['mean']["generation fossil gas"])
df2018_3.describe(include='all').loc['mean']
fossil_gas.append(df2018_3.describe(include='all').loc['mean']["generation fossil gas"])
df2018_2.describe(include='all').loc['mean']
fossil_gas.append(df2018_2.describe(include='all').loc['mean']["generation fossil gas"])
df2018_1.describe(include='all').loc['mean']
fossil_gas.append(df2018_1.describe(include='all').loc['mean']["generation fossil gas"])
df2017_12.describe(include='all').loc['mean']
fossil_gas.append(df2017_12.describe(include='all').loc['mean']["generation fossil gas"])
df2017_11.describe(include='all').loc['mean']
fossil_gas.append(df2017_11.describe(include='all').loc['mean']["generation fossil gas"])
df2017_10.describe(include='all').loc['mean']
fossil_gas.append(df2017_10.describe(include='all').loc['mean']["generation fossil gas"])
df2017_9.describe(include='all').loc['mean']
fossil_gas.append(df2017_9.describe(include='all').loc['mean']["generation fossil gas"])
df2017_8.describe(include='all').loc['mean']
fossil_gas.append(df2017_8.describe(include='all').loc['mean']["generation fossil gas"])
df2017_7.describe(include='all').loc['mean']
fossil_gas.append(df2017_7.describe(include='all').loc['mean']["generation fossil gas"])
df2017_6.describe(include='all').loc['mean']
fossil_gas.append(df2017_6.describe(include='all').loc['mean']["generation fossil gas"])
df2017_5.describe(include='all').loc['mean']
fossil_gas.append(df2017_5.describe(include='all').loc['mean']["generation fossil gas"])
df2017_4.describe(include='all').loc['mean']
fossil_gas.append(df2017_4.describe(include='all').loc['mean']["generation fossil gas"])
df2017_3.describe(include='all').loc['mean']
fossil_gas.append(df2017_3.describe(include='all').loc['mean']["generation fossil gas"])
df2017_2.describe(include='all').loc['mean']
fossil_gas.append(df2017_2.describe(include='all').loc['mean']["generation fossil gas"])
df2017_1.describe(include='all').loc['mean']
fossil_gas.append(df2017_1.describe(include='all').loc['mean']["generation fossil gas"])
df2016_12.describe(include='all').loc['mean']
fossil_gas.append(df2016_12.describe(include='all').loc['mean']["generation fossil gas"])
df2016_11.describe(include='all').loc['mean']
fossil_gas.append(df2016_11.describe(include='all').loc['mean']["generation fossil gas"])
df2016_10.describe(include='all').loc['mean']
fossil_gas.append(df2016_10.describe(include='all').loc['mean']["generation fossil gas"])
df2016_9.describe(include='all').loc['mean']
fossil_gas.append(df2016_9.describe(include='all').loc['mean']["generation fossil gas"])
df2016_8.describe(include='all').loc['mean']
fossil_gas.append(df2016_8.describe(include='all').loc['mean']["generation fossil gas"])
df2016_7.describe(include='all').loc['mean']
fossil_gas.append(df2016_7.describe(include='all').loc['mean']["generation fossil gas"])
df2016_6.describe(include='all').loc['mean']
fossil_gas.append(df2016_6.describe(include='all').loc['mean']["generation fossil gas"])
df2016_5.describe(include='all').loc['mean']
fossil_gas.append(df2016_5.describe(include='all').loc['mean']["generation fossil gas"])
df2016_4.describe(include='all').loc['mean']
fossil_gas.append(df2016_4.describe(include='all').loc['mean']["generation fossil gas"])
df2016_3.describe(include='all').loc['mean']
fossil_gas.append(df2016_3.describe(include='all').loc['mean']["generation fossil gas"])
df2016_2.describe(include='all').loc['mean']
fossil_gas.append(df2016_2.describe(include='all').loc['mean']["generation fossil gas"])
df2016_1.describe(include='all').loc['mean']
fossil_gas.append(df2016_1.describe(include='all').loc['mean']["generation fossil gas"])
df2015_12.describe(include='all').loc['mean']
fossil_gas.append(df2015_12.describe(include='all').loc['mean']["generation fossil gas"])
df2015_11.describe(include='all').loc['mean']
fossil_gas.append(df2015_11.describe(include='all').loc['mean']["generation fossil gas"])
df2015_10.describe(include='all').loc['mean']
fossil_gas.append(df2015_10.describe(include='all').loc['mean']["generation fossil gas"])
df2015_9.describe(include='all').loc['mean']
fossil_gas.append(df2015_9.describe(include='all').loc['mean']["generation fossil gas"])
df2015_8.describe(include='all').loc['mean']
fossil_gas.append(df2015_8.describe(include='all').loc['mean']["generation fossil gas"])
df2015_7.describe(include='all').loc['mean']
fossil_gas.append(df2015_7.describe(include='all').loc['mean']["generation fossil gas"])
df2015_6.describe(include='all').loc['mean']
fossil_gas.append(df2015_6.describe(include='all').loc['mean']["generation fossil gas"])
df2015_5.describe(include='all').loc['mean']
fossil_gas.append(df2015_5.describe(include='all').loc['mean']["generation fossil gas"])
df2015_4.describe(include='all').loc['mean']
fossil_gas.append(df2015_4.describe(include='all').loc['mean']["generation fossil gas"])
df2015_3.describe(include='all').loc['mean']
fossil_gas.append(df2015_3.describe(include='all').loc['mean']["generation fossil gas"])
df2015_2.describe(include='all').loc['mean']
fossil_gas.append(df2015_2.describe(include='all').loc['mean']["generation fossil gas"])
df2015_1.describe(include='all').loc['mean']
fossil_gas.append(df2015_1.describe(include='all').loc['mean']["generation fossil gas"])


fossil_gas.reverse() # Average monthly values 

print(fossil_gas)

nuclear = []

nuclear.append(df2018_11.describe(include='all').loc['mean']['generation nuclear'])
df2018_12.describe(include='all').loc['mean']
nuclear.append(df2018_12.describe(include='all').loc['mean']['generation nuclear'])
df2018_10.describe(include='all').loc['mean']
nuclear.append(df2018_10.describe(include='all').loc['mean']['generation nuclear'])
df2018_9.describe(include='all').loc['mean']
nuclear.append(df2018_9.describe(include='all').loc['mean']['generation nuclear'])
df2018_8.describe(include='all').loc['mean']
nuclear.append(df2018_8.describe(include='all').loc['mean']['generation nuclear'])
df2018_7.describe(include='all').loc['mean']
nuclear.append(df2018_7.describe(include='all').loc['mean']['generation nuclear'])
df2018_6.describe(include='all').loc['mean']
nuclear.append(df2018_6.describe(include='all').loc['mean']['generation nuclear'])
df2018_5.describe(include='all').loc['mean']
nuclear.append(df2018_5.describe(include='all').loc['mean']['generation nuclear'])
df2018_4.describe(include='all').loc['mean']
nuclear.append(df2018_4.describe(include='all').loc['mean']['generation nuclear'])
df2018_3.describe(include='all').loc['mean']
nuclear.append(df2018_3.describe(include='all').loc['mean']['generation nuclear'])
df2018_2.describe(include='all').loc['mean']
nuclear.append(df2018_2.describe(include='all').loc['mean']['generation nuclear'])
df2018_1.describe(include='all').loc['mean']
nuclear.append(df2018_1.describe(include='all').loc['mean']['generation nuclear'])
df2017_12.describe(include='all').loc['mean']
nuclear.append(df2017_12.describe(include='all').loc['mean']['generation nuclear'])
df2017_11.describe(include='all').loc['mean']
nuclear.append(df2017_11.describe(include='all').loc['mean']['generation nuclear'])
df2017_10.describe(include='all').loc['mean']
nuclear.append(df2017_10.describe(include='all').loc['mean']['generation nuclear'])
df2017_9.describe(include='all').loc['mean']
nuclear.append(df2017_9.describe(include='all').loc['mean']['generation nuclear'])
df2017_8.describe(include='all').loc['mean']
nuclear.append(df2017_8.describe(include='all').loc['mean']['generation nuclear'])
df2017_7.describe(include='all').loc['mean']
nuclear.append(df2017_7.describe(include='all').loc['mean']['generation nuclear'])
df2017_6.describe(include='all').loc['mean']
nuclear.append(df2017_6.describe(include='all').loc['mean']['generation nuclear'])
df2017_5.describe(include='all').loc['mean']
nuclear.append(df2017_5.describe(include='all').loc['mean']['generation nuclear'])
df2017_4.describe(include='all').loc['mean']
nuclear.append(df2017_4.describe(include='all').loc['mean']['generation nuclear'])
df2017_3.describe(include='all').loc['mean']
nuclear.append(df2017_3.describe(include='all').loc['mean']['generation nuclear'])
df2017_2.describe(include='all').loc['mean']
nuclear.append(df2017_2.describe(include='all').loc['mean']['generation nuclear'])
df2017_1.describe(include='all').loc['mean']
nuclear.append(df2017_1.describe(include='all').loc['mean']['generation nuclear'])
df2016_12.describe(include='all').loc['mean']
nuclear.append(df2016_12.describe(include='all').loc['mean']['generation nuclear'])
df2016_11.describe(include='all').loc['mean']
nuclear.append(df2016_11.describe(include='all').loc['mean']['generation nuclear'])
df2016_10.describe(include='all').loc['mean']
nuclear.append(df2016_10.describe(include='all').loc['mean']['generation nuclear'])
df2016_9.describe(include='all').loc['mean']
nuclear.append(df2016_9.describe(include='all').loc['mean']['generation nuclear'])
df2016_8.describe(include='all').loc['mean']
nuclear.append(df2016_8.describe(include='all').loc['mean']['generation nuclear'])
df2016_7.describe(include='all').loc['mean']
nuclear.append(df2016_7.describe(include='all').loc['mean']['generation nuclear'])
df2016_6.describe(include='all').loc['mean']
nuclear.append(df2016_6.describe(include='all').loc['mean']['generation nuclear'])
df2016_5.describe(include='all').loc['mean']
nuclear.append(df2016_5.describe(include='all').loc['mean']['generation nuclear'])
df2016_4.describe(include='all').loc['mean']
nuclear.append(df2016_4.describe(include='all').loc['mean']['generation nuclear'])
df2016_3.describe(include='all').loc['mean']
nuclear.append(df2016_3.describe(include='all').loc['mean']['generation nuclear'])
df2016_2.describe(include='all').loc['mean']
nuclear.append(df2016_2.describe(include='all').loc['mean']['generation nuclear'])
df2016_1.describe(include='all').loc['mean']
nuclear.append(df2016_1.describe(include='all').loc['mean']['generation nuclear'])
df2015_12.describe(include='all').loc['mean']
nuclear.append(df2015_12.describe(include='all').loc['mean']['generation nuclear'])
df2015_11.describe(include='all').loc['mean']
nuclear.append(df2015_11.describe(include='all').loc['mean']['generation nuclear'])
df2015_10.describe(include='all').loc['mean']
nuclear.append(df2015_10.describe(include='all').loc['mean']['generation nuclear'])
df2015_9.describe(include='all').loc['mean']
nuclear.append(df2015_9.describe(include='all').loc['mean']['generation nuclear'])
df2015_8.describe(include='all').loc['mean']
nuclear.append(df2015_8.describe(include='all').loc['mean']['generation nuclear'])
df2015_7.describe(include='all').loc['mean']
nuclear.append(df2015_7.describe(include='all').loc['mean']['generation nuclear'])
df2015_6.describe(include='all').loc['mean']
nuclear.append(df2015_6.describe(include='all').loc['mean']['generation nuclear'])
df2015_5.describe(include='all').loc['mean']
nuclear.append(df2015_5.describe(include='all').loc['mean']['generation nuclear'])
df2015_4.describe(include='all').loc['mean']
nuclear.append(df2015_4.describe(include='all').loc['mean']['generation nuclear'])
df2015_3.describe(include='all').loc['mean']
nuclear.append(df2015_3.describe(include='all').loc['mean']['generation nuclear'])
df2015_2.describe(include='all').loc['mean']
nuclear.append(df2015_2.describe(include='all').loc['mean']['generation nuclear'])
df2015_1.describe(include='all').loc['mean']
nuclear.append(df2015_1.describe(include='all').loc['mean']['generation nuclear'])

nuclear.reverse() # Average monthly values 
print(nuclear)



wind = []
 
wind.append(df2018_11.describe(include='all').loc['mean']['generation wind onshore'])
df2018_12.describe(include='all').loc['mean']
wind.append(df2018_12.describe(include='all').loc['mean']['generation wind onshore'])
df2018_10.describe(include='all').loc['mean']
wind.append(df2018_10.describe(include='all').loc['mean']['generation wind onshore'])
df2018_9.describe(include='all').loc['mean']
wind.append(df2018_9.describe(include='all').loc['mean']['generation wind onshore'])
df2018_8.describe(include='all').loc['mean']
wind.append(df2018_8.describe(include='all').loc['mean']['generation wind onshore'])
df2018_7.describe(include='all').loc['mean']
wind.append(df2018_7.describe(include='all').loc['mean']['generation wind onshore'])
df2018_6.describe(include='all').loc['mean']
wind.append(df2018_6.describe(include='all').loc['mean']['generation wind onshore'])
df2018_5.describe(include='all').loc['mean']
wind.append(df2018_5.describe(include='all').loc['mean']['generation wind onshore'])
df2018_4.describe(include='all').loc['mean']
wind.append(df2018_4.describe(include='all').loc['mean']['generation wind onshore'])
df2018_3.describe(include='all').loc['mean']
wind.append(df2018_3.describe(include='all').loc['mean']['generation wind onshore'])
df2018_2.describe(include='all').loc['mean']
wind.append(df2018_2.describe(include='all').loc['mean']['generation wind onshore'])
df2018_1.describe(include='all').loc['mean']
wind.append(df2018_1.describe(include='all').loc['mean']['generation wind onshore'])
df2017_12.describe(include='all').loc['mean']
wind.append(df2017_12.describe(include='all').loc['mean']['generation wind onshore'])
df2017_11.describe(include='all').loc['mean']
wind.append(df2017_11.describe(include='all').loc['mean']['generation wind onshore'])
df2017_10.describe(include='all').loc['mean']
wind.append(df2017_10.describe(include='all').loc['mean']['generation wind onshore'])
df2017_9.describe(include='all').loc['mean']
wind.append(df2017_9.describe(include='all').loc['mean']['generation wind onshore'])
df2017_8.describe(include='all').loc['mean']
wind.append(df2017_8.describe(include='all').loc['mean']['generation wind onshore'])
df2017_7.describe(include='all').loc['mean']
wind.append(df2017_7.describe(include='all').loc['mean']['generation wind onshore'])
df2017_6.describe(include='all').loc['mean']
wind.append(df2017_6.describe(include='all').loc['mean']['generation wind onshore'])
df2017_5.describe(include='all').loc['mean']
wind.append(df2017_5.describe(include='all').loc['mean']['generation wind onshore'])
df2017_4.describe(include='all').loc['mean']
wind.append(df2017_4.describe(include='all').loc['mean']['generation wind onshore'])
df2017_3.describe(include='all').loc['mean']
wind.append(df2017_3.describe(include='all').loc['mean']['generation wind onshore'])
df2017_2.describe(include='all').loc['mean']
wind.append(df2017_2.describe(include='all').loc['mean']['generation wind onshore'])
df2017_1.describe(include='all').loc['mean']
wind.append(df2017_1.describe(include='all').loc['mean']['generation wind onshore'])
df2016_12.describe(include='all').loc['mean']
wind.append(df2016_12.describe(include='all').loc['mean']['generation wind onshore'])
df2016_11.describe(include='all').loc['mean']
wind.append(df2016_11.describe(include='all').loc['mean']['generation wind onshore'])
df2016_10.describe(include='all').loc['mean']
wind.append(df2016_10.describe(include='all').loc['mean']['generation wind onshore'])
df2016_9.describe(include='all').loc['mean']
wind.append(df2016_9.describe(include='all').loc['mean']['generation wind onshore'])
df2016_8.describe(include='all').loc['mean']
wind.append(df2016_8.describe(include='all').loc['mean']['generation wind onshore'])
df2016_7.describe(include='all').loc['mean']
wind.append(df2016_7.describe(include='all').loc['mean']['generation wind onshore'])
df2016_6.describe(include='all').loc['mean']
wind.append(df2016_6.describe(include='all').loc['mean']['generation wind onshore'])
df2016_5.describe(include='all').loc['mean']
wind.append(df2016_5.describe(include='all').loc['mean']['generation wind onshore'])
df2016_4.describe(include='all').loc['mean']
wind.append(df2016_4.describe(include='all').loc['mean']['generation wind onshore'])
df2016_3.describe(include='all').loc['mean']
wind.append(df2016_3.describe(include='all').loc['mean']['generation wind onshore'])
df2016_2.describe(include='all').loc['mean']
wind.append(df2016_2.describe(include='all').loc['mean']['generation wind onshore'])
df2016_1.describe(include='all').loc['mean']
wind.append(df2016_1.describe(include='all').loc['mean']['generation wind onshore'])
df2015_12.describe(include='all').loc['mean']
wind.append(df2015_12.describe(include='all').loc['mean']['generation wind onshore'])
df2015_11.describe(include='all').loc['mean']
wind.append(df2015_11.describe(include='all').loc['mean']['generation wind onshore'])
df2015_10.describe(include='all').loc['mean']
wind.append(df2015_10.describe(include='all').loc['mean']['generation wind onshore'])
df2015_9.describe(include='all').loc['mean']
wind.append(df2015_9.describe(include='all').loc['mean']['generation wind onshore'])
df2015_8.describe(include='all').loc['mean']
wind.append(df2015_8.describe(include='all').loc['mean']['generation wind onshore'])
df2015_7.describe(include='all').loc['mean']
wind.append(df2015_7.describe(include='all').loc['mean']['generation wind onshore'])
df2015_6.describe(include='all').loc['mean']
wind.append(df2015_6.describe(include='all').loc['mean']['generation wind onshore'])
df2015_5.describe(include='all').loc['mean']
wind.append(df2015_5.describe(include='all').loc['mean']['generation wind onshore'])
df2015_4.describe(include='all').loc['mean']
wind.append(df2015_4.describe(include='all').loc['mean']['generation wind onshore'])
df2015_3.describe(include='all').loc['mean']
wind.append(df2015_3.describe(include='all').loc['mean']['generation wind onshore'])
df2015_2.describe(include='all').loc['mean']
wind.append(df2015_2.describe(include='all').loc['mean']['generation wind onshore'])
df2015_1.describe(include='all').loc['mean']
wind.append(df2015_1.describe(include='all').loc['mean']['generation wind onshore'])
 
wind.reverse() # Average monthly values 
print(wind)

Fossil_hard = []
 
Fossil_hard.append(df2018_11.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_12.describe(include='all').loc['mean']
Fossil_hard.append(df2018_12.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_10.describe(include='all').loc['mean']
Fossil_hard.append(df2018_10.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_9.describe(include='all').loc['mean']
Fossil_hard.append(df2018_9.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_8.describe(include='all').loc['mean']
Fossil_hard.append(df2018_8.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_7.describe(include='all').loc['mean']
Fossil_hard.append(df2018_7.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_6.describe(include='all').loc['mean']
Fossil_hard.append(df2018_6.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_5.describe(include='all').loc['mean']
Fossil_hard.append(df2018_5.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_4.describe(include='all').loc['mean']
Fossil_hard.append(df2018_4.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_3.describe(include='all').loc['mean']
Fossil_hard.append(df2018_3.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_2.describe(include='all').loc['mean']
Fossil_hard.append(df2018_2.describe(include='all').loc['mean']['generation fossil hard coal'])
df2018_1.describe(include='all').loc['mean']
Fossil_hard.append(df2018_1.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_12.describe(include='all').loc['mean']
Fossil_hard.append(df2017_12.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_11.describe(include='all').loc['mean']
Fossil_hard.append(df2017_11.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_10.describe(include='all').loc['mean']
Fossil_hard.append(df2017_10.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_9.describe(include='all').loc['mean']
Fossil_hard.append(df2017_9.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_8.describe(include='all').loc['mean']
Fossil_hard.append(df2017_8.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_7.describe(include='all').loc['mean']
Fossil_hard.append(df2017_7.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_6.describe(include='all').loc['mean']
Fossil_hard.append(df2017_6.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_5.describe(include='all').loc['mean']
Fossil_hard.append(df2017_5.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_4.describe(include='all').loc['mean']
Fossil_hard.append(df2017_4.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_3.describe(include='all').loc['mean']
Fossil_hard.append(df2017_3.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_2.describe(include='all').loc['mean']
Fossil_hard.append(df2017_2.describe(include='all').loc['mean']['generation fossil hard coal'])
df2017_1.describe(include='all').loc['mean']
Fossil_hard.append(df2017_1.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_12.describe(include='all').loc['mean']
Fossil_hard.append(df2016_12.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_11.describe(include='all').loc['mean']
Fossil_hard.append(df2016_11.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_10.describe(include='all').loc['mean']
Fossil_hard.append(df2016_10.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_9.describe(include='all').loc['mean']
Fossil_hard.append(df2016_9.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_8.describe(include='all').loc['mean']
Fossil_hard.append(df2016_8.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_7.describe(include='all').loc['mean']
Fossil_hard.append(df2016_7.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_6.describe(include='all').loc['mean']
Fossil_hard.append(df2016_6.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_5.describe(include='all').loc['mean']
Fossil_hard.append(df2016_5.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_4.describe(include='all').loc['mean']
Fossil_hard.append(df2016_4.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_3.describe(include='all').loc['mean']
Fossil_hard.append(df2016_3.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_2.describe(include='all').loc['mean']
Fossil_hard.append(df2016_2.describe(include='all').loc['mean']['generation fossil hard coal'])
df2016_1.describe(include='all').loc['mean']
Fossil_hard.append(df2016_1.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_12.describe(include='all').loc['mean']
Fossil_hard.append(df2015_12.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_11.describe(include='all').loc['mean']
Fossil_hard.append(df2015_11.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_10.describe(include='all').loc['mean']
Fossil_hard.append(df2015_10.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_9.describe(include='all').loc['mean']
Fossil_hard.append(df2015_9.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_8.describe(include='all').loc['mean']
Fossil_hard.append(df2015_8.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_7.describe(include='all').loc['mean']
Fossil_hard.append(df2015_7.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_6.describe(include='all').loc['mean']
Fossil_hard.append(df2015_6.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_5.describe(include='all').loc['mean']
Fossil_hard.append(df2015_5.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_4.describe(include='all').loc['mean']
Fossil_hard.append(df2015_4.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_3.describe(include='all').loc['mean']
Fossil_hard.append(df2015_3.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_2.describe(include='all').loc['mean']
Fossil_hard.append(df2015_2.describe(include='all').loc['mean']['generation fossil hard coal'])
df2015_1.describe(include='all').loc['mean']
Fossil_hard.append(df2015_1.describe(include='all').loc['mean']['generation fossil hard coal'])
 
Fossil_hard.reverse() # Average monthly values 
print(Fossil_hard)

fossil_brown = []
 
fossil_brown.append(df2018_11.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_12.describe(include='all').loc['mean']
fossil_brown.append(df2018_12.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_10.describe(include='all').loc['mean']
fossil_brown.append(df2018_10.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_9.describe(include='all').loc['mean']
fossil_brown.append(df2018_9.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_8.describe(include='all').loc['mean']
fossil_brown.append(df2018_8.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_7.describe(include='all').loc['mean']
fossil_brown.append(df2018_7.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_6.describe(include='all').loc['mean']
fossil_brown.append(df2018_6.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_5.describe(include='all').loc['mean']
fossil_brown.append(df2018_5.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_4.describe(include='all').loc['mean']
fossil_brown.append(df2018_4.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_3.describe(include='all').loc['mean']
fossil_brown.append(df2018_3.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_2.describe(include='all').loc['mean']
fossil_brown.append(df2018_2.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2018_1.describe(include='all').loc['mean']
fossil_brown.append(df2018_1.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_12.describe(include='all').loc['mean']
fossil_brown.append(df2017_12.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_11.describe(include='all').loc['mean']
fossil_brown.append(df2017_11.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_10.describe(include='all').loc['mean']
fossil_brown.append(df2017_10.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_9.describe(include='all').loc['mean']
fossil_brown.append(df2017_9.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_8.describe(include='all').loc['mean']
fossil_brown.append(df2017_8.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_7.describe(include='all').loc['mean']
fossil_brown.append(df2017_7.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_6.describe(include='all').loc['mean']
fossil_brown.append(df2017_6.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_5.describe(include='all').loc['mean']
fossil_brown.append(df2017_5.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_4.describe(include='all').loc['mean']
fossil_brown.append(df2017_4.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_3.describe(include='all').loc['mean']
fossil_brown.append(df2017_3.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_2.describe(include='all').loc['mean']
fossil_brown.append(df2017_2.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2017_1.describe(include='all').loc['mean']
fossil_brown.append(df2017_1.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_12.describe(include='all').loc['mean']
fossil_brown.append(df2016_12.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_11.describe(include='all').loc['mean']
fossil_brown.append(df2016_11.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_10.describe(include='all').loc['mean']
fossil_brown.append(df2016_10.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_9.describe(include='all').loc['mean']
fossil_brown.append(df2016_9.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_8.describe(include='all').loc['mean']
fossil_brown.append(df2016_8.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_7.describe(include='all').loc['mean']
fossil_brown.append(df2016_7.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_6.describe(include='all').loc['mean']
fossil_brown.append(df2016_6.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_5.describe(include='all').loc['mean']
fossil_brown.append(df2016_5.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_4.describe(include='all').loc['mean']
fossil_brown.append(df2016_4.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_3.describe(include='all').loc['mean']
fossil_brown.append(df2016_3.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_2.describe(include='all').loc['mean']
fossil_brown.append(df2016_2.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2016_1.describe(include='all').loc['mean']
fossil_brown.append(df2016_1.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_12.describe(include='all').loc['mean']
fossil_brown.append(df2015_12.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_11.describe(include='all').loc['mean']
fossil_brown.append(df2015_11.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_10.describe(include='all').loc['mean']
fossil_brown.append(df2015_10.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_9.describe(include='all').loc['mean']
fossil_brown.append(df2015_9.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_8.describe(include='all').loc['mean']
fossil_brown.append(df2015_8.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_7.describe(include='all').loc['mean']
fossil_brown.append(df2015_7.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_6.describe(include='all').loc['mean']
fossil_brown.append(df2015_6.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_5.describe(include='all').loc['mean']
fossil_brown.append(df2015_5.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_4.describe(include='all').loc['mean']
fossil_brown.append(df2015_4.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_3.describe(include='all').loc['mean']
fossil_brown.append(df2015_3.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_2.describe(include='all').loc['mean']
fossil_brown.append(df2015_2.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
df2015_1.describe(include='all').loc['mean']
fossil_brown.append(df2015_1.describe(include='all').loc['mean']['generation fossil brown coal/lignite'])
 
fossil_brown.reverse() # Average monthly values 
print(fossil_brown)

biomass= []
 
biomass.append(df2018_11.describe(include='all').loc['mean']['generation biomass'])
df2018_12.describe(include='all').loc['mean']
biomass.append(df2018_12.describe(include='all').loc['mean']['generation biomass'])
df2018_10.describe(include='all').loc['mean']
biomass.append(df2018_10.describe(include='all').loc['mean']['generation biomass'])
df2018_9.describe(include='all').loc['mean']
biomass.append(df2018_9.describe(include='all').loc['mean']['generation biomass'])
df2018_8.describe(include='all').loc['mean']
biomass.append(df2018_8.describe(include='all').loc['mean']['generation biomass'])
df2018_7.describe(include='all').loc['mean']
biomass.append(df2018_7.describe(include='all').loc['mean']['generation biomass'])
df2018_6.describe(include='all').loc['mean']
biomass.append(df2018_6.describe(include='all').loc['mean']['generation biomass'])
df2018_5.describe(include='all').loc['mean']
biomass.append(df2018_5.describe(include='all').loc['mean']['generation biomass'])
df2018_4.describe(include='all').loc['mean']
biomass.append(df2018_4.describe(include='all').loc['mean']['generation biomass'])
df2018_3.describe(include='all').loc['mean']
biomass.append(df2018_3.describe(include='all').loc['mean']['generation biomass'])
df2018_2.describe(include='all').loc['mean']
biomass.append(df2018_2.describe(include='all').loc['mean']['generation biomass'])
df2018_1.describe(include='all').loc['mean']
biomass.append(df2018_1.describe(include='all').loc['mean']['generation biomass'])
df2017_12.describe(include='all').loc['mean']
biomass.append(df2017_12.describe(include='all').loc['mean']['generation biomass'])
df2017_11.describe(include='all').loc['mean']
biomass.append(df2017_11.describe(include='all').loc['mean']['generation biomass'])
df2017_10.describe(include='all').loc['mean']
biomass.append(df2017_10.describe(include='all').loc['mean']['generation biomass'])
df2017_9.describe(include='all').loc['mean']
biomass.append(df2017_9.describe(include='all').loc['mean']['generation biomass'])
df2017_8.describe(include='all').loc['mean']
biomass.append(df2017_8.describe(include='all').loc['mean']['generation biomass'])
df2017_7.describe(include='all').loc['mean']
biomass.append(df2017_7.describe(include='all').loc['mean']['generation biomass'])
df2017_6.describe(include='all').loc['mean']
biomass.append(df2017_6.describe(include='all').loc['mean']['generation biomass'])
df2017_5.describe(include='all').loc['mean']
biomass.append(df2017_5.describe(include='all').loc['mean']['generation biomass'])
df2017_4.describe(include='all').loc['mean']
biomass.append(df2017_4.describe(include='all').loc['mean']['generation biomass'])
df2017_3.describe(include='all').loc['mean']
biomass.append(df2017_3.describe(include='all').loc['mean']['generation biomass'])
df2017_2.describe(include='all').loc['mean']
biomass.append(df2017_2.describe(include='all').loc['mean']['generation biomass'])
df2017_1.describe(include='all').loc['mean']
biomass.append(df2017_1.describe(include='all').loc['mean']['generation biomass'])
df2016_12.describe(include='all').loc['mean']
biomass.append(df2016_12.describe(include='all').loc['mean']['generation biomass'])
df2016_11.describe(include='all').loc['mean']
biomass.append(df2016_11.describe(include='all').loc['mean']['generation biomass'])
df2016_10.describe(include='all').loc['mean']
biomass.append(df2016_10.describe(include='all').loc['mean']['generation biomass'])
df2016_9.describe(include='all').loc['mean']
biomass.append(df2016_9.describe(include='all').loc['mean']['generation biomass'])
df2016_8.describe(include='all').loc['mean']
biomass.append(df2016_8.describe(include='all').loc['mean']['generation biomass'])
df2016_7.describe(include='all').loc['mean']
biomass.append(df2016_7.describe(include='all').loc['mean']['generation biomass'])
df2016_6.describe(include='all').loc['mean']
biomass.append(df2016_6.describe(include='all').loc['mean']['generation biomass'])
df2016_5.describe(include='all').loc['mean']
biomass.append(df2016_5.describe(include='all').loc['mean']['generation biomass'])
df2016_4.describe(include='all').loc['mean']
biomass.append(df2016_4.describe(include='all').loc['mean']['generation biomass'])
df2016_3.describe(include='all').loc['mean']
biomass.append(df2016_3.describe(include='all').loc['mean']['generation biomass'])
df2016_2.describe(include='all').loc['mean']
biomass.append(df2016_2.describe(include='all').loc['mean']['generation biomass'])
df2016_1.describe(include='all').loc['mean']
biomass.append(df2016_1.describe(include='all').loc['mean']['generation biomass'])
df2015_12.describe(include='all').loc['mean']
biomass.append(df2015_12.describe(include='all').loc['mean']['generation biomass'])
df2015_11.describe(include='all').loc['mean']
biomass.append(df2015_11.describe(include='all').loc['mean']['generation biomass'])
df2015_10.describe(include='all').loc['mean']
biomass.append(df2015_10.describe(include='all').loc['mean']['generation biomass'])
df2015_9.describe(include='all').loc['mean']
biomass.append(df2015_9.describe(include='all').loc['mean']['generation biomass'])
df2015_8.describe(include='all').loc['mean']
biomass.append(df2015_8.describe(include='all').loc['mean']['generation biomass'])
df2015_7.describe(include='all').loc['mean']
biomass.append(df2015_7.describe(include='all').loc['mean']['generation biomass'])
df2015_6.describe(include='all').loc['mean']
biomass.append(df2015_6.describe(include='all').loc['mean']['generation biomass'])
df2015_5.describe(include='all').loc['mean']
biomass.append(df2015_5.describe(include='all').loc['mean']['generation biomass'])
df2015_4.describe(include='all').loc['mean']
biomass.append(df2015_4.describe(include='all').loc['mean']['generation biomass'])
df2015_3.describe(include='all').loc['mean']
biomass.append(df2015_3.describe(include='all').loc['mean']['generation biomass'])
df2015_2.describe(include='all').loc['mean']
biomass.append(df2015_2.describe(include='all').loc['mean']['generation biomass'])
df2015_1.describe(include='all').loc['mean']
biomass.append(df2015_1.describe(include='all').loc['mean']['generation biomass'])
 
biomass.reverse() # Average monthly values 

print(biomass)

other_renewable= []
 
other_renewable.append(df2018_11.describe(include='all').loc['mean']['generation other renewable'])
df2018_12.describe(include='all').loc['mean']
other_renewable.append(df2018_12.describe(include='all').loc['mean']['generation other renewable'])
df2018_10.describe(include='all').loc['mean']
other_renewable.append(df2018_10.describe(include='all').loc['mean']['generation other renewable'])
df2018_9.describe(include='all').loc['mean']
other_renewable.append(df2018_9.describe(include='all').loc['mean']['generation other renewable'])
df2018_8.describe(include='all').loc['mean']
other_renewable.append(df2018_8.describe(include='all').loc['mean']['generation other renewable'])
df2018_7.describe(include='all').loc['mean']
other_renewable.append(df2018_7.describe(include='all').loc['mean']['generation other renewable'])
df2018_6.describe(include='all').loc['mean']
other_renewable.append(df2018_6.describe(include='all').loc['mean']['generation other renewable'])
df2018_5.describe(include='all').loc['mean']
other_renewable.append(df2018_5.describe(include='all').loc['mean']['generation other renewable'])
df2018_4.describe(include='all').loc['mean']
other_renewable.append(df2018_4.describe(include='all').loc['mean']['generation other renewable'])
df2018_3.describe(include='all').loc['mean']
other_renewable.append(df2018_3.describe(include='all').loc['mean']['generation other renewable'])
df2018_2.describe(include='all').loc['mean']
other_renewable.append(df2018_2.describe(include='all').loc['mean']['generation other renewable'])
df2018_1.describe(include='all').loc['mean']
other_renewable.append(df2018_1.describe(include='all').loc['mean']['generation other renewable'])
df2017_12.describe(include='all').loc['mean']
other_renewable.append(df2017_12.describe(include='all').loc['mean']['generation other renewable'])
df2017_11.describe(include='all').loc['mean']
other_renewable.append(df2017_11.describe(include='all').loc['mean']['generation other renewable'])
df2017_10.describe(include='all').loc['mean']
other_renewable.append(df2017_10.describe(include='all').loc['mean']['generation other renewable'])
df2017_9.describe(include='all').loc['mean']
other_renewable.append(df2017_9.describe(include='all').loc['mean']['generation other renewable'])
df2017_8.describe(include='all').loc['mean']
other_renewable.append(df2017_8.describe(include='all').loc['mean']['generation other renewable'])
df2017_7.describe(include='all').loc['mean']
other_renewable.append(df2017_7.describe(include='all').loc['mean']['generation other renewable'])
df2017_6.describe(include='all').loc['mean']
other_renewable.append(df2017_6.describe(include='all').loc['mean']['generation other renewable'])
df2017_5.describe(include='all').loc['mean']
other_renewable.append(df2017_5.describe(include='all').loc['mean']['generation other renewable'])
df2017_4.describe(include='all').loc['mean']
other_renewable.append(df2017_4.describe(include='all').loc['mean']['generation other renewable'])
df2017_3.describe(include='all').loc['mean']
other_renewable.append(df2017_3.describe(include='all').loc['mean']['generation other renewable'])
df2017_2.describe(include='all').loc['mean']
other_renewable.append(df2017_2.describe(include='all').loc['mean']['generation other renewable'])
df2017_1.describe(include='all').loc['mean']
other_renewable.append(df2017_1.describe(include='all').loc['mean']['generation other renewable'])
df2016_12.describe(include='all').loc['mean']
other_renewable.append(df2016_12.describe(include='all').loc['mean']['generation other renewable'])
df2016_11.describe(include='all').loc['mean']
other_renewable.append(df2016_11.describe(include='all').loc['mean']['generation other renewable'])
df2016_10.describe(include='all').loc['mean']
other_renewable.append(df2016_10.describe(include='all').loc['mean']['generation other renewable'])
df2016_9.describe(include='all').loc['mean']
other_renewable.append(df2016_9.describe(include='all').loc['mean']['generation other renewable'])
df2016_8.describe(include='all').loc['mean']
other_renewable.append(df2016_8.describe(include='all').loc['mean']['generation other renewable'])
df2016_7.describe(include='all').loc['mean']
other_renewable.append(df2016_7.describe(include='all').loc['mean']['generation other renewable'])
df2016_6.describe(include='all').loc['mean']
other_renewable.append(df2016_6.describe(include='all').loc['mean']['generation other renewable'])
df2016_5.describe(include='all').loc['mean']
other_renewable.append(df2016_5.describe(include='all').loc['mean']['generation other renewable'])
df2016_4.describe(include='all').loc['mean']
other_renewable.append(df2016_4.describe(include='all').loc['mean']['generation other renewable'])
df2016_3.describe(include='all').loc['mean']
other_renewable.append(df2016_3.describe(include='all').loc['mean']['generation other renewable'])
df2016_2.describe(include='all').loc['mean']
other_renewable.append(df2016_2.describe(include='all').loc['mean']['generation other renewable'])
df2016_1.describe(include='all').loc['mean']
other_renewable.append(df2016_1.describe(include='all').loc['mean']['generation other renewable'])
df2015_12.describe(include='all').loc['mean']
other_renewable.append(df2015_12.describe(include='all').loc['mean']['generation other renewable'])
df2015_11.describe(include='all').loc['mean']
other_renewable.append(df2015_11.describe(include='all').loc['mean']['generation other renewable'])
df2015_10.describe(include='all').loc['mean']
other_renewable.append(df2015_10.describe(include='all').loc['mean']['generation other renewable'])
df2015_9.describe(include='all').loc['mean']
other_renewable.append(df2015_9.describe(include='all').loc['mean']['generation other renewable'])
df2015_8.describe(include='all').loc['mean']
other_renewable.append(df2015_8.describe(include='all').loc['mean']['generation other renewable'])
df2015_7.describe(include='all').loc['mean']
other_renewable.append(df2015_7.describe(include='all').loc['mean']['generation other renewable'])
df2015_6.describe(include='all').loc['mean']
other_renewable.append(df2015_6.describe(include='all').loc['mean']['generation other renewable'])
df2015_5.describe(include='all').loc['mean']
other_renewable.append(df2015_5.describe(include='all').loc['mean']['generation other renewable'])
df2015_4.describe(include='all').loc['mean']
other_renewable.append(df2015_4.describe(include='all').loc['mean']['generation other renewable'])
df2015_3.describe(include='all').loc['mean']
other_renewable.append(df2015_3.describe(include='all').loc['mean']['generation other renewable'])
df2015_2.describe(include='all').loc['mean']
other_renewable.append(df2015_2.describe(include='all').loc['mean']['generation other renewable'])
df2015_1.describe(include='all').loc['mean']
other_renewable.append(df2015_1.describe(include='all').loc['mean']['generation other renewable'])
 
other_renewable.reverse() # Average monthly values 
print(other_renewable)

fossil_oil= []
 
fossil_oil.append(df2018_11.describe(include='all').loc['mean']['generation fossil oil'])
df2018_12.describe(include='all').loc['mean']
fossil_oil.append(df2018_12.describe(include='all').loc['mean']['generation fossil oil'])
df2018_10.describe(include='all').loc['mean']
fossil_oil.append(df2018_10.describe(include='all').loc['mean']['generation fossil oil'])
df2018_9.describe(include='all').loc['mean']
fossil_oil.append(df2018_9.describe(include='all').loc['mean']['generation fossil oil'])
df2018_8.describe(include='all').loc['mean']
fossil_oil.append(df2018_8.describe(include='all').loc['mean']['generation fossil oil'])
df2018_7.describe(include='all').loc['mean']
fossil_oil.append(df2018_7.describe(include='all').loc['mean']['generation fossil oil'])
df2018_6.describe(include='all').loc['mean']
fossil_oil.append(df2018_6.describe(include='all').loc['mean']['generation fossil oil'])
df2018_5.describe(include='all').loc['mean']
fossil_oil.append(df2018_5.describe(include='all').loc['mean']['generation fossil oil'])
df2018_4.describe(include='all').loc['mean']
fossil_oil.append(df2018_4.describe(include='all').loc['mean']['generation fossil oil'])
df2018_3.describe(include='all').loc['mean']
fossil_oil.append(df2018_3.describe(include='all').loc['mean']['generation fossil oil'])
df2018_2.describe(include='all').loc['mean']
fossil_oil.append(df2018_2.describe(include='all').loc['mean']['generation fossil oil'])
df2018_1.describe(include='all').loc['mean']
fossil_oil.append(df2018_1.describe(include='all').loc['mean']['generation fossil oil'])
df2017_12.describe(include='all').loc['mean']
fossil_oil.append(df2017_12.describe(include='all').loc['mean']['generation fossil oil'])
df2017_11.describe(include='all').loc['mean']
fossil_oil.append(df2017_11.describe(include='all').loc['mean']['generation fossil oil'])
df2017_10.describe(include='all').loc['mean']
fossil_oil.append(df2017_10.describe(include='all').loc['mean']['generation fossil oil'])
df2017_9.describe(include='all').loc['mean']
fossil_oil.append(df2017_9.describe(include='all').loc['mean']['generation fossil oil'])
df2017_8.describe(include='all').loc['mean']
fossil_oil.append(df2017_8.describe(include='all').loc['mean']['generation fossil oil'])
df2017_7.describe(include='all').loc['mean']
fossil_oil.append(df2017_7.describe(include='all').loc['mean']['generation fossil oil'])
df2017_6.describe(include='all').loc['mean']
fossil_oil.append(df2017_6.describe(include='all').loc['mean']['generation fossil oil'])
df2017_5.describe(include='all').loc['mean']
fossil_oil.append(df2017_5.describe(include='all').loc['mean']['generation fossil oil'])
df2017_4.describe(include='all').loc['mean']
fossil_oil.append(df2017_4.describe(include='all').loc['mean']['generation fossil oil'])
df2017_3.describe(include='all').loc['mean']
fossil_oil.append(df2017_3.describe(include='all').loc['mean']['generation fossil oil'])
df2017_2.describe(include='all').loc['mean']
fossil_oil.append(df2017_2.describe(include='all').loc['mean']['generation fossil oil'])
df2017_1.describe(include='all').loc['mean']
fossil_oil.append(df2017_1.describe(include='all').loc['mean']['generation fossil oil'])
df2016_12.describe(include='all').loc['mean']
fossil_oil.append(df2016_12.describe(include='all').loc['mean']['generation fossil oil'])
df2016_11.describe(include='all').loc['mean']
fossil_oil.append(df2016_11.describe(include='all').loc['mean']['generation fossil oil'])
df2016_10.describe(include='all').loc['mean']
fossil_oil.append(df2016_10.describe(include='all').loc['mean']['generation fossil oil'])
df2016_9.describe(include='all').loc['mean']
fossil_oil.append(df2016_9.describe(include='all').loc['mean']['generation fossil oil'])
df2016_8.describe(include='all').loc['mean']
fossil_oil.append(df2016_8.describe(include='all').loc['mean']['generation fossil oil'])
df2016_7.describe(include='all').loc['mean']
fossil_oil.append(df2016_7.describe(include='all').loc['mean']['generation fossil oil'])
df2016_6.describe(include='all').loc['mean']
fossil_oil.append(df2016_6.describe(include='all').loc['mean']['generation fossil oil'])
df2016_5.describe(include='all').loc['mean']
fossil_oil.append(df2016_5.describe(include='all').loc['mean']['generation fossil oil'])
df2016_4.describe(include='all').loc['mean']
fossil_oil.append(df2016_4.describe(include='all').loc['mean']['generation fossil oil'])
df2016_3.describe(include='all').loc['mean']
fossil_oil.append(df2016_3.describe(include='all').loc['mean']['generation fossil oil'])
df2016_2.describe(include='all').loc['mean']
fossil_oil.append(df2016_2.describe(include='all').loc['mean']['generation fossil oil'])
df2016_1.describe(include='all').loc['mean']
fossil_oil.append(df2016_1.describe(include='all').loc['mean']['generation fossil oil'])
df2015_12.describe(include='all').loc['mean']
fossil_oil.append(df2015_12.describe(include='all').loc['mean']['generation fossil oil'])
df2015_11.describe(include='all').loc['mean']
fossil_oil.append(df2015_11.describe(include='all').loc['mean']['generation fossil oil'])
df2015_10.describe(include='all').loc['mean']
fossil_oil.append(df2015_10.describe(include='all').loc['mean']['generation fossil oil'])
df2015_9.describe(include='all').loc['mean']
fossil_oil.append(df2015_9.describe(include='all').loc['mean']['generation fossil oil'])
df2015_8.describe(include='all').loc['mean']
fossil_oil.append(df2015_8.describe(include='all').loc['mean']['generation fossil oil'])
df2015_7.describe(include='all').loc['mean']
fossil_oil.append(df2015_7.describe(include='all').loc['mean']['generation fossil oil'])
df2015_6.describe(include='all').loc['mean']
fossil_oil.append(df2015_6.describe(include='all').loc['mean']['generation fossil oil'])
df2015_5.describe(include='all').loc['mean']
fossil_oil.append(df2015_5.describe(include='all').loc['mean']['generation fossil oil'])
df2015_4.describe(include='all').loc['mean']
fossil_oil.append(df2015_4.describe(include='all').loc['mean']['generation fossil oil'])
df2015_3.describe(include='all').loc['mean']
fossil_oil.append(df2015_3.describe(include='all').loc['mean']['generation fossil oil'])
df2015_2.describe(include='all').loc['mean']
fossil_oil.append(df2015_2.describe(include='all').loc['mean']['generation fossil oil'])
df2015_1.describe(include='all').loc['mean']
fossil_oil.append(df2015_1.describe(include='all').loc['mean']['generation fossil oil'])
 
fossil_oil.reverse() # Average monthly values 
print(fossil_oil)

hydro_water= []
 
hydro_water.append(df2018_11.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_12.describe(include='all').loc['mean']
hydro_water.append(df2018_12.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_10.describe(include='all').loc['mean']
hydro_water.append(df2018_10.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_9.describe(include='all').loc['mean']
hydro_water.append(df2018_9.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_8.describe(include='all').loc['mean']
hydro_water.append(df2018_8.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_7.describe(include='all').loc['mean']
hydro_water.append(df2018_7.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_6.describe(include='all').loc['mean']
hydro_water.append(df2018_6.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_5.describe(include='all').loc['mean']
hydro_water.append(df2018_5.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_4.describe(include='all').loc['mean']
hydro_water.append(df2018_4.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_3.describe(include='all').loc['mean']
hydro_water.append(df2018_3.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_2.describe(include='all').loc['mean']
hydro_water.append(df2018_2.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2018_1.describe(include='all').loc['mean']
hydro_water.append(df2018_1.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_12.describe(include='all').loc['mean']
hydro_water.append(df2017_12.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_11.describe(include='all').loc['mean']
hydro_water.append(df2017_11.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_10.describe(include='all').loc['mean']
hydro_water.append(df2017_10.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_9.describe(include='all').loc['mean']
hydro_water.append(df2017_9.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_8.describe(include='all').loc['mean']
hydro_water.append(df2017_8.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_7.describe(include='all').loc['mean']
hydro_water.append(df2017_7.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_6.describe(include='all').loc['mean']
hydro_water.append(df2017_6.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_5.describe(include='all').loc['mean']
hydro_water.append(df2017_5.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_4.describe(include='all').loc['mean']
hydro_water.append(df2017_4.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_3.describe(include='all').loc['mean']
hydro_water.append(df2017_3.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_2.describe(include='all').loc['mean']
hydro_water.append(df2017_2.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2017_1.describe(include='all').loc['mean']
hydro_water.append(df2017_1.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_12.describe(include='all').loc['mean']
hydro_water.append(df2016_12.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_11.describe(include='all').loc['mean']
hydro_water.append(df2016_11.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_10.describe(include='all').loc['mean']
hydro_water.append(df2016_10.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_9.describe(include='all').loc['mean']
hydro_water.append(df2016_9.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_8.describe(include='all').loc['mean']
hydro_water.append(df2016_8.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_7.describe(include='all').loc['mean']
hydro_water.append(df2016_7.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_6.describe(include='all').loc['mean']
hydro_water.append(df2016_6.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_5.describe(include='all').loc['mean']
hydro_water.append(df2016_5.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_4.describe(include='all').loc['mean']
hydro_water.append(df2016_4.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_3.describe(include='all').loc['mean']
hydro_water.append(df2016_3.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_2.describe(include='all').loc['mean']
hydro_water.append(df2016_2.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2016_1.describe(include='all').loc['mean']
hydro_water.append(df2016_1.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_12.describe(include='all').loc['mean']
hydro_water.append(df2015_12.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_11.describe(include='all').loc['mean']
hydro_water.append(df2015_11.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_10.describe(include='all').loc['mean']
hydro_water.append(df2015_10.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_9.describe(include='all').loc['mean']
hydro_water.append(df2015_9.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_8.describe(include='all').loc['mean']
hydro_water.append(df2015_8.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_7.describe(include='all').loc['mean']
hydro_water.append(df2015_7.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_6.describe(include='all').loc['mean']
hydro_water.append(df2015_6.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_5.describe(include='all').loc['mean']
hydro_water.append(df2015_5.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_4.describe(include='all').loc['mean']
hydro_water.append(df2015_4.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_3.describe(include='all').loc['mean']
hydro_water.append(df2015_3.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_2.describe(include='all').loc['mean']
hydro_water.append(df2015_2.describe(include='all').loc['mean']['generation hydro water reservoir'])
df2015_1.describe(include='all').loc['mean']
hydro_water.append(df2015_1.describe(include='all').loc['mean']['generation hydro water reservoir'])
 
hydro_water.reverse() # Average monthly values 
print(hydro_water)

import statsmodels.api as sm
import numpy as np

y = [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881]

 
x = {'nuclear':[6665.969986357435, 6681.1235119047615, 6687.913862718708, 6068.16991643454, 5403.817204301075, 5659.276773296245, 6483.623655913979, 6437.845430107527, 6466.175, 5854.012096774193, 5973.075, 6626.029609690444, 6223.8494623655915, 6159.264367816092, 6699.888290713325, 6706.406944444445, 5714.009408602151, 6647.4638888888885, 6628.9220430107525, 6633.3494623655915, 6675.7555555555555, 6576.6859060402685, 5534.297222222222, 6325.970430107527, 6769.916666666667, 6739.267857142857, 6755.951547779273, 6676.383333333333, 5561.240591397849, 6063.859722222222, 6117.403225806452, 6675.846774193548, 6427.688888888889, 6003.754362416107, 5565.216666666666, 6815.138440860215, 6723.689516129032, 6429.3735119047615, 6091.685060565276, 5504.175, 5465.200268817204, 5603.227777777778, 6121.515477792732, 6655.32123655914, 6621.998611111111, 6539.120805369127, 5821.1518817204305, 5403.497222222222],
    "solar" : [1130.392905866303, 1244.5252976190477, 1283.479138627187, 1461.5194986072424, 1920.2728494623657, 1998.6606397774688, 1973.7405913978494, 1738.9502688172042, 1591.2902777777779, 1082.279569892473, 1171.7194444444444, 874.3135935397039, 1025.741935483871, 1258.058908045977, 1382.9057873485867, 1390.4166666666667, 1689.1814516129032, 1942.8291666666667, 1915.7752355316286, 1835.8521505376343, 1548.213888888889, 1013.2832214765101, 951.3819444444445, 914.9758064516129, 1088.4180107526881, 1157.4613095238096, 1415.0915208613728, 1468.8277777777778, 1800.0524193548388, 1919.0236111111112, 2025.119623655914, 1754.159946236559, 1731.3666666666666, 1344.3261744966444, 1180.6458333333333, 1035.4260752688172, 1051.4193548387098, 1246.110119047619, 1352.3189771197847, 1501.6472222222221, 1526.899193548387, 1855.1972222222223, 2010.3458950201884, 1706.9301075268818, 1510.6527777777778, 999.786577181208, 875.5900537634409, 831.6680555555556]
 "fossil_fuel_gas" : [4850.009549795362, 4674.135416666667, 4614.7523553162855, 4952.123955431754, 4415.3494623655915, 4934.930458970793, 6529.490591397849, 4919.491935483871, 5076.581944444444, 5231.5, 5387.741666666667, 5062.588156123822, 5271.1196236559135, 4450.360632183908, 4336.594885598924, 4263.481944444445, 4508.034946236559, 4994.327777777778, 5475.64333781965, 4869.987903225807, 4643.55, 6222.820134228188, 6439.015277777778, 6176.176075268817, 6412.591397849463, 5561.144345238095, 5337.418573351279, 5169.840277777777, 5493.271505376344, 7194.280555555555, 7366.073924731183, 6701.935483870968, 7092.451388888889, 6961.8, 8534.818055555555, 5835.915322580645, 5687.715053763441, 5468.040178571428, 4936.013458950202, 4745.273611111111, 5777.162634408603, 5807.555555555556, 5865.691790040377, 6119.346774193548, 5842.0625, 6127.481879194631, 6463.5362903225805, 6945.804166666667],
 "Biomass" : [483.73533424283767, 470.1502976190476, 468.1063257065949, 426.32033426183847, 503.5698924731183, 485.99860917941584, 512.4879032258065, 518.9475806451613, 517.1069444444445, 519.5564516129032, 503.6166666666667, 483.92462987886944, 459.9959677419355, 430.3448275862069, 429.7442799461642, 286.8902777777778, 337.2029569892473, 340.3375, 351.8896366083446, 369.64516129032256, 349.39166666666665, 336.2187919463087, 355.57301808066757, 338.7768817204301, 347.28360215053766, 351.3645833333333, 284.40242261103634, 280.7611111111111, 353.5040322580645, 339.9791666666667, 367.7069892473118, 362.8790322580645, 351.96805555555557, 343.938255033557, 354.59305555555557, 347.1733870967742, 343.8481182795699, 360.51190476190476, 307.2543741588156, 299.3930555555556, 318.30913978494624, 351.73333333333335, 367.2207267833109, 361.3252688172043, 355.46805555555557, 317.9275167785235, 320.16129032258067, 342.10277777777776],
 "wind_onshore" : [7587.697135061391, 7731.806547619048, 6747.878869448183, 5506.381615598886, 6757.408602150537, 4375.495132127956, 3955.2540322580644, 4856.173387096775, 4323.8, 4597.236559139785, 4493.763888888889, 4943.14131897712, 4993.399193548387, 6534.337643678161, 5884.690444145357, 5343.191666666667, 5309.384408602151, 5638.5375, 5715.833109017497, 5103.193548387097, 5484.695833333333, 4788.928859060403, 5766.394444444444, 4519.7661290322585, 6483.298387096775, 5330.943452380952, 5623.149394347241, 5741.669444444445, 5031.903225806452, 5586.527777777777, 4799.477150537635, 4348.514784946236, 3883.8791666666666, 5234.8, 5200.188888888889, 7257.2553763440865, 6197.444892473119, 6864.555059523809, 8771.240915208613, 5289.247222222222, 4389.743279569892, 4779.433333333333, 4059.907133243607, 4358.579301075269, 4265.988888888889, 6156.939597315436, 5886.720430107527, 6057.558333333333],
 "fossil_hard_coal": [5411.263301500682, 4045.9747023809523, 4233.818304172274, 4819.516713091922, 4019.6129032258063, 6207.095966620306, 6748.469086021505, 5859.370967741936, 5653.873611111111, 5788.694892473119, 5982.631944444444, 5323.676985195155, 4204.615591397849, 3027.655172413793, 2985.886944818304, 2226.186111111111, 2226.65188172043, 2877.0805555555557, 4003.9165545087485, 4172.501344086021, 4208.013888888889, 4271.040268456376, 4581.631944444444, 4984.295698924731, 5533.782258064516, 4382.5327380952385, 2967.8492597577388, 3119.322222222222, 4428.919354838709, 5091.152777777777, 4561.283602150537, 3786.2325268817203, 4010.465277777778, 4321.130201342282, 5491.216666666666, 4330.653225806452, 3783.6223118279568, 4144.389880952381, 2157.1830417227457, 2775.8791666666666, 3674.15188172043, 3059.616666666667, 4014.707940780619, 4121.565860215053, 4651.018055555555, 3782.8161073825504, 3365.7580645161293, 4838.777777777777],
 "other_renewable" : [70.66030013642565, 70.51488095238095, 66.63257065948856, 69.70055710306407, 70.56586021505376, 65.51182197496523, 68.3252688172043, 68.1760752688172, 67.96666666666667, 70.66935483870968, 70.3125, 71.62314939434724, 77.95430107526882, 74.45402298850574, 73.40242261103634, 78.275, 79.28225806451613, 83.48333333333333, 78.6271870794078, 78.43010752688173, 83.79166666666667, 83.78120805369127, 85.95694444444445, 90.09005376344086, 99.20430107526882, 94.90922619047619, 95.6850605652759, 95.97083333333333, 96.74596774193549, 92.10555555555555, 93.39650537634408, 92.24731182795699, 94.87222222222222, 95.6268456375839, 94.90138888888889, 91.81586021505376, 96.98252688172043, 96.75744047619048, 97.64199192462988, 97.15138888888889, 100.59005376344086, 101.10972222222222, 96.71736204576042, 96.61559139784946, 100.19444444444444, 98.61744966442953, 95.88172043010752, 96.4625],
 "fossil oil" : [306.0204638472033, 319.2395833333333, 319.3337819650067, 338.78133704735376, 332.56720430107526, 319.2294853963839, 360.23387096774195, 323.9139784946237, 343.4916666666667, 323.39112903225805, 346.06388888888887, 330.6514131897712, 337.46505376344084, 297.25431034482756, 294.05248990578735, 259.8875, 277.9153225806452, 289.82916666666665, 286.6900269541779, 283.30645161290323, 281.3861111111111, 276.9959731543624, 271.56944444444446, 276.63978494623655, 279.52284946236557, 291.4017857142857, 302.50740242261105, 261.4902777777778, 291.9206989247312, 299.3930555555556, 308.2002688172043, 306.23521505376345, 310.8013888888889, 287.4187919463087, 303.54305555555555, 293.9260752688172, 285.73924731182797, 295.9002976190476, 288.1265141318977, 257.62916666666666, 280.4502688172043, 285.12083333333334, 281.5450874831763, 283.3333333333333, 296.1361111111111, 291.2993288590604, 269.02150537634407, 272.98333333333335],
 "hydro_water_reservoir" : [2572.3396998635744, 3712.690476190476, 3081.620457604307, 2516.0125348189417, 2798.184139784946, 2531.1682892906815, 2412.5255376344085, 1963.0631720430108, 2261.1569444444444, 2276.9193548387098, 2404.3902777777776, 1943.42799461642, 4075.5846774193546, 4881.568965517241, 3901.5450874831763, 5119.295833333334, 4581.743279569892, 2983.7930555555554, 2556.6971736204578, 2460.0201612903224, 2303.461111111111, 2500.489932885906, 2501.2972222222224, 2805.2970430107525, 2156.951612903226, 1874.8497023809523, 2348.4589502018844, 1611.4152777777779, 1639.616935483871, 1448.6444444444444, 1290.983870967742, 1260.6908602150538, 1570.5097222222223, 1229.2845637583894, 1371.338888888889, 1452.9569892473119, 2271.896505376344, 2773.2038690476193, 4378.419919246298, 4159.898611111111, 2931.19623655914, 3362.5291666666667, 2789.228802153432, 2296.0295698924733, 2267.641666666667, 2172.1919463087247, 2763.0241935483873, 2665.9],
"fossil_brown_coal/lignite" :[572.8512960436562, 313.41815476190476, 244.43741588156124, 463.11977715877435, 374.2809139784946, 665.162726008345, 684.2204301075269, 585.7674731182796, 548.0833333333334, 528.0188172043011, 695.2847222222222, 493.4804845222073, 417.9274193548387, 191.66522988505747, 173.20323014804845, 143.57083333333333, 179.002688172043, 175.6, 398.8156123822342, 464.3736559139785, 473.72083333333336, 613.7691275167786, 649.5458333333333, 670.7956989247311, 688.6451612903226, 603.4151785714286, 335.66756393001344, 420.1152777777778, 500.77016129032256, 478.81111111111113, 650.6774193548387, 511.8467741935484, 642.6305555555556, 561.3221476510067, 667.6472222222222, 476.5430107526882, 379.56451612903226, 406.95089285714283, 124.41588156123822, 133.97916666666666, 307.7043010752688, 333.99861111111113, 506.36877523553164, 300.14247311827955, 558.1611111111112, 405.83758389261743, 406.22849462365593, 375.7361111111111]}
def reg(y, x):
    ones = np.ones(len(x[0]))
    X = sm.add_constant(np.column_stack((x[0], ones)))
    for ele in x[1:]:
        X = sm.add_constant(np.column_stack((ele, X)))
    results = sm.OLS(y, X).fit()
    return results

print(reg(y, X).summary())

len(wind)

len(io2)

modelnuclear = stats.linregress( [6665.969986357435, 6681.1235119047615, 6687.913862718708, 6068.16991643454, 5403.817204301075, 5659.276773296245, 6483.623655913979, 6437.845430107527, 6466.175, 5854.012096774193, 5973.075, 6626.029609690444, 6223.8494623655915, 6159.264367816092, 6699.888290713325, 6706.406944444445, 5714.009408602151, 6647.4638888888885, 6628.9220430107525, 6633.3494623655915, 6675.7555555555555, 6576.6859060402685, 5534.297222222222, 6325.970430107527, 6769.916666666667, 6739.267857142857, 6755.951547779273, 6676.383333333333, 5561.240591397849, 6063.859722222222, 6117.403225806452, 6675.846774193548, 6427.688888888889, 6003.754362416107, 5565.216666666666, 6815.138440860215, 6723.689516129032, 6429.3735119047615, 6091.685060565276, 5504.175, 5465.200268817204, 5603.227777777778, 6121.515477792732, 6655.32123655914, 6621.998611111111, 6539.120805369127, 5821.1518817204305, 5403.497222222222], [64.9490188172043,56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881] )

modelFossilOil = stats.linregress([306.0204638472033, 319.2395833333333, 319.3337819650067, 338.78133704735376, 332.56720430107526, 319.2294853963839, 360.23387096774195, 323.9139784946237, 343.4916666666667, 323.39112903225805, 346.06388888888887, 330.6514131897712, 337.46505376344084, 297.25431034482756, 294.05248990578735, 259.8875, 277.9153225806452, 289.82916666666665, 286.6900269541779, 283.30645161290323, 281.3861111111111, 276.9959731543624, 271.56944444444446, 276.63978494623655, 279.52284946236557, 291.4017857142857, 302.50740242261105, 261.4902777777778, 291.9206989247312, 299.3930555555556, 308.2002688172043, 306.23521505376345, 310.8013888888889, 287.4187919463087, 303.54305555555555, 293.9260752688172, 285.73924731182797, 295.9002976190476, 288.1265141318977, 257.62916666666666, 280.4502688172043, 285.12083333333334, 281.5450874831763, 283.3333333333333, 296.1361111111111, 291.2993288590604, 269.02150537634407, 272.98333333333335],
  [64.9490188172043,56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881] )



modelnuclear.rvalue**2

print(y)

print(nuclear)

model2 = stats.linregress([64.9490188172043, 56.383854166666666, 55.522462987886975, 58.35408333333333, 57.29405913978498, 65.9749027777778, 71.07204301075271, 63.99806451612899, 60.254791666666634, 59.40676510067113, 60.72679166666668, 61.901760752688226, 45.57872311827956, 36.752083333333374, 36.81800807537014, 32.61866666666666, 34.691370967741896, 46.266319444444434, 47.50201612903221, 47.6023387096774, 50.40559722222224, 60.182429530201404, 62.58105555555558, 67.5951344086021, 79.49208333333331, 59.83779761904767, 50.95989232839837, 51.71791666666662, 53.77262096774189, 56.25822222222224, 55.252580645161316, 54.08432795698931, 55.81655555555558, 63.92528859060403, 65.43065277777781, 65.15127688172035, 56.51197580645163, 60.877098214285674, 48.279717362045766, 50.40073611111113, 61.633763440860214, 64.34813888888884, 67.78344086021498, 70.36391129032262, 76.9140416666666, 70.36221476510062, 67.0426075268817, 66.62351388888881],[6665.969986357435, 6681.1235119047615, 6687.913862718708, 6068.16991643454, 5403.817204301075, 5659.276773296245, 6483.623655913979, 6437.845430107527, 6466.175, 5854.012096774193, 5973.075, 6626.029609690444, 6223.8494623655915, 6159.264367816092, 6699.888290713325, 6706.406944444445, 5714.009408602151, 6647.4638888888885, 6628.9220430107525, 6633.3494623655915, 6675.7555555555555, 6576.6859060402685, 5534.297222222222, 6325.970430107527, 6769.916666666667, 6739.267857142857, 6755.951547779273, 6676.383333333333, 5561.240591397849, 6063.859722222222, 6117.403225806452, 6675.846774193548, 6427.688888888889, 6003.754362416107, 5565.216666666666, 6815.138440860215, 6723.689516129032, 6429.3735119047615, 6091.685060565276, 5504.175, 5465.200268817204, 5603.227777777778, 6121.515477792732, 6655.32123655914, 6621.998611111111, 6539.120805369127, 5821.1518817204305, 5403.497222222222])

[64.9490188172043, 56.383854166666666, 55.522462987886975, 58.35408333333333, 57.29405913978498, 65.9749027777778, 71.07204301075271, 63.99806451612899, 60.254791666666634, 59.40676510067113, 60.72679166666668, 61.901760752688226, 45.57872311827956, 36.752083333333374, 36.81800807537014, 32.61866666666666, 34.691370967741896, 46.266319444444434, 47.50201612903221, 47.6023387096774, 50.40559722222224, 60.182429530201404, 62.58105555555558, 67.5951344086021, 79.49208333333331, 59.83779761904767, 50.95989232839837, 51.71791666666662, 53.77262096774189, 56.25822222222224, 55.252580645161316, 54.08432795698931, 55.81655555555558, 63.92528859060403, 65.43065277777781, 65.15127688172035, 56.51197580645163, 60.877098214285674, 48.279717362045766, 50.40073611111113, 61.633763440860214, 64.34813888888884, 67.78344086021498, 70.36391129032262, 76.9140416666666, 70.36221476510062, 67.0426075268817, 66.62351388888881]

print(solar)

modelsolar = stats.linregress([1130.392905866303, 1244.5252976190477, 1283.479138627187, 1461.5194986072424, 1920.2728494623657, 1998.6606397774688, 1973.7405913978494, 1738.9502688172042, 1591.2902777777779, 1082.279569892473, 1171.7194444444444, 874.3135935397039, 1025.741935483871, 1258.058908045977, 1382.9057873485867, 1390.4166666666667, 1689.1814516129032, 1942.8291666666667, 1915.7752355316286, 1835.8521505376343, 1548.213888888889, 1013.2832214765101, 951.3819444444445, 914.9758064516129, 1088.4180107526881, 1157.4613095238096, 1415.0915208613728, 1468.8277777777778, 1800.0524193548388, 1919.0236111111112, 2025.119623655914, 1754.159946236559, 1731.3666666666666, 1344.3261744966444, 1180.6458333333333, 1035.4260752688172, 1051.4193548387098, 1246.110119047619, 1352.3189771197847, 1501.6472222222221, 1526.899193548387, 1855.1972222222223, 2010.3458950201884, 1706.9301075268818, 1510.6527777777778, 999.786577181208, 875.5900537634409, 831.6680555555556],[64.9490188172043, 56.383854166666666, 55.522462987886975, 58.35408333333333, 57.29405913978498, 65.9749027777778, 71.07204301075271, 63.99806451612899, 60.254791666666634, 59.40676510067113, 60.72679166666668, 61.901760752688226, 45.57872311827956, 36.752083333333374, 36.81800807537014, 32.61866666666666, 34.691370967741896, 46.266319444444434, 47.50201612903221, 47.6023387096774, 50.40559722222224, 60.182429530201404, 62.58105555555558, 67.5951344086021, 79.49208333333331, 59.83779761904767, 50.95989232839837, 51.71791666666662, 53.77262096774189, 56.25822222222224, 55.252580645161316, 54.08432795698931, 55.81655555555558, 63.92528859060403, 65.43065277777781, 65.15127688172035, 56.51197580645163, 60.877098214285674, 48.279717362045766, 50.40073611111113, 61.633763440860214, 64.34813888888884, 67.78344086021498, 70.36391129032262, 76.9140416666666, 70.36221476510062, 67.0426075268817, 66.62351388888881]
)

modelsolar.rvalue**2

modelbiomass = stats.linregress([483.73533424283767, 470.1502976190476, 468.1063257065949, 426.32033426183847, 503.5698924731183, 485.99860917941584, 512.4879032258065, 518.9475806451613, 517.1069444444445, 519.5564516129032, 503.6166666666667, 483.92462987886944, 459.9959677419355, 430.3448275862069, 429.7442799461642, 286.8902777777778, 337.2029569892473, 340.3375, 351.8896366083446, 369.64516129032256, 349.39166666666665, 336.2187919463087, 355.57301808066757, 338.7768817204301, 347.28360215053766, 351.3645833333333, 284.40242261103634, 280.7611111111111, 353.5040322580645, 339.9791666666667, 367.7069892473118, 362.8790322580645, 351.96805555555557, 343.938255033557, 354.59305555555557, 347.1733870967742, 343.8481182795699, 360.51190476190476, 307.2543741588156, 299.3930555555556, 318.30913978494624, 351.73333333333335, 367.2207267833109, 361.3252688172043, 355.46805555555557, 317.9275167785235, 320.16129032258067, 342.10277777777776],
 [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

modelbiomass.rvalue**2

modelwindonshore = stats.linregress([7587.697135061391, 7731.806547619048, 6747.878869448183, 5506.381615598886, 6757.408602150537, 4375.495132127956, 3955.2540322580644, 4856.173387096775, 4323.8, 4597.236559139785, 4493.763888888889, 4943.14131897712, 4993.399193548387, 6534.337643678161, 5884.690444145357, 5343.191666666667, 5309.384408602151, 5638.5375, 5715.833109017497, 5103.193548387097, 5484.695833333333, 4788.928859060403, 5766.394444444444, 4519.7661290322585, 6483.298387096775, 5330.943452380952, 5623.149394347241, 5741.669444444445, 5031.903225806452, 5586.527777777777, 4799.477150537635, 4348.514784946236, 3883.8791666666666, 5234.8, 5200.188888888889, 7257.2553763440865, 6197.444892473119, 6864.555059523809, 8771.240915208613, 5289.247222222222, 4389.743279569892, 4779.433333333333, 4059.907133243607, 4358.579301075269, 4265.988888888889, 6156.939597315436, 5886.720430107527, 6057.558333333333], [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

modelwindonshore.rvalue**2

modelfossilfuelgas = stats.linregress([4850.009549795362, 4674.135416666667, 4614.7523553162855, 4952.123955431754, 4415.3494623655915, 4934.930458970793, 6529.490591397849, 4919.491935483871, 5076.581944444444, 5231.5, 5387.741666666667, 5062.588156123822, 5271.1196236559135, 4450.360632183908, 4336.594885598924, 4263.481944444445, 4508.034946236559, 4994.327777777778, 5475.64333781965, 4869.987903225807, 4643.55, 6222.820134228188, 6439.015277777778, 6176.176075268817, 6412.591397849463, 5561.144345238095, 5337.418573351279, 5169.840277777777, 5493.271505376344, 7194.280555555555, 7366.073924731183, 6701.935483870968, 7092.451388888889, 6961.8, 8534.818055555555, 5835.915322580645, 5687.715053763441, 5468.040178571428, 4936.013458950202, 4745.273611111111, 5777.162634408603, 5807.555555555556, 5865.691790040377, 6119.346774193548, 5842.0625, 6127.481879194631, 6463.5362903225805, 6945.804166666667],
 [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

modelfossilfuelgas.rvalue**2

modelotherrenewable = stats.linregress([70.66030013642565, 70.51488095238095, 66.63257065948856, 69.70055710306407, 70.56586021505376, 65.51182197496523, 68.3252688172043, 68.1760752688172, 67.96666666666667, 70.66935483870968, 70.3125, 71.62314939434724, 77.95430107526882, 74.45402298850574, 73.40242261103634, 78.275, 79.28225806451613, 83.48333333333333, 78.6271870794078, 78.43010752688173, 83.79166666666667, 83.78120805369127, 85.95694444444445, 90.09005376344086, 99.20430107526882, 94.90922619047619, 95.6850605652759, 95.97083333333333, 96.74596774193549, 92.10555555555555, 93.39650537634408, 92.24731182795699, 94.87222222222222, 95.6268456375839, 94.90138888888889, 91.81586021505376, 96.98252688172043, 96.75744047619048, 97.64199192462988, 97.15138888888889, 100.59005376344086, 101.10972222222222, 96.71736204576042, 96.61559139784946, 100.19444444444444, 98.61744966442953, 95.88172043010752, 96.4625],
 [64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

modelotherrenewable.rvalue**2



modelFossilHardcoal = stats.linregress([5411.263301500682, 4045.9747023809523, 4233.818304172274, 4819.516713091922, 4019.6129032258063, 6207.095966620306, 6748.469086021505, 5859.370967741936, 5653.873611111111, 5788.694892473119, 5982.631944444444, 5323.676985195155, 4204.615591397849, 3027.655172413793, 2985.886944818304, 2226.186111111111, 2226.65188172043, 2877.0805555555557, 4003.9165545087485, 4172.501344086021, 4208.013888888889, 4271.040268456376, 4581.631944444444, 4984.295698924731, 5533.782258064516, 4382.5327380952385, 2967.8492597577388, 3119.322222222222, 4428.919354838709, 5091.152777777777, 4561.283602150537, 3786.2325268817203, 4010.465277777778, 4321.130201342282, 5491.216666666666, 4330.653225806452, 3783.6223118279568, 4144.389880952381, 2157.1830417227457, 2775.8791666666666, 3674.15188172043, 3059.616666666667, 4014.707940780619, 4121.565860215053, 4651.018055555555, 3782.8161073825504, 3365.7580645161293, 4838.777777777777],
[64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

modelFossilHardcoal.rvalue**2

modelhydrowater = stats.linregress([2572.3396998635744, 3712.690476190476, 3081.620457604307, 2516.0125348189417, 2798.184139784946, 2531.1682892906815, 2412.5255376344085, 1963.0631720430108, 2261.1569444444444, 2276.9193548387098, 2404.3902777777776, 1943.42799461642, 4075.5846774193546, 4881.568965517241, 3901.5450874831763, 5119.295833333334, 4581.743279569892, 2983.7930555555554, 2556.6971736204578, 2460.0201612903224, 2303.461111111111, 2500.489932885906, 2501.2972222222224, 2805.2970430107525, 2156.951612903226, 1874.8497023809523, 2348.4589502018844, 1611.4152777777779, 1639.616935483871, 1448.6444444444444, 1290.983870967742, 1260.6908602150538, 1570.5097222222223, 1229.2845637583894, 1371.338888888889, 1452.9569892473119, 2271.896505376344, 2773.2038690476193, 4378.419919246298, 4159.898611111111, 2931.19623655914, 3362.5291666666667, 2789.228802153432, 2296.0295698924733, 2267.641666666667, 2172.1919463087247, 2763.0241935483873, 2665.9],
[64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

modelotherrenewable.rvalue**2

modelFossilBrowncoal = stats.linregress([572.8512960436562, 313.41815476190476, 244.43741588156124, 463.11977715877435, 374.2809139784946, 665.162726008345, 684.2204301075269, 585.7674731182796, 548.0833333333334, 528.0188172043011, 695.2847222222222, 493.4804845222073, 417.9274193548387, 191.66522988505747, 173.20323014804845, 143.57083333333333, 179.002688172043, 175.6, 398.8156123822342, 464.3736559139785, 473.72083333333336, 613.7691275167786, 649.5458333333333, 670.7956989247311, 688.6451612903226, 603.4151785714286, 335.66756393001344, 420.1152777777778, 500.77016129032256, 478.81111111111113, 650.6774193548387, 511.8467741935484, 642.6305555555556, 561.3221476510067, 667.6472222222222, 476.5430107526882, 379.56451612903226, 406.95089285714283, 124.41588156123822, 133.97916666666666, 307.7043010752688, 333.99861111111113, 506.36877523553164, 300.14247311827955, 558.1611111111112, 405.83758389261743, 406.22849462365593, 375.7361111111111],
[64.9490188172043,
 56.383854166666666,
 55.522462987886975,
 58.35408333333333,
 57.29405913978498,
 65.9749027777778,
 71.07204301075271,
 63.99806451612899,
 60.254791666666634,
 59.40676510067113,
 60.72679166666668,
 61.901760752688226,
 45.57872311827956,
 36.752083333333374,
 36.81800807537014,
 32.61866666666666,
 34.691370967741896,
 46.266319444444434,
 47.50201612903221,
 47.6023387096774,
 50.40559722222224,
 60.182429530201404,
 62.58105555555558,
 67.5951344086021,
 79.49208333333331,
 59.83779761904767,
 50.95989232839837,
 51.71791666666662,
 53.77262096774189,
 56.25822222222224,
 55.252580645161316,
 54.08432795698931,
 55.81655555555558,
 63.92528859060403,
 65.43065277777781,
 65.15127688172035,
 56.51197580645163,
 60.877098214285674,
 48.279717362045766,
 50.40073611111113,
 61.633763440860214,
 64.34813888888884,
 67.78344086021498,
 70.36391129032262,
 76.9140416666666,
 70.36221476510062,
 67.0426075268817,
 66.62351388888881])

modelFossilBrowncoal.rvalue**2





"""df
 
Our null hypothesis is that the total average nuclear,solar,fossil fuel gas, wind onshore, fossil hard coal, hydro, other renewable,fossil oil, hydro water reservoir and fossil brown coal/lignite generated are all 0.
 
Our alternative hypothesis is that the total average nuclear,solar,fossil fuel gas, wind onshore, fossil hard coal, hydro, other renewable,fossil oil, hydro water reservoir and fossil brown coal/lignite generated are not 0.
 
 
We will evaluate the significance behind these results under the alpha threshold of .05. This would mean that any variables having an impact 5% or less of the time would be deemed significant. Given that the p values of total average nuclear,solar,fossil fuel gas,biomass, wind onshore, fossil hard coal, other renewable,fossil oil, hydro water reservoir and fossil brown coal/lignite generated in a given month from 2015 to 2018 compared to the average price of energy per EUR/MWH is 0.931,0.817,0.383,0.000 ,0.086,0.001 ,0.501 , 0.791,0.652,and 0.552 respectively, one could conclude that there is significance between the average price of energy per EUR/MWH and the hydro generated from 2015 to 2018. In addition, one could conclude that there is significance between the average price of energy per EUR/MWH and other renewable energy generated from 2015 to 2018.This implies that the total average monthly outputs hydro and other renewable energy generated from 2015 to 2018 do have an correlation with the average price of energy per EUR/MWH. This would imply that the amount generated from hydro and other renewable energy affected the average price of energy per EUR/MWH from 2015 to 2018 in Spain.
 
 
0.0010(X1) + 0.0004(X2) -0.0663(X3)+ 0.7652(X4) + 0.0680(X5) + 0.0077(X6) + 0.0007(X7) -0.0005(X8) -0.0013(X9) + 0.0013(X10)
 
 
When the production of nuclear power increases by one unit, the average price of energy per EUR/MWH increases by .001 units. When the production of solar increases by one unit, the average price of energy per EUR/MWH increases by .0004 units. When the production of fossil fuel gas increases by one unit, the average price of energy per EUR/MWH decreases by .0663 units. When the production of wind onshore increases by one unit, the average price of energy per EUR/MWH increases by .7652 units. When the production of fossil hard coal increases by one unit, the price of energy per EUR/MWH increases by .0680 units. When the production of hydro increases by one unit, the price of energy per EUR/MWH increases by .0077 units. When the production of other renewables increases by one unit, the price of energy per EUR/MWH increases by .0007 units. When the production of fossil oil increases by one unit, the price of energy per EUR/MWH decreases by .0005 units. When the production of hydro water increases by one unit, the price of energy per EUR/MWH decreases by .0013 units. When the production of fossil brown coal increases by one unit, the price of energy per EUR/MWH increases by .0013 units. 
 
  Given these circumstances, it appears that the average price of energy per EUR/MWH decreases when fossil fuel and oil production increase. In addition, the average price of energy per EUR/MWH decreases when hydro power production increases. However, since their p values were above the alpha threshold, it would not be fair to assume that this is truly the case. In retrospect, it would be fair to assume that the price of energy per EUR/MWH increases when hydro and other renewable production increases.

While there are several variables to consider when evaluating time series relationships since elasticity is involved; it is always worth noting that by honing down on the scale of time, more precision will be yielded from our analytics due to the fact that seasonality has been discovered in this regression analysis. As such, a weekly average analysis rather than a monthly average analysis will be conducted for each respective season from the origonal dataframe. 

By investgating energy outputs and prices of energy per EUR/MWH on a weekly scale for each season of the year, predictions for the upcoming season can be timed in a fashionable manner. But why would Spanish economists ponder about such matters? Some important variables taken into considiration when investgating energy outputs and prices of energy per EUR/MWH are infation, the weather, and the population of Spain. By using the mentioned variables from he previous sentance in predicting energy prices, outputs can be managed accordingly so that the target price of energy per EUR/MWH can be as close to market equllibrium as it possibly can.
"""